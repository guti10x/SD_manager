
SD_programmer_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  08009c64  08009c64  0000ac64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  0000c0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  0000c0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0000b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800a890  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200000e8  0800a978  0000c0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  0800a978  0000c544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000997b  00000000  00000000  0000c111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002270  00000000  00000000  00015a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00017d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c1  00000000  00000000  00018760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cec  00000000  00000000  00018f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e624  00000000  00000000  00031c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c9b  00000000  00000000  00040231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  000c4f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c8958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c4c 	.word	0x08009c4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08009c4c 	.word	0x08009c4c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295
 800018e:	f000 b99b 	b.w	80004c8 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8110 	bcs.w	800048a <__udivmoddi4+0x27a>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810d 	bls.w	800048a <__udivmoddi4+0x27a>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fa 	bcs.w	800048e <__udivmoddi4+0x27e>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f7 	bls.w	800048e <__udivmoddi4+0x27e>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	2100      	movs	r1, #0
 80002a6:	1b9b      	subs	r3, r3, r6
 80002a8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80ee 	bcc.w	80004b8 <__udivmoddi4+0x2a8>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 808f 	bne.w	8000412 <__udivmoddi4+0x202>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fe:	fa1f f78c 	uxth.w	r7, ip
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80ae 	bhi.w	80004b2 <__udivmoddi4+0x2a2>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa24 f607 	lsr.w	r6, r4, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fbb6 f8f9 	udiv	r8, r6, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 6618 	mls	r6, r9, r8, r6
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	408c      	lsls	r4, r1
 8000388:	fa00 fa01 	lsl.w	sl, r0, r1
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	431c      	orrs	r4, r3
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000398:	4298      	cmp	r0, r3
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	eb1c 0303 	adds.w	r3, ip, r3
 80003a4:	f108 36ff 	add.w	r6, r8, #4294967295
 80003a8:	f080 8081 	bcs.w	80004ae <__udivmoddi4+0x29e>
 80003ac:	4298      	cmp	r0, r3
 80003ae:	d97e      	bls.n	80004ae <__udivmoddi4+0x29e>
 80003b0:	f1a8 0802 	sub.w	r8, r8, #2
 80003b4:	4463      	add	r3, ip
 80003b6:	1a1e      	subs	r6, r3, r0
 80003b8:	fbb6 f3f9 	udiv	r3, r6, r9
 80003bc:	fb09 6613 	mls	r6, r9, r3, r6
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1d0>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d6:	d266      	bcs.n	80004a6 <__udivmoddi4+0x296>
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d964      	bls.n	80004a6 <__udivmoddi4+0x296>
 80003dc:	3b02      	subs	r3, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e4:	fba0 8302 	umull	r8, r3, r0, r2
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	429c      	cmp	r4, r3
 80003ee:	46c6      	mov	lr, r8
 80003f0:	461e      	mov	r6, r3
 80003f2:	d350      	bcc.n	8000496 <__udivmoddi4+0x286>
 80003f4:	d04d      	beq.n	8000492 <__udivmoddi4+0x282>
 80003f6:	b155      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f8:	ebba 030e 	subs.w	r3, sl, lr
 80003fc:	eb64 0406 	sbc.w	r4, r4, r6
 8000400:	fa04 f707 	lsl.w	r7, r4, r7
 8000404:	40cb      	lsrs	r3, r1
 8000406:	431f      	orrs	r7, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 7400 	strd	r7, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e751      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000412:	fa0c fc02 	lsl.w	ip, ip, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d9      	lsrs	r1, r3
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fbb1 f0f8 	udiv	r0, r1, r8
 800042c:	fb08 1110 	mls	r1, r8, r0, r1
 8000430:	4094      	lsls	r4, r2
 8000432:	431c      	orrs	r4, r3
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x248>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29a>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29a>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	fbb3 f1f8 	udiv	r1, r3, r8
 800045e:	fb08 3311 	mls	r3, r8, r1, r3
 8000462:	b2a4      	uxth	r4, r4
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x272>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x292>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x292>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f2      	b.n	8000274 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0x94>
 8000492:	45c2      	cmp	sl, r8
 8000494:	d2af      	bcs.n	80003f6 <__udivmoddi4+0x1e6>
 8000496:	ebb8 0e02 	subs.w	lr, r8, r2
 800049a:	eb63 060c 	sbc.w	r6, r3, ip
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a9      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x272>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e79a      	b.n	80003e0 <__udivmoddi4+0x1d0>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x248>
 80004ae:	46b0      	mov	r8, r6
 80004b0:	e781      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74f      	b.n	8000358 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e711      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2110      	movs	r1, #16
 80004d4:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <SELECT+0x18>)
 80004d6:	f001 fb51 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004da:	2001      	movs	r0, #1
 80004dc:	f001 f8c2 	bl	8001664 <HAL_Delay>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800

080004e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2110      	movs	r1, #16
 80004f0:	4803      	ldr	r0, [pc, #12]	@ (8000500 <DESELECT+0x18>)
 80004f2:	f001 fb43 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f001 f8b4 	bl	8001664 <HAL_Delay>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800

08000504 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800050e:	bf00      	nop
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <SPI_TxByte+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	2b02      	cmp	r3, #2
 800051c:	d1f8      	bne.n	8000510 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800051e:	1df9      	adds	r1, r7, #7
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	2201      	movs	r2, #1
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <SPI_TxByte+0x30>)
 8000526:	f001 ffbd 	bl	80024a4 <HAL_SPI_Transmit>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000113c 	.word	0x2000113c

08000538 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000544:	bf00      	nop
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <SPI_TxBuffer+0x30>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	2b02      	cmp	r3, #2
 8000552:	d1f8      	bne.n	8000546 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000554:	887a      	ldrh	r2, [r7, #2]
 8000556:	2364      	movs	r3, #100	@ 0x64
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4803      	ldr	r0, [pc, #12]	@ (8000568 <SPI_TxBuffer+0x30>)
 800055c:	f001 ffa2 	bl	80024a4 <HAL_SPI_Transmit>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000113c 	.word	0x2000113c

0800056c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000572:	23ff      	movs	r3, #255	@ 0xff
 8000574:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000576:	bf00      	nop
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <SPI_RxByte+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	2b02      	cmp	r3, #2
 8000584:	d1f8      	bne.n	8000578 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000586:	1dba      	adds	r2, r7, #6
 8000588:	1df9      	adds	r1, r7, #7
 800058a:	2364      	movs	r3, #100	@ 0x64
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <SPI_RxByte+0x34>)
 8000592:	f002 f8ca 	bl	800272a <HAL_SPI_TransmitReceive>

	return data;
 8000596:	79bb      	ldrb	r3, [r7, #6]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000113c 	.word	0x2000113c

080005a4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005ac:	f7ff ffde 	bl	800056c <SPI_RxByte>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	701a      	strb	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <SD_ReadyWait+0x30>)
 80005c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005cc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005ce:	f7ff ffcd 	bl	800056c <SPI_RxByte>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2bff      	cmp	r3, #255	@ 0xff
 80005da:	d003      	beq.n	80005e4 <SD_ReadyWait+0x24>
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <SD_ReadyWait+0x30>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f4      	bne.n	80005ce <SD_ReadyWait+0xe>

	return res;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000106 	.word	0x20000106

080005f4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005fa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005fe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000600:	f7ff ff72 	bl	80004e8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e005      	b.n	8000616 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800060a:	20ff      	movs	r0, #255	@ 0xff
 800060c:	f7ff ff7a 	bl	8000504 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3301      	adds	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b09      	cmp	r3, #9
 800061a:	ddf6      	ble.n	800060a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800061c:	f7ff ff56 	bl	80004cc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000620:	2340      	movs	r3, #64	@ 0x40
 8000622:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000634:	2395      	movs	r3, #149	@ 0x95
 8000636:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000638:	463b      	mov	r3, r7
 800063a:	2106      	movs	r1, #6
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff7b 	bl	8000538 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000642:	e002      	b.n	800064a <SD_PowerOn+0x56>
	{
		cnt--;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3b01      	subs	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	f7ff ff8f 	bl	800056c <SPI_RxByte>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d002      	beq.n	800065a <SD_PowerOn+0x66>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f4      	bne.n	8000644 <SD_PowerOn+0x50>
	}

	DESELECT();
 800065a:	f7ff ff45 	bl	80004e8 <DESELECT>
	SPI_TxByte(0XFF);
 800065e:	20ff      	movs	r0, #255	@ 0xff
 8000660:	f7ff ff50 	bl	8000504 <SPI_TxByte>

	PowerFlag = 1;
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <SD_PowerOn+0x80>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000109 	.word	0x20000109

08000678 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <SD_PowerOff+0x14>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000109 	.word	0x20000109

08000690 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000694:	4b02      	ldr	r3, [pc, #8]	@ (80006a0 <SD_CheckPower+0x10>)
 8000696:	781b      	ldrb	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000109 	.word	0x20000109

080006a4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <SD_RxDataBlock+0x58>)
 80006b0:	22c8      	movs	r2, #200	@ 0xc8
 80006b2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006b4:	f7ff ff5a 	bl	800056c <SPI_RxByte>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2bff      	cmp	r3, #255	@ 0xff
 80006c0:	d103      	bne.n	80006ca <SD_RxDataBlock+0x26>
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SD_RxDataBlock+0x58>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f4      	bne.n	80006b4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80006ce:	d001      	beq.n	80006d4 <SD_RxDataBlock+0x30>
 80006d0:	2300      	movs	r3, #0
 80006d2:	e00f      	b.n	80006f4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff62 	bl	80005a4 <SPI_RxBytePtr>
	} while(len--);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	603a      	str	r2, [r7, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006ea:	f7ff ff3f 	bl	800056c <SPI_RxByte>
	SPI_RxByte();
 80006ee:	f7ff ff3d 	bl	800056c <SPI_RxByte>

	return TRUE;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000104 	.word	0x20000104

08000700 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000710:	f7ff ff56 	bl	80005c0 <SD_ReadyWait>
 8000714:	4603      	mov	r3, r0
 8000716:	2bff      	cmp	r3, #255	@ 0xff
 8000718:	d001      	beq.n	800071e <SD_TxDataBlock+0x1e>
 800071a:	2300      	movs	r3, #0
 800071c:	e02f      	b.n	800077e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff feef 	bl	8000504 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2bfd      	cmp	r3, #253	@ 0xfd
 800072a:	d020      	beq.n	800076e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800072c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff01 	bl	8000538 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000736:	f7ff ff19 	bl	800056c <SPI_RxByte>
		SPI_RxByte();
 800073a:	f7ff ff17 	bl	800056c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800073e:	e00b      	b.n	8000758 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000740:	f7ff ff14 	bl	800056c <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2b05      	cmp	r3, #5
 8000750:	d006      	beq.n	8000760 <SD_TxDataBlock+0x60>
			i++;
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	3301      	adds	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	2b40      	cmp	r3, #64	@ 0x40
 800075c:	d9f0      	bls.n	8000740 <SD_TxDataBlock+0x40>
 800075e:	e000      	b.n	8000762 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000760:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000762:	bf00      	nop
 8000764:	f7ff ff02 	bl	800056c <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0fa      	beq.n	8000764 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	2b05      	cmp	r3, #5
 8000776:	d101      	bne.n	800077c <SD_TxDataBlock+0x7c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <SD_TxDataBlock+0x7e>

	return FALSE;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	6039      	str	r1, [r7, #0]
 8000790:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000792:	f7ff ff15 	bl	80005c0 <SD_ReadyWait>
 8000796:	4603      	mov	r3, r0
 8000798:	2bff      	cmp	r3, #255	@ 0xff
 800079a:	d001      	beq.n	80007a0 <SD_SendCmd+0x1a>
 800079c:	23ff      	movs	r3, #255	@ 0xff
 800079e:	e042      	b.n	8000826 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feae 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	0e1b      	lsrs	r3, r3, #24
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fea8 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea2 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe9c 	bl	8000504 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe97 	bl	8000504 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b40      	cmp	r3, #64	@ 0x40
 80007da:	d102      	bne.n	80007e2 <SD_SendCmd+0x5c>
 80007dc:	2395      	movs	r3, #149	@ 0x95
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e007      	b.n	80007f2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b48      	cmp	r3, #72	@ 0x48
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x68>
 80007e8:	2387      	movs	r3, #135	@ 0x87
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e001      	b.n	80007f2 <SD_SendCmd+0x6c>
	else crc = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe85 	bl	8000504 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b4c      	cmp	r3, #76	@ 0x4c
 80007fe:	d101      	bne.n	8000804 <SD_SendCmd+0x7e>
 8000800:	f7ff feb4 	bl	800056c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000808:	f7ff feb0 	bl	800056c <SPI_RxByte>
 800080c:	4603      	mov	r3, r0
 800080e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000810:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da05      	bge.n	8000824 <SD_SendCmd+0x9e>
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3b01      	subs	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f1      	bne.n	8000808 <SD_SendCmd+0x82>

	return res;
 8000824:	7b7b      	ldrb	r3, [r7, #13]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SD_disk_initialize+0x14>
 8000840:	2301      	movs	r3, #1
 8000842:	e0d1      	b.n	80009e8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000844:	4b6a      	ldr	r3, [pc, #424]	@ (80009f0 <SD_disk_initialize+0x1c0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <SD_disk_initialize+0x2a>
 8000852:	4b67      	ldr	r3, [pc, #412]	@ (80009f0 <SD_disk_initialize+0x1c0>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	e0c6      	b.n	80009e8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800085a:	f7ff fecb 	bl	80005f4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800085e:	f7ff fe35 	bl	80004cc <SELECT>

	/* check disk type */
	type = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000866:	2100      	movs	r1, #0
 8000868:	2040      	movs	r0, #64	@ 0x40
 800086a:	f7ff ff8c 	bl	8000786 <SD_SendCmd>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	f040 80a1 	bne.w	80009b8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000876:	4b5f      	ldr	r3, [pc, #380]	@ (80009f4 <SD_disk_initialize+0x1c4>)
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800087e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000882:	2048      	movs	r0, #72	@ 0x48
 8000884:	f7ff ff7f 	bl	8000786 <SD_SendCmd>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d155      	bne.n	800093a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e00c      	b.n	80008ae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000894:	7bfc      	ldrb	r4, [r7, #15]
 8000896:	f7ff fe69 	bl	800056c <SPI_RxByte>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	f104 0310 	add.w	r3, r4, #16
 80008a2:	443b      	add	r3, r7
 80008a4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	3301      	adds	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d9ef      	bls.n	8000894 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008b4:	7abb      	ldrb	r3, [r7, #10]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d17e      	bne.n	80009b8 <SD_disk_initialize+0x188>
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	2baa      	cmp	r3, #170	@ 0xaa
 80008be:	d17b      	bne.n	80009b8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008c0:	2100      	movs	r1, #0
 80008c2:	2077      	movs	r0, #119	@ 0x77
 80008c4:	f7ff ff5f 	bl	8000786 <SD_SendCmd>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d807      	bhi.n	80008de <SD_disk_initialize+0xae>
 80008ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008d2:	2069      	movs	r0, #105	@ 0x69
 80008d4:	f7ff ff57 	bl	8000786 <SD_SendCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008de:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <SD_disk_initialize+0x1c4>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1ec      	bne.n	80008c0 <SD_disk_initialize+0x90>
 80008e6:	e000      	b.n	80008ea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008e8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008ea:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <SD_disk_initialize+0x1c4>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d062      	beq.n	80009b8 <SD_disk_initialize+0x188>
 80008f2:	2100      	movs	r1, #0
 80008f4:	207a      	movs	r0, #122	@ 0x7a
 80008f6:	f7ff ff46 	bl	8000786 <SD_SendCmd>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d15b      	bne.n	80009b8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e00c      	b.n	8000920 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000906:	7bfc      	ldrb	r4, [r7, #15]
 8000908:	f7ff fe30 	bl	800056c <SPI_RxByte>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f104 0310 	add.w	r3, r4, #16
 8000914:	443b      	add	r3, r7
 8000916:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d9ef      	bls.n	8000906 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SD_disk_initialize+0x104>
 8000930:	230c      	movs	r3, #12
 8000932:	e000      	b.n	8000936 <SD_disk_initialize+0x106>
 8000934:	2304      	movs	r3, #4
 8000936:	73bb      	strb	r3, [r7, #14]
 8000938:	e03e      	b.n	80009b8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800093a:	2100      	movs	r1, #0
 800093c:	2077      	movs	r0, #119	@ 0x77
 800093e:	f7ff ff22 	bl	8000786 <SD_SendCmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d808      	bhi.n	800095a <SD_disk_initialize+0x12a>
 8000948:	2100      	movs	r1, #0
 800094a:	2069      	movs	r0, #105	@ 0x69
 800094c:	f7ff ff1b 	bl	8000786 <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d801      	bhi.n	800095a <SD_disk_initialize+0x12a>
 8000956:	2302      	movs	r3, #2
 8000958:	e000      	b.n	800095c <SD_disk_initialize+0x12c>
 800095a:	2301      	movs	r3, #1
 800095c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d10e      	bne.n	8000982 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000964:	2100      	movs	r1, #0
 8000966:	2077      	movs	r0, #119	@ 0x77
 8000968:	f7ff ff0d 	bl	8000786 <SD_SendCmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d80e      	bhi.n	8000990 <SD_disk_initialize+0x160>
 8000972:	2100      	movs	r1, #0
 8000974:	2069      	movs	r0, #105	@ 0x69
 8000976:	f7ff ff06 	bl	8000786 <SD_SendCmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <SD_disk_initialize+0x160>
 8000980:	e00c      	b.n	800099c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000982:	2100      	movs	r1, #0
 8000984:	2041      	movs	r0, #65	@ 0x41
 8000986:	f7ff fefe 	bl	8000786 <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d004      	beq.n	800099a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <SD_disk_initialize+0x1c4>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1e2      	bne.n	800095e <SD_disk_initialize+0x12e>
 8000998:	e000      	b.n	800099c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800099a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <SD_disk_initialize+0x1c4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <SD_disk_initialize+0x184>
 80009a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a8:	2050      	movs	r0, #80	@ 0x50
 80009aa:	f7ff feec 	bl	8000786 <SD_SendCmd>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_initialize+0x188>
 80009b4:	2300      	movs	r3, #0
 80009b6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009b8:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <SD_disk_initialize+0x1c8>)
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009be:	f7ff fd93 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 80009c2:	f7ff fdd3 	bl	800056c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <SD_disk_initialize+0x1c0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <SD_disk_initialize+0x1c0>)
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e001      	b.n	80009e2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009de:	f7ff fe4b 	bl	8000678 <SD_PowerOff>
	}

	return Stat;
 80009e2:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <SD_disk_initialize+0x1c0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000104 	.word	0x20000104
 80009f8:	20000108 	.word	0x20000108

080009fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SD_disk_status+0x14>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e002      	b.n	8000a16 <SD_disk_status+0x1a>
	return Stat;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <SD_disk_status+0x24>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000000 	.word	0x20000000

08000a24 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4603      	mov	r3, r0
 8000a32:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <SD_disk_read+0x1c>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <SD_disk_read+0x20>
 8000a40:	2304      	movs	r3, #4
 8000a42:	e051      	b.n	8000ae8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <SD_disk_read+0xcc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SD_disk_read+0x32>
 8000a52:	2303      	movs	r3, #3
 8000a54:	e048      	b.n	8000ae8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <SD_disk_read+0xd0>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <SD_disk_read+0x44>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	025b      	lsls	r3, r3, #9
 8000a66:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a68:	f7ff fd30 	bl	80004cc <SELECT>

	if (count == 1)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d111      	bne.n	8000a96 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2051      	movs	r0, #81	@ 0x51
 8000a76:	f7ff fe86 	bl	8000786 <SD_SendCmd>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d129      	bne.n	8000ad4 <SD_disk_read+0xb0>
 8000a80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a84:	68b8      	ldr	r0, [r7, #8]
 8000a86:	f7ff fe0d 	bl	80006a4 <SD_RxDataBlock>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d021      	beq.n	8000ad4 <SD_disk_read+0xb0>
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	e01e      	b.n	8000ad4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2052      	movs	r0, #82	@ 0x52
 8000a9a:	f7ff fe74 	bl	8000786 <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d117      	bne.n	8000ad4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000aa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f7ff fdfb 	bl	80006a4 <SD_RxDataBlock>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00a      	beq.n	8000aca <SD_disk_read+0xa6>
				buff += 512;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000aba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1ed      	bne.n	8000aa4 <SD_disk_read+0x80>
 8000ac8:	e000      	b.n	8000acc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000aca:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	204c      	movs	r0, #76	@ 0x4c
 8000ad0:	f7ff fe59 	bl	8000786 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ad4:	f7ff fd08 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 8000ad8:	f7ff fd48 	bl	800056c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000108 	.word	0x20000108

08000af8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <SD_disk_write+0x1c>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <SD_disk_write+0x20>
 8000b14:	2304      	movs	r3, #4
 8000b16:	e06b      	b.n	8000bf0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <SD_disk_write+0x100>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SD_disk_write+0x32>
 8000b26:	2303      	movs	r3, #3
 8000b28:	e062      	b.n	8000bf0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <SD_disk_write+0x100>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SD_disk_write+0x44>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e059      	b.n	8000bf0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <SD_disk_write+0x104>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <SD_disk_write+0x56>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b4e:	f7ff fcbd 	bl	80004cc <SELECT>

	if (count == 1)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d110      	bne.n	8000b7a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	2058      	movs	r0, #88	@ 0x58
 8000b5c:	f7ff fe13 	bl	8000786 <SD_SendCmd>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d13a      	bne.n	8000bdc <SD_disk_write+0xe4>
 8000b66:	21fe      	movs	r1, #254	@ 0xfe
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fdc9 	bl	8000700 <SD_TxDataBlock>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d033      	beq.n	8000bdc <SD_disk_write+0xe4>
			count = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	e030      	b.n	8000bdc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <SD_disk_write+0x104>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2077      	movs	r0, #119	@ 0x77
 8000b8a:	f7ff fdfc 	bl	8000786 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b8e:	6839      	ldr	r1, [r7, #0]
 8000b90:	2057      	movs	r0, #87	@ 0x57
 8000b92:	f7ff fdf8 	bl	8000786 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2059      	movs	r0, #89	@ 0x59
 8000b9a:	f7ff fdf4 	bl	8000786 <SD_SendCmd>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d11b      	bne.n	8000bdc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ba4:	21fc      	movs	r1, #252	@ 0xfc
 8000ba6:	68b8      	ldr	r0, [r7, #8]
 8000ba8:	f7ff fdaa 	bl	8000700 <SD_TxDataBlock>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00a      	beq.n	8000bc8 <SD_disk_write+0xd0>
				buff += 512;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bb8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1ee      	bne.n	8000ba4 <SD_disk_write+0xac>
 8000bc6:	e000      	b.n	8000bca <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bc8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bca:	21fd      	movs	r1, #253	@ 0xfd
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fd97 	bl	8000700 <SD_TxDataBlock>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <SD_disk_write+0xe4>
			{
				count = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bdc:	f7ff fc84 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 8000be0:	f7ff fcc4 	bl	800056c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000108 	.word	0x20000108

08000c00 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	@ 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	603a      	str	r2, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SD_disk_ioctl+0x1e>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e113      	b.n	8000e46 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d124      	bne.n	8000c74 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d012      	beq.n	8000c58 <SD_disk_ioctl+0x58>
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	dc1a      	bgt.n	8000c6c <SD_disk_ioctl+0x6c>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <SD_disk_ioctl+0x40>
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d006      	beq.n	8000c4c <SD_disk_ioctl+0x4c>
 8000c3e:	e015      	b.n	8000c6c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c40:	f7ff fd1a 	bl	8000678 <SD_PowerOff>
			res = RES_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c4a:	e0fa      	b.n	8000e42 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c4c:	f7ff fcd2 	bl	80005f4 <SD_PowerOn>
			res = RES_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c56:	e0f4      	b.n	8000e42 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	1c5c      	adds	r4, r3, #1
 8000c5c:	f7ff fd18 	bl	8000690 <SD_CheckPower>
 8000c60:	4603      	mov	r3, r0
 8000c62:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c6a:	e0ea      	b.n	8000e42 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c72:	e0e6      	b.n	8000e42 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c74:	4b76      	ldr	r3, [pc, #472]	@ (8000e50 <SD_disk_ioctl+0x250>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SD_disk_ioctl+0x86>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e0df      	b.n	8000e46 <SD_disk_ioctl+0x246>

		SELECT();
 8000c86:	f7ff fc21 	bl	80004cc <SELECT>

		switch (ctrl)
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	f200 80c9 	bhi.w	8000e24 <SD_disk_ioctl+0x224>
 8000c92:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <SD_disk_ioctl+0x98>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000d8f 	.word	0x08000d8f
 8000c9c:	08000cd1 	.word	0x08000cd1
 8000ca0:	08000d7f 	.word	0x08000d7f
 8000ca4:	08000e25 	.word	0x08000e25
 8000ca8:	08000e25 	.word	0x08000e25
 8000cac:	08000e25 	.word	0x08000e25
 8000cb0:	08000e25 	.word	0x08000e25
 8000cb4:	08000e25 	.word	0x08000e25
 8000cb8:	08000e25 	.word	0x08000e25
 8000cbc:	08000e25 	.word	0x08000e25
 8000cc0:	08000e25 	.word	0x08000e25
 8000cc4:	08000da1 	.word	0x08000da1
 8000cc8:	08000dc5 	.word	0x08000dc5
 8000ccc:	08000de9 	.word	0x08000de9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2049      	movs	r0, #73	@ 0x49
 8000cd4:	f7ff fd57 	bl	8000786 <SD_SendCmd>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 80a6 	bne.w	8000e2c <SD_disk_ioctl+0x22c>
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fcdc 	bl	80006a4 <SD_RxDataBlock>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 809c 	beq.w	8000e2c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000cf4:	7b3b      	ldrb	r3, [r7, #12]
 8000cf6:	099b      	lsrs	r3, r3, #6
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	461a      	mov	r2, r3
 8000d02:	7d3b      	ldrb	r3, [r7, #20]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d10:	8bfb      	ldrh	r3, [r7, #30]
 8000d12:	029a      	lsls	r2, r3, #10
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e02d      	b.n	8000d76 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d1a:	7c7b      	ldrb	r3, [r7, #17]
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	7dbb      	ldrb	r3, [r7, #22]
 8000d24:	09db      	lsrs	r3, r3, #7
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	7d7b      	ldrb	r3, [r7, #21]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f003 0306 	and.w	r3, r3, #6
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d42:	7d3b      	ldrb	r3, [r7, #20]
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	7cfb      	ldrb	r3, [r7, #19]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	7cbb      	ldrb	r3, [r7, #18]
 8000d56:	029b      	lsls	r3, r3, #10
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d68:	8bfa      	ldrh	r2, [r7, #30]
 8000d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d6e:	3b09      	subs	r3, #9
 8000d70:	409a      	lsls	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000d7c:	e056      	b.n	8000e2c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d84:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d8c:	e055      	b.n	8000e3a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d8e:	f7ff fc17 	bl	80005c0 <SD_ReadyWait>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2bff      	cmp	r3, #255	@ 0xff
 8000d96:	d14b      	bne.n	8000e30 <SD_disk_ioctl+0x230>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d9e:	e047      	b.n	8000e30 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000da0:	2100      	movs	r1, #0
 8000da2:	2049      	movs	r0, #73	@ 0x49
 8000da4:	f7ff fcef 	bl	8000786 <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d142      	bne.n	8000e34 <SD_disk_ioctl+0x234>
 8000dae:	2110      	movs	r1, #16
 8000db0:	6a38      	ldr	r0, [r7, #32]
 8000db2:	f7ff fc77 	bl	80006a4 <SD_RxDataBlock>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d03b      	beq.n	8000e34 <SD_disk_ioctl+0x234>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dc2:	e037      	b.n	8000e34 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	204a      	movs	r0, #74	@ 0x4a
 8000dc8:	f7ff fcdd 	bl	8000786 <SD_SendCmd>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d132      	bne.n	8000e38 <SD_disk_ioctl+0x238>
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	6a38      	ldr	r0, [r7, #32]
 8000dd6:	f7ff fc65 	bl	80006a4 <SD_RxDataBlock>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d02b      	beq.n	8000e38 <SD_disk_ioctl+0x238>
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000de6:	e027      	b.n	8000e38 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000de8:	2100      	movs	r1, #0
 8000dea:	207a      	movs	r0, #122	@ 0x7a
 8000dec:	f7ff fccb 	bl	8000786 <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d116      	bne.n	8000e24 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000dfc:	e00b      	b.n	8000e16 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000dfe:	6a3c      	ldr	r4, [r7, #32]
 8000e00:	1c63      	adds	r3, r4, #1
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	f7ff fbb2 	bl	800056c <SPI_RxByte>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e10:	3301      	adds	r3, #1
 8000e12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d9ef      	bls.n	8000dfe <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e24:	2304      	movs	r3, #4
 8000e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e2a:	e006      	b.n	8000e3a <SD_disk_ioctl+0x23a>
			break;
 8000e2c:	bf00      	nop
 8000e2e:	e004      	b.n	8000e3a <SD_disk_ioctl+0x23a>
			break;
 8000e30:	bf00      	nop
 8000e32:	e002      	b.n	8000e3a <SD_disk_ioctl+0x23a>
			break;
 8000e34:	bf00      	nop
 8000e36:	e000      	b.n	8000e3a <SD_disk_ioctl+0x23a>
			break;
 8000e38:	bf00      	nop
		}

		DESELECT();
 8000e3a:	f7ff fb55 	bl	80004e8 <DESELECT>
		SPI_RxByte();
 8000e3e:	f7ff fb95 	bl	800056c <SPI_RxByte>
	}

	return res;
 8000e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	372c      	adds	r7, #44	@ 0x2c
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f000 fba1 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f925 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f000 f995 	bl	8001190 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e66:	f000 f95d 	bl	8001124 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000e6a:	f001 feb5 	bl	8002bd8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* WRITE CSV FILE */
  HAL_Delay(500);
 8000e6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e72:	f000 fbf7 	bl	8001664 <HAL_Delay>
  //f_lseek(&fil, fil.fsize);
  //f_puts("Dato1,Dato2,Dato3\n", &fil); // Añadir una fila con tres datos
  //f_close(&fil);

  char timestamp[20];
  int case_index = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]

  // Montar el sistema de archivos
  if (f_mount(&fs, "", 0) != FR_OK) {
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4935      	ldr	r1, [pc, #212]	@ (8000f54 <main+0x100>)
 8000e7e:	4836      	ldr	r0, [pc, #216]	@ (8000f58 <main+0x104>)
 8000e80:	f004 fb7e 	bl	8005580 <f_mount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <main+0x3a>
      // Manejar el error de montaje del sistema de archivos
      Error_Handler();
 8000e8a:	f000 f9d5 	bl	8001238 <Error_Handler>
  }

  get_current_timestamp(timestamp, sizeof(timestamp));
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2114      	movs	r1, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f8ec 	bl	8001070 <get_current_timestamp>
  save_sd(0,"Restarted detected", timestamp);
 8000e98:	463b      	mov	r3, r7
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	492f      	ldr	r1, [pc, #188]	@ (8000f5c <main+0x108>)
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f86e 	bl	8000f80 <save_sd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 /* Toggle the LED */
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ea4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea8:	482d      	ldr	r0, [pc, #180]	@ (8000f60 <main+0x10c>)
 8000eaa:	f000 fe7f 	bl	8001bac <HAL_GPIO_TogglePin>
	 HAL_Delay(200);
 8000eae:	20c8      	movs	r0, #200	@ 0xc8
 8000eb0:	f000 fbd8 	bl	8001664 <HAL_Delay>

	 get_current_timestamp(timestamp, sizeof(timestamp));
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2114      	movs	r1, #20
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f8d9 	bl	8001070 <get_current_timestamp>

	 switch (case_index) {
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d842      	bhi.n	8000f4a <main+0xf6>
 8000ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <main+0x78>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000ee9 	.word	0x08000ee9
 8000ed0:	08000ef7 	.word	0x08000ef7
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f13 	.word	0x08000f13
 8000edc:	08000f21 	.word	0x08000f21
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f3d 	.word	0x08000f3d
	 	  case 0:
	 		  //ID_Engine_temp
	 		  save_sd(1, "Valor_Engine_temp", timestamp);
 8000ee8:	463b      	mov	r3, r7
 8000eea:	461a      	mov	r2, r3
 8000eec:	491d      	ldr	r1, [pc, #116]	@ (8000f64 <main+0x110>)
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 f846 	bl	8000f80 <save_sd>
	 		  break;
 8000ef4:	e02c      	b.n	8000f50 <main+0xfc>
	 	  case 1:
	 		  //Battery_volt
	 		  save_sd(2, "Valor_Battery_volt", timestamp);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	461a      	mov	r2, r3
 8000efa:	491b      	ldr	r1, [pc, #108]	@ (8000f68 <main+0x114>)
 8000efc:	2002      	movs	r0, #2
 8000efe:	f000 f83f 	bl	8000f80 <save_sd>
	 		  break;
 8000f02:	e025      	b.n	8000f50 <main+0xfc>
	 	  case 2:
	 		  //Speed
	 		  save_sd(3, "Valor_Speed", timestamp);
 8000f04:	463b      	mov	r3, r7
 8000f06:	461a      	mov	r2, r3
 8000f08:	4918      	ldr	r1, [pc, #96]	@ (8000f6c <main+0x118>)
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f838 	bl	8000f80 <save_sd>
	 		  break;
 8000f10:	e01e      	b.n	8000f50 <main+0xfc>
	 	  case 3:
	 		  //Gear
	 		  save_sd(4, "Valor_Gear", timestamp);
 8000f12:	463b      	mov	r3, r7
 8000f14:	461a      	mov	r2, r3
 8000f16:	4916      	ldr	r1, [pc, #88]	@ (8000f70 <main+0x11c>)
 8000f18:	2004      	movs	r0, #4
 8000f1a:	f000 f831 	bl	8000f80 <save_sd>
	 		  break;
 8000f1e:	e017      	b.n	8000f50 <main+0xfc>
	 	  case 4:
	 		  //RPMs
	 		  save_sd(5, "Valor_RPM", timestamp);
 8000f20:	463b      	mov	r3, r7
 8000f22:	461a      	mov	r2, r3
 8000f24:	4913      	ldr	r1, [pc, #76]	@ (8000f74 <main+0x120>)
 8000f26:	2005      	movs	r0, #5
 8000f28:	f000 f82a 	bl	8000f80 <save_sd>
	 		  break;
 8000f2c:	e010      	b.n	8000f50 <main+0xfc>
	 	  case 5:
	 		  //Brake_pedal
	 		  save_sd(6, "Valor_Brake_pedal", timestamp );
 8000f2e:	463b      	mov	r3, r7
 8000f30:	461a      	mov	r2, r3
 8000f32:	4911      	ldr	r1, [pc, #68]	@ (8000f78 <main+0x124>)
 8000f34:	2006      	movs	r0, #6
 8000f36:	f000 f823 	bl	8000f80 <save_sd>
	 		  break;
 8000f3a:	e009      	b.n	8000f50 <main+0xfc>
	 	  case 6:
	 		  //Accel_pedal
	 		  save_sd(7,"Valor_Accel_pedal", timestamp);
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	461a      	mov	r2, r3
 8000f40:	490e      	ldr	r1, [pc, #56]	@ (8000f7c <main+0x128>)
 8000f42:	2007      	movs	r0, #7
 8000f44:	f000 f81c 	bl	8000f80 <save_sd>
	 		  break;
 8000f48:	e002      	b.n	8000f50 <main+0xfc>
	 	  default:
	 		  // Manejar el caso por defecto si case_index está fuera de rango
	 		  Error_Handler();
 8000f4a:	f000 f975 	bl	8001238 <Error_Handler>
	 		  break;
 8000f4e:	bf00      	nop
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f50:	e7a8      	b.n	8000ea4 <main+0x50>
 8000f52:	bf00      	nop
 8000f54:	08009cc8 	.word	0x08009cc8
 8000f58:	2000010c 	.word	0x2000010c
 8000f5c:	08009ccc 	.word	0x08009ccc
 8000f60:	40011000 	.word	0x40011000
 8000f64:	08009ce0 	.word	0x08009ce0
 8000f68:	08009cf4 	.word	0x08009cf4
 8000f6c:	08009d08 	.word	0x08009d08
 8000f70:	08009d14 	.word	0x08009d14
 8000f74:	08009d20 	.word	0x08009d20
 8000f78:	08009d2c 	.word	0x08009d2c
 8000f7c:	08009d40 	.word	0x08009d40

08000f80 <save_sd>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void save_sd(int id, const char* value, const char* timestamp) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f92:	6018      	str	r0, [r3, #0]
 8000f94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f98:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f9c:	6019      	str	r1, [r3, #0]
 8000f9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fa2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000fa6:	601a      	str	r2, [r3, #0]
    FIL fil;  // Variable local para manejar el archivo data.csv
    char buffer[256]; // Buffer para la línea que se va a escribir

    // Abrir el archivo data.csv
    if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) {
 8000fa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fac:	3b0c      	subs	r3, #12
 8000fae:	2212      	movs	r2, #18
 8000fb0:	492d      	ldr	r1, [pc, #180]	@ (8001068 <save_sd+0xe8>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fb2e 	bl	8005614 <f_open>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <save_sd+0x44>
        // Manejar el error de apertura o creación del archivo
        Error_Handler();
 8000fbe:	f000 f93b 	bl	8001238 <Error_Handler>
        return; // Salir de la función si falla la apertura del archivo
 8000fc2:	e04c      	b.n	800105e <save_sd+0xde>
    }

    // Posicionarse al final del archivo para añadir datos
    if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 8000fc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fc8:	f8d3 2fe0 	ldr.w	r2, [r3, #4064]	@ 0xfe0
 8000fcc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fd0:	3b0c      	subs	r3, #12
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 f963 	bl	80062a0 <f_lseek>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <save_sd+0x72>
        // Manejar el error de lseek
        f_close(&fil);
 8000fe0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fe4:	3b0c      	subs	r3, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 f92f 	bl	800624a <f_close>
        Error_Handler();
 8000fec:	f000 f924 	bl	8001238 <Error_Handler>
        return; // Salir de la función si falla el posicionamiento
 8000ff0:	e035      	b.n	800105e <save_sd+0xde>
    }

    // Escribir el id, value y timestamp en una sola línea
    snprintf(buffer, sizeof(buffer), "%d, %s, %s\n", id, value, timestamp);
 8000ff2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ff6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ffa:	f107 0020 	add.w	r0, r7, #32
 8000ffe:	380c      	subs	r0, #12
 8001000:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001004:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	9201      	str	r2, [sp, #4]
 800100c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001010:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <save_sd+0xec>)
 800101c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001020:	f005 fe2a 	bl	8006c78 <sniprintf>
    if (f_puts(buffer, &fil) == EOF) {
 8001024:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001028:	3a0c      	subs	r2, #12
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	3b0c      	subs	r3, #12
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fc62 	bl	80068fc <f_puts>
 8001038:	4603      	mov	r3, r0
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	d108      	bne.n	8001052 <save_sd+0xd2>
        // Manejar el error de escritura
        f_close(&fil);
 8001040:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001044:	3b0c      	subs	r3, #12
 8001046:	4618      	mov	r0, r3
 8001048:	f005 f8ff 	bl	800624a <f_close>
        Error_Handler();
 800104c:	f000 f8f4 	bl	8001238 <Error_Handler>
        return; // Salir de la función si falla la escritura
 8001050:	e005      	b.n	800105e <save_sd+0xde>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001052:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001056:	3b0c      	subs	r3, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f005 f8f6 	bl	800624a <f_close>
}
 800105e:	f507 578a 	add.w	r7, r7, #4416	@ 0x1140
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	08009d54 	.word	0x08009d54
 800106c:	08009d60 	.word	0x08009d60

08001070 <get_current_timestamp>:

// Función para obtener la fecha y hora actuales en formato de cadena
void get_current_timestamp(char* buffer, size_t buffer_size) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    time_t now = time(NULL);
 800107a:	2000      	movs	r0, #0
 800107c:	f006 fcb0 	bl	80079e0 <time>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 2302 	strd	r2, r3, [r7, #8]
    struct tm* t = localtime(&now);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fe75 	bl	8006d7c <localtime>
 8001092:	6178      	str	r0, [r7, #20]
    strftime(buffer, buffer_size, "%Y-%m-%d %H:%M:%S", t);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <get_current_timestamp+0x38>)
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f006 fc9e 	bl	80079dc <strftime>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	08009d6c 	.word	0x08009d6c

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	@ 0x40
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2228      	movs	r2, #40	@ 0x28
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fe55 	bl	8006d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d6:	2310      	movs	r3, #16
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd7c 	bl	8001be0 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ee:	f000 f8a3 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 ffea 	bl	80020e4 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001116:	f000 f88f 	bl	8001238 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3740      	adds	r7, #64	@ 0x40
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_SPI1_Init+0x64>)
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <MX_SPI1_Init+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001130:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001154:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001170:	220a      	movs	r2, #10
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001176:	f001 f911 	bl	800239c <HAL_SPI_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 f85a 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000113c 	.word	0x2000113c
 800118c:	40013000 	.word	0x40013000

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a20      	ldr	r2, [pc, #128]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_GPIO_Init+0x9c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011da:	4815      	ldr	r0, [pc, #84]	@ (8001230 <MX_GPIO_Init+0xa0>)
 80011dc:	f000 fcce 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2110      	movs	r1, #16
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <MX_GPIO_Init+0xa4>)
 80011e6:	f000 fcc9 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4619      	mov	r1, r3
 8001202:	480b      	ldr	r0, [pc, #44]	@ (8001230 <MX_GPIO_Init+0xa0>)
 8001204:	f000 fb36 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001208:	2310      	movs	r3, #16
 800120a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_GPIO_Init+0xa4>)
 8001220:	f000 fb28 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40011000 	.word	0x40011000
 8001234:	40010800 	.word	0x40010800

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_MspInit+0x60>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_MspInit+0x60>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000

080012a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <HAL_SPI_MspInit+0x88>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d12f      	bne.n	8001328 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a13      	ldr	r2, [pc, #76]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012f8:	23a0      	movs	r3, #160	@ 0xa0
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <HAL_SPI_MspInit+0x90>)
 800130c:	f000 fab2 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001310:	2340      	movs	r3, #64	@ 0x40
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <HAL_SPI_MspInit+0x90>)
 8001324:	f000 faa6 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013000 	.word	0x40013000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <SysTick_Handler+0x34>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <SysTick_Handler+0x18>
	  Timer1--;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <SysTick_Handler+0x34>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <SysTick_Handler+0x34>)
 800139e:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <SysTick_Handler+0x38>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <SysTick_Handler+0x2c>
	  Timer2--;
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <SysTick_Handler+0x38>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <SysTick_Handler+0x38>)
 80013b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f93a 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000104 	.word	0x20000104
 80013c0:	20000106 	.word	0x20000106

080013c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return 1;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <_kill>:

int _kill(int pid, int sig)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013dc:	f006 fe52 	bl	8008084 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2216      	movs	r2, #22
 80013e4:	601a      	str	r2, [r3, #0]
  return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_exit>:

void _exit (int status)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013fa:	f04f 31ff 	mov.w	r1, #4294967295
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffe7 	bl	80013d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <_exit+0x12>

08001408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
  }

  return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf1      	blt.n	8001454 <_write+0x12>
  }
  return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_close>:

int _close(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a0:	605a      	str	r2, [r3, #4]
  return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f006 fdba 	bl	8008084 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20005000 	.word	0x20005000
 800153c:	00000400 	.word	0x00000400
 8001540:	20001198 	.word	0x20001198
 8001544:	20001548 	.word	0x20001548

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001554:	f7ff fff8 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800155a:	490c      	ldr	r1, [pc, #48]	@ (800158c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800155c:	4a0c      	ldr	r2, [pc, #48]	@ (8001590 <LoopFillZerobss+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001570:	4c09      	ldr	r4, [pc, #36]	@ (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f006 fd87 	bl	8008090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001582:	f7ff fc67 	bl	8000e54 <main>
  bx lr
 8001586:	4770      	bx	lr
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001590:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 8001594:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001598:	20001544 	.word	0x20001544

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x28>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x28>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f92b 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe42 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f935 	bl	800185a <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f90b 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000008 	.word	0x20000008
 8001624:	20000010 	.word	0x20000010
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_IncTick+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a03      	ldr	r2, [pc, #12]	@ (800164c <HAL_IncTick+0x20>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000010 	.word	0x20000010
 800164c:	2000119c 	.word	0x2000119c

08001650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	@ (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	2000119c 	.word	0x2000119c

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fff0 	bl	8001650 <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffe0 	bl	8001650 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000010 	.word	0x20000010

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	@ (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	@ 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff90 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff49 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb0 	bl	80017c8 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	@ 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e169      	b.n	8001b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8158 	bne.w	8001b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018b0:	4a98      	ldr	r2, [pc, #608]	@ (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d875      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018b6:	4a98      	ldr	r2, [pc, #608]	@ (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018bc:	4a96      	ldr	r2, [pc, #600]	@ (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d86f      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018c2:	4a96      	ldr	r2, [pc, #600]	@ (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018c8:	4a94      	ldr	r2, [pc, #592]	@ (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d869      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ce:	4a94      	ldr	r2, [pc, #592]	@ (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04c      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018d4:	4a92      	ldr	r2, [pc, #584]	@ (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d863      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018da:	4a92      	ldr	r2, [pc, #584]	@ (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d046      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018e0:	4a90      	ldr	r2, [pc, #576]	@ (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d85d      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d82a      	bhi.n	8001940 <HAL_GPIO_Init+0xcc>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d859      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ee:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <HAL_GPIO_Init+0x80>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	08001949 	.word	0x08001949
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	0800199d 	.word	0x0800199d
 8001904:	080019a3 	.word	0x080019a3
 8001908:	080019a3 	.word	0x080019a3
 800190c:	080019a3 	.word	0x080019a3
 8001910:	080019a3 	.word	0x080019a3
 8001914:	080019a3 	.word	0x080019a3
 8001918:	080019a3 	.word	0x080019a3
 800191c:	080019a3 	.word	0x080019a3
 8001920:	080019a3 	.word	0x080019a3
 8001924:	080019a3 	.word	0x080019a3
 8001928:	080019a3 	.word	0x080019a3
 800192c:	080019a3 	.word	0x080019a3
 8001930:	080019a3 	.word	0x080019a3
 8001934:	080019a3 	.word	0x080019a3
 8001938:	08001951 	.word	0x08001951
 800193c:	08001965 	.word	0x08001965
 8001940:	4a79      	ldr	r2, [pc, #484]	@ (8001b28 <HAL_GPIO_Init+0x2b4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e02c      	b.n	80019a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e029      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e024      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	3308      	adds	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e01f      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e01a      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001976:	2304      	movs	r3, #4
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e013      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	611a      	str	r2, [r3, #16]
          break;
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	615a      	str	r2, [r3, #20]
          break;
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          break;
 80019a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	@ 0xff
 80019a8:	d801      	bhi.n	80019ae <HAL_GPIO_Init+0x13a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_Init+0x13e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	@ 0xff
 80019b8:	d802      	bhi.n	80019c0 <HAL_GPIO_Init+0x14c>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x152>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	3b08      	subs	r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	210f      	movs	r1, #15
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80b1 	beq.w	8001b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0c:	4a48      	ldr	r2, [pc, #288]	@ (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a40      	ldr	r2, [pc, #256]	@ (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1ec>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1e8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3e      	ldr	r2, [pc, #248]	@ (8001b3c <HAL_GPIO_Init+0x2c8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a60:	2300      	movs	r3, #0
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a72:	492f      	ldr	r1, [pc, #188]	@ (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	492c      	ldr	r1, [pc, #176]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4928      	ldr	r1, [pc, #160]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4922      	ldr	r1, [pc, #136]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	491e      	ldr	r1, [pc, #120]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4918      	ldr	r1, [pc, #96]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4914      	ldr	r1, [pc, #80]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d021      	beq.n	8001b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	490e      	ldr	r1, [pc, #56]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e021      	b.n	8001b56 <HAL_GPIO_Init+0x2e2>
 8001b12:	bf00      	nop
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	10210000 	.word	0x10210000
 8001b24:	10120000 	.word	0x10120000
 8001b28:	10110000 	.word	0x10110000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40011400 	.word	0x40011400
 8001b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_GPIO_Init+0x304>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <HAL_GPIO_Init+0x304>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f ae8e 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	372c      	adds	r7, #44	@ 0x2c
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43d9      	mvns	r1, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e272      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b92      	ldr	r3, [pc, #584]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d112      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c18:	4b8c      	ldr	r3, [pc, #560]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x12c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d168      	bne.n	8001d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e24c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76>
 8001c48:	4b80      	ldr	r3, [pc, #512]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7a      	ldr	r2, [pc, #488]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b78      	ldr	r3, [pc, #480]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xbc>
 8001c82:	4b72      	ldr	r3, [pc, #456]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a71      	ldr	r2, [pc, #452]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fcc8 	bl	8001650 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fcc4 	bl	8001650 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e200      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe4>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fcb4 	bl	8001650 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fcb0 	bl	8001650 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1ec      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x10c>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d26:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
 8001d32:	4b46      	ldr	r3, [pc, #280]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c0      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4939      	ldr	r1, [pc, #228]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fc69 	bl	8001650 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff fc65 	bl	8001650 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4927      	ldr	r1, [pc, #156]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc48 	bl	8001650 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc44 	bl	8001650 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e180      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03a      	beq.n	8001e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fc28 	bl	8001650 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc24 	bl	8001650 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e160      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fa9c 	bl	8002360 <RCC_Delay>
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fc0e 	bl	8001650 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fc0a 	bl	8001650 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e146      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b92      	ldr	r3, [pc, #584]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e9      	bne.n	8001e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a6 	beq.w	8001fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b8b      	ldr	r3, [pc, #556]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a87      	ldr	r2, [pc, #540]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b85      	ldr	r3, [pc, #532]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	@ (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7e      	ldr	r2, [pc, #504]	@ (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbcb 	bl	8001650 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fbc7 	bl	8001650 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	@ 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e103      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001efa:	4b6a      	ldr	r3, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a69      	ldr	r2, [pc, #420]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a66      	ldr	r2, [pc, #408]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x356>
 8001f1c:	4b61      	ldr	r3, [pc, #388]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a60      	ldr	r2, [pc, #384]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f36:	4b5b      	ldr	r3, [pc, #364]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b58      	ldr	r3, [pc, #352]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a57      	ldr	r2, [pc, #348]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fb7b 	bl	8001650 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb77 	bl	8001650 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0b1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x37e>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb65 	bl	8001650 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fb61 	bl	8001650 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e09b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d061      	beq.n	8002098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fb35 	bl	8001650 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7ff fb31 	bl	8001650 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002012:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4921      	ldr	r1, [pc, #132]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	430b      	orrs	r3, r1
 8002036:	491b      	ldr	r1, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fb05 	bl	8001650 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fb01 	bl	8001650 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
 8002068:	e035      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff faee 	bl	8001650 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff faea 	bl	8001650 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
 8002096:	e01e      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e019      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_RCC_OscConfig+0x500>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0d0      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b6a      	ldr	r3, [pc, #424]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b67      	ldr	r3, [pc, #412]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4965      	ldr	r1, [pc, #404]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800214a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d115      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e073      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b39      	ldr	r3, [pc, #228]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4936      	ldr	r1, [pc, #216]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7ff fa3c 	bl	8001650 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7ff fa38 	bl	8001650 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e053      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d210      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4922      	ldr	r1, [pc, #136]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225e:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	@ (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f99a 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08009dd4 	.word	0x08009dd4
 80022b0:	20000008 	.word	0x20000008
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e027      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	e027      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0c9b      	lsrs	r3, r3, #18
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	4a11      	ldr	r2, [pc, #68]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	fb03 f202 	mul.w	r2, r3, r2
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0c      	ldr	r2, [pc, #48]	@ (800235c <HAL_RCC_GetSysClockFreq+0xa4>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	613b      	str	r3, [r7, #16]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800233a:	613b      	str	r3, [r7, #16]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	693b      	ldr	r3, [r7, #16]
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	007a1200 	.word	0x007a1200
 8002354:	08009de4 	.word	0x08009de4
 8002358:	08009df4 	.word	0x08009df4
 800235c:	003d0900 	.word	0x003d0900

08002360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <RCC_Delay+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <RCC_Delay+0x38>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800237c:	bf00      	nop
  }
  while (Delay --);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <RCC_Delay+0x1c>
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000008 	.word	0x20000008
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e076      	b.n	800249c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023be:	d009      	beq.n	80023d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
 80023c6:	e005      	b.n	80023d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe ff5a 	bl	80012a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002458:	ea42 0103 	orr.w	r1, r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	0c1a      	lsrs	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f002 0204 	and.w	r2, r2, #4
 800247a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_SPI_Transmit+0x22>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e12d      	b.n	8002722 <HAL_SPI_Transmit+0x27e>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ce:	f7ff f8bf 	bl	8001650 <HAL_GetTick>
 80024d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d002      	beq.n	80024ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e8:	e116      	b.n	8002718 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_Transmit+0x52>
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024fa:	e10d      	b.n	8002718 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2203      	movs	r2, #3
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002542:	d10f      	bne.n	8002564 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002552:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002562:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b40      	cmp	r3, #64	@ 0x40
 8002570:	d007      	beq.n	8002582 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800258a:	d14f      	bne.n	800262c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_SPI_Transmit+0xf6>
 8002594:	8afb      	ldrh	r3, [r7, #22]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d142      	bne.n	8002620 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	1c9a      	adds	r2, r3, #2
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025be:	e02f      	b.n	8002620 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d112      	bne.n	80025f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	1c9a      	adds	r2, r3, #2
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025f2:	e015      	b.n	8002620 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f4:	f7ff f82c 	bl	8001650 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d803      	bhi.n	800260c <HAL_SPI_Transmit+0x168>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <HAL_SPI_Transmit+0x16e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800261e:	e07b      	b.n	8002718 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ca      	bne.n	80025c0 <HAL_SPI_Transmit+0x11c>
 800262a:	e050      	b.n	80026ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_SPI_Transmit+0x196>
 8002634:	8afb      	ldrh	r3, [r7, #22]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d144      	bne.n	80026c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002660:	e030      	b.n	80026c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d113      	bne.n	8002698 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002696:	e015      	b.n	80026c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002698:	f7fe ffda 	bl	8001650 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d803      	bhi.n	80026b0 <HAL_SPI_Transmit+0x20c>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d102      	bne.n	80026b6 <HAL_SPI_Transmit+0x212>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80026c2:	e029      	b.n	8002718 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1c9      	bne.n	8002662 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa62 	bl	8002b9c <SPI_EndRxTxTransaction>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e003      	b.n	8002718 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002720:	7ffb      	ldrb	r3, [r7, #31]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b08c      	sub	sp, #48	@ 0x30
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002738:	2301      	movs	r3, #1
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x26>
 800274c:	2302      	movs	r3, #2
 800274e:	e198      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x358>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002758:	f7fe ff7a 	bl	8001650 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002772:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002776:	2b01      	cmp	r3, #1
 8002778:	d00f      	beq.n	800279a <HAL_SPI_TransmitReceive+0x70>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002780:	d107      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x68>
 800278a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800278e:	2b04      	cmp	r3, #4
 8002790:	d003      	beq.n	800279a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002798:	e16d      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x82>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x82>
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80027b2:	e160      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d003      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2205      	movs	r2, #5
 80027c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d007      	beq.n	800281c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002824:	d17c      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x10a>
 800282e:	8b7b      	ldrh	r3, [r7, #26]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d16a      	bne.n	800290a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002858:	e057      	b.n	800290a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d11b      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x176>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x176>
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d113      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d119      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x1b8>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d014      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	b292      	uxth	r2, r2
 80028c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	1c9a      	adds	r2, r3, #2
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028de:	2301      	movs	r3, #1
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028e2:	f7fe feb5 	bl	8001650 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d80b      	bhi.n	800290a <HAL_SPI_TransmitReceive+0x1e0>
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d007      	beq.n	800290a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002908:	e0b5      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1a2      	bne.n	800285a <HAL_SPI_TransmitReceive+0x130>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d19d      	bne.n	800285a <HAL_SPI_TransmitReceive+0x130>
 800291e:	e080      	b.n	8002a22 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_TransmitReceive+0x204>
 8002928:	8b7b      	ldrh	r3, [r7, #26]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d16f      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002954:	e05b      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11c      	bne.n	800299e <HAL_SPI_TransmitReceive+0x274>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d017      	beq.n	800299e <HAL_SPI_TransmitReceive+0x274>
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d114      	bne.n	800299e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d119      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x2b6>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029dc:	2301      	movs	r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029e0:	f7fe fe36 	bl	8001650 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d803      	bhi.n	80029f8 <HAL_SPI_TransmitReceive+0x2ce>
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d102      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x2d4>
 80029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a0c:	e033      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d19e      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x22c>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d199      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8b8 	bl	8002b9c <SPI_EndRxTxTransaction>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002a3e:	e01a      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6c:	e003      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3730      	adds	r7, #48	@ 0x30
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a9c:	f7fe fdd8 	bl	8001650 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aac:	f7fe fdd0 	bl	8001650 <HAL_GetTick>
 8002ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	0d1b      	lsrs	r3, r3, #20
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	e054      	b.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d050      	beq.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002acc:	f7fe fdc0 	bl	8001650 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d902      	bls.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d13d      	bne.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afa:	d111      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b04:	d004      	beq.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d107      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b28:	d10f      	bne.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e017      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d19b      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000008 	.word	0x20000008

08002b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	@ 0x80
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ff6a 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e000      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002bdc:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <MX_FATFS_Init+0x18>)
 8002bde:	4805      	ldr	r0, [pc, #20]	@ (8002bf4 <MX_FATFS_Init+0x1c>)
 8002be0:	f003 ff10 	bl	8006a04 <FATFS_LinkDriver>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <MX_FATFS_Init+0x20>)
 8002bea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200011a4 	.word	0x200011a4
 8002bf4:	20000014 	.word	0x20000014
 8002bf8:	200011a0 	.word	0x200011a0

08002bfc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002c00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fe0a 	bl	8000830 <SD_disk_initialize>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fee1 	bl	80009fc <SD_disk_status>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002c56:	7bf8      	ldrb	r0, [r7, #15]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	f7fd fee1 	bl	8000a24 <SD_disk_read>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002c7e:	7bf8      	ldrb	r0, [r7, #15]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	f7fd ff37 	bl	8000af8 <SD_disk_write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	603a      	str	r2, [r7, #0]
 8002ca0:	71fb      	strb	r3, [r7, #7]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	79b9      	ldrb	r1, [r7, #6]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd ffa7 	bl	8000c00 <SD_disk_ioctl>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <disk_status+0x30>)
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	4905      	ldr	r1, [pc, #20]	@ (8002cf0 <disk_status+0x30>)
 8002cda:	440a      	add	r2, r1
 8002cdc:	7a12      	ldrb	r2, [r2, #8]
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4798      	blx	r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200013c8 	.word	0x200013c8

08002cf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <disk_initialize+0x48>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <disk_initialize+0x48>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <disk_initialize+0x48>)
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	4906      	ldr	r1, [pc, #24]	@ (8002d3c <disk_initialize+0x48>)
 8002d24:	440a      	add	r2, r1
 8002d26:	7a12      	ldrb	r2, [r2, #8]
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4798      	blx	r3
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200013c8 	.word	0x200013c8

08002d40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	4a0a      	ldr	r2, [pc, #40]	@ (8002d7c <disk_read+0x3c>)
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	689c      	ldr	r4, [r3, #8]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	4a07      	ldr	r2, [pc, #28]	@ (8002d7c <disk_read+0x3c>)
 8002d60:	4413      	add	r3, r2
 8002d62:	7a18      	ldrb	r0, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	47a0      	blx	r4
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200013c8 	.word	0x200013c8

08002d80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <disk_write+0x3c>)
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68dc      	ldr	r4, [r3, #12]
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	@ (8002dbc <disk_write+0x3c>)
 8002da0:	4413      	add	r3, r2
 8002da2:	7a18      	ldrb	r0, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	47a0      	blx	r4
 8002dac:	4603      	mov	r3, r0
 8002dae:	75fb      	strb	r3, [r7, #23]
  return res;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200013c8 	.word	0x200013c8

08002dc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	603a      	str	r2, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	@ (8002df8 <disk_ioctl+0x38>)
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	4906      	ldr	r1, [pc, #24]	@ (8002df8 <disk_ioctl+0x38>)
 8002de0:	440a      	add	r2, r1
 8002de2:	7a10      	ldrb	r0, [r2, #8]
 8002de4:	79b9      	ldrb	r1, [r7, #6]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4798      	blx	r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
  return res;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200013c8 	.word	0x200013c8

08002dfc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002e10:	e007      	b.n	8002e22 <mem_cpy+0x26>
		*d++ = *s++;
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	1c53      	adds	r3, r2, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	6179      	str	r1, [r7, #20]
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f2      	bne.n	8002e12 <mem_cpy+0x16>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002e48:	e005      	b.n	8002e56 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	617a      	str	r2, [r7, #20]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f4      	bne.n	8002e4a <mem_set+0x12>
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002e84:	bf00      	nop
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <mem_cmp+0x40>
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	61fa      	str	r2, [r7, #28]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	61ba      	str	r2, [r7, #24]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	1acb      	subs	r3, r1, r3
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ec      	beq.n	8002e86 <mem_cmp+0x1a>
	return r;
 8002eac:	697b      	ldr	r3, [r7, #20]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002ec2:	e002      	b.n	8002eca <chk_chr+0x12>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <chk_chr+0x26>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d1f2      	bne.n	8002ec4 <chk_chr+0xc>
	return *str;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e03b      	b.n	8002f78 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8002f00:	4931      	ldr	r1, [pc, #196]	@ (8002fc8 <chk_lock+0xdc>)
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02c      	beq.n	8002f6e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002f14:	492c      	ldr	r1, [pc, #176]	@ (8002fc8 <chk_lock+0xdc>)
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d120      	bne.n	8002f72 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8002f30:	4925      	ldr	r1, [pc, #148]	@ (8002fc8 <chk_lock+0xdc>)
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3304      	adds	r3, #4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f48:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d111      	bne.n	8002f72 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8002f4e:	491e      	ldr	r1, [pc, #120]	@ (8002fc8 <chk_lock+0xdc>)
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	881a      	ldrh	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f66:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d102      	bne.n	8002f72 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8002f6c:	e007      	b.n	8002f7e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3301      	adds	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d9c0      	bls.n	8002f00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d109      	bne.n	8002f98 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <chk_lock+0xa4>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d101      	bne.n	8002f94 <chk_lock+0xa8>
 8002f90:	2300      	movs	r3, #0
 8002f92:	e013      	b.n	8002fbc <chk_lock+0xd0>
 8002f94:	2312      	movs	r3, #18
 8002f96:	e011      	b.n	8002fbc <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <chk_lock+0xca>
 8002f9e:	490a      	ldr	r1, [pc, #40]	@ (8002fc8 <chk_lock+0xdc>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	330a      	adds	r3, #10
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d101      	bne.n	8002fba <chk_lock+0xce>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	e000      	b.n	8002fbc <chk_lock+0xd0>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200011b0 	.word	0x200011b0

08002fcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e002      	b.n	8002fde <enq_lock+0x12>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d809      	bhi.n	8002ff8 <enq_lock+0x2c>
 8002fe4:	490a      	ldr	r1, [pc, #40]	@ (8003010 <enq_lock+0x44>)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ef      	bne.n	8002fd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	200011b0 	.word	0x200011b0

08003014 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e02e      	b.n	8003082 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003024:	4958      	ldr	r1, [pc, #352]	@ (8003188 <inc_lock+0x174>)
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d11d      	bne.n	800307c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003040:	4951      	ldr	r1, [pc, #324]	@ (8003188 <inc_lock+0x174>)
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3304      	adds	r3, #4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800305a:	429a      	cmp	r2, r3
 800305c:	d10e      	bne.n	800307c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800305e:	494a      	ldr	r1, [pc, #296]	@ (8003188 <inc_lock+0x174>)
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3308      	adds	r3, #8
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003078:	429a      	cmp	r2, r3
 800307a:	d006      	beq.n	800308a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d9cd      	bls.n	8003024 <inc_lock+0x10>
 8003088:	e000      	b.n	800308c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800308a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d148      	bne.n	8003124 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e002      	b.n	800309e <inc_lock+0x8a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d809      	bhi.n	80030b8 <inc_lock+0xa4>
 80030a4:	4938      	ldr	r1, [pc, #224]	@ (8003188 <inc_lock+0x174>)
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ef      	bne.n	8003098 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d101      	bne.n	80030c2 <inc_lock+0xae>
 80030be:	2300      	movs	r3, #0
 80030c0:	e05d      	b.n	800317e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	482f      	ldr	r0, [pc, #188]	@ (8003188 <inc_lock+0x174>)
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	4829      	ldr	r0, [pc, #164]	@ (8003188 <inc_lock+0x174>)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4403      	add	r3, r0
 80030f0:	3304      	adds	r3, #4
 80030f2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fa:	88d8      	ldrh	r0, [r3, #6]
 80030fc:	4922      	ldr	r1, [pc, #136]	@ (8003188 <inc_lock+0x174>)
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3308      	adds	r3, #8
 800310c:	4602      	mov	r2, r0
 800310e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003110:	491d      	ldr	r1, [pc, #116]	@ (8003188 <inc_lock+0x174>)
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	330a      	adds	r3, #10
 8003120:	2200      	movs	r2, #0
 8003122:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <inc_lock+0x130>
 800312a:	4917      	ldr	r1, [pc, #92]	@ (8003188 <inc_lock+0x174>)
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	330a      	adds	r3, #10
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <inc_lock+0x130>
 8003140:	2300      	movs	r3, #0
 8003142:	e01c      	b.n	800317e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <inc_lock+0x14e>
 800314a:	490f      	ldr	r1, [pc, #60]	@ (8003188 <inc_lock+0x174>)
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	330a      	adds	r3, #10
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	b299      	uxth	r1, r3
 8003160:	e001      	b.n	8003166 <inc_lock+0x152>
 8003162:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003166:	4808      	ldr	r0, [pc, #32]	@ (8003188 <inc_lock+0x174>)
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4403      	add	r3, r0
 8003174:	330a      	adds	r3, #10
 8003176:	460a      	mov	r2, r1
 8003178:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3301      	adds	r3, #1
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	200011b0 	.word	0x200011b0

0800318c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d82e      	bhi.n	80031fe <dec_lock+0x72>
		n = Files[i].ctr;
 80031a0:	491b      	ldr	r1, [pc, #108]	@ (8003210 <dec_lock+0x84>)
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	330a      	adds	r3, #10
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ba:	d101      	bne.n	80031c0 <dec_lock+0x34>
 80031bc:	2300      	movs	r3, #0
 80031be:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <dec_lock+0x40>
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80031cc:	4910      	ldr	r1, [pc, #64]	@ (8003210 <dec_lock+0x84>)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	330a      	adds	r3, #10
 80031dc:	89fa      	ldrh	r2, [r7, #14]
 80031de:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <dec_lock+0x6c>
 80031e6:	490a      	ldr	r1, [pc, #40]	@ (8003210 <dec_lock+0x84>)
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	737b      	strb	r3, [r7, #13]
 80031fc:	e001      	b.n	8003202 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80031fe:	2302      	movs	r3, #2
 8003200:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003202:	7b7b      	ldrb	r3, [r7, #13]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	200011b0 	.word	0x200011b0

08003214 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e016      	b.n	8003250 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003222:	4910      	ldr	r1, [pc, #64]	@ (8003264 <clear_lock+0x50>)
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d108      	bne.n	800324a <clear_lock+0x36>
 8003238:	490a      	ldr	r1, [pc, #40]	@ (8003264 <clear_lock+0x50>)
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d9e5      	bls.n	8003222 <clear_lock+0xe>
	}
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	200011b0 	.word	0x200011b0

08003268 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d040      	beq.n	8003302 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003290:	7858      	ldrb	r0, [r3, #1]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	2301      	movs	r3, #1
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	f7ff fd72 	bl	8002d80 <disk_write>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <sync_window+0x40>
			res = FR_DISK_ERR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e02c      	b.n	8003302 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ae:	2200      	movs	r2, #0
 80032b0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d21b      	bcs.n	8003302 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d0:	78db      	ldrb	r3, [r3, #3]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e012      	b.n	80032fc <sync_window+0x94>
					wsect += fs->fsize;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4413      	add	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ea:	7858      	ldrb	r0, [r3, #1]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	2301      	movs	r3, #1
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	f7ff fd45 	bl	8002d80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d8e9      	bhi.n	80032d6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d01e      	beq.n	8003366 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff9d 	bl	8003268 <sync_window>
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800333e:	7858      	ldrb	r0, [r3, #1]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	2301      	movs	r3, #1
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	f7ff fcfb 	bl	8002d40 <disk_read>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003350:	f04f 33ff 	mov.w	r3, #4294967295
 8003354:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff75 	bl	8003268 <sync_window>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 80ad 	bne.w	80034e4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b03      	cmp	r3, #3
 8003394:	f040 8098 	bne.w	80034c8 <sync_fs+0x158>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800339e:	795b      	ldrb	r3, [r3, #5]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 8091 	bne.w	80034c8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ae:	895b      	ldrh	r3, [r3, #10]
 80033b0:	461a      	mov	r2, r3
 80033b2:	2100      	movs	r1, #0
 80033b4:	f7ff fd40 	bl	8002e38 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2255      	movs	r2, #85	@ 0x55
 80033bc:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	22aa      	movs	r2, #170	@ 0xaa
 80033c4:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2252      	movs	r2, #82	@ 0x52
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2252      	movs	r2, #82	@ 0x52
 80033d2:	705a      	strb	r2, [r3, #1]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2261      	movs	r2, #97	@ 0x61
 80033d8:	709a      	strb	r2, [r3, #2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2241      	movs	r2, #65	@ 0x41
 80033de:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2272      	movs	r2, #114	@ 0x72
 80033e4:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2272      	movs	r2, #114	@ 0x72
 80033ec:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2241      	movs	r2, #65	@ 0x41
 80033f4:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2261      	movs	r2, #97	@ 0x61
 80033fc:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	b29b      	uxth	r3, r3
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2da      	uxtb	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	b2da      	uxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	0e1b      	lsrs	r3, r3, #24
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	b29b      	uxth	r3, r3
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b29b      	uxth	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	0e1b      	lsrs	r3, r3, #24
 800348c:	b2da      	uxtb	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ac:	7858      	ldrb	r0, [r3, #1]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b8:	2301      	movs	r3, #1
 80034ba:	f7ff fc61 	bl	8002d80 <disk_write>
			fs->fsi_flag = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c4:	2200      	movs	r2, #0
 80034c6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fc73 	bl	8002dc0 <disk_ioctl>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3b02      	subs	r3, #2
 80034fc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	3b02      	subs	r3, #2
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d301      	bcc.n	8003512 <clust2sect+0x24>
 800350e:	2300      	movs	r3, #0
 8003510:	e00c      	b.n	800352c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003518:	789b      	ldrb	r3, [r3, #2]
 800351a:	461a      	mov	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	fb03 f202 	mul.w	r2, r3, r2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	4413      	add	r3, r2
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d906      	bls.n	8003554 <get_fat+0x1e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <get_fat+0x24>
		val = 1;	/* Internal error */
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e0e3      	b.n	8003722 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b03      	cmp	r3, #3
 800356a:	f000 8097 	beq.w	800369c <get_fat+0x166>
 800356e:	2b03      	cmp	r3, #3
 8003570:	f300 80cd 	bgt.w	800370e <get_fat+0x1d8>
 8003574:	2b01      	cmp	r3, #1
 8003576:	d002      	beq.n	800357e <get_fat+0x48>
 8003578:	2b02      	cmp	r3, #2
 800357a:	d05e      	beq.n	800363a <get_fat+0x104>
 800357c:	e0c7      	b.n	800370e <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359a:	895b      	ldrh	r3, [r3, #10]
 800359c:	4619      	mov	r1, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a4:	4413      	add	r3, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff feaf 	bl	800330c <move_window>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 80af 	bne.w	8003714 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	60fa      	str	r2, [r7, #12]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035c2:	8952      	ldrh	r2, [r2, #10]
 80035c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80035c8:	fb01 f202 	mul.w	r2, r1, r2
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e2:	895b      	ldrh	r3, [r3, #10]
 80035e4:	4619      	mov	r1, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ec:	4413      	add	r3, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fe8b 	bl	800330c <move_window>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 808d 	bne.w	8003718 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003604:	895b      	ldrh	r3, [r3, #10]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	fbb3 f1f2 	udiv	r1, r3, r2
 800360e:	fb01 f202 	mul.w	r2, r1, r2
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <get_fat+0xfa>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	e002      	b.n	8003636 <get_fat+0x100>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003636:	617b      	str	r3, [r7, #20]
			break;
 8003638:	e073      	b.n	8003722 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003648:	895b      	ldrh	r3, [r3, #10]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	4619      	mov	r1, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	fbb3 f3f1 	udiv	r3, r3, r1
 8003656:	4413      	add	r3, r2
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe56 	bl	800330c <move_window>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d15a      	bne.n	800371c <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003670:	8952      	ldrh	r2, [r2, #10]
 8003672:	fbb3 f1f2 	udiv	r1, r3, r2
 8003676:	fb01 f202 	mul.w	r2, r1, r2
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3301      	adds	r3, #1
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b21a      	sxth	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21b      	sxth	r3, r3
 8003696:	b29b      	uxth	r3, r3
 8003698:	617b      	str	r3, [r7, #20]
			break;
 800369a:	e042      	b.n	8003722 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a2:	6a1a      	ldr	r2, [r3, #32]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036aa:	895b      	ldrh	r3, [r3, #10]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b8:	4413      	add	r3, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fe25 	bl	800330c <move_window>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d12b      	bne.n	8003720 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036d2:	8952      	ldrh	r2, [r2, #10]
 80036d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d8:	fb01 f202 	mul.w	r2, r1, r2
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	3303      	adds	r3, #3
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	061a      	lsls	r2, r3, #24
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3302      	adds	r3, #2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3301      	adds	r3, #1
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	4313      	orrs	r3, r2
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800370a:	617b      	str	r3, [r7, #20]
			break;
 800370c:	e009      	b.n	8003722 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800370e:	2301      	movs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e006      	b.n	8003722 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003714:	bf00      	nop
 8003716:	e004      	b.n	8003722 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003720:	bf00      	nop
		}
	}

	return val;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d906      	bls.n	800374c <put_fat+0x20>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <put_fat+0x26>
		res = FR_INT_ERR;
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e13a      	b.n	80039c8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b03      	cmp	r3, #3
 800375c:	f000 80d0 	beq.w	8003900 <put_fat+0x1d4>
 8003760:	2b03      	cmp	r3, #3
 8003762:	f300 8127 	bgt.w	80039b4 <put_fat+0x288>
 8003766:	2b01      	cmp	r3, #1
 8003768:	d003      	beq.n	8003772 <put_fat+0x46>
 800376a:	2b02      	cmp	r3, #2
 800376c:	f000 808f 	beq.w	800388e <put_fat+0x162>
 8003770:	e120      	b.n	80039b4 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4413      	add	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378e:	895b      	ldrh	r3, [r3, #10]
 8003790:	4619      	mov	r1, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fbb3 f3f1 	udiv	r3, r3, r1
 8003798:	4413      	add	r3, r2
 800379a:	4619      	mov	r1, r3
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fdb5 	bl	800330c <move_window>
 80037a2:	4603      	mov	r3, r0
 80037a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037a6:	7ffb      	ldrb	r3, [r7, #31]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 8106 	bne.w	80039ba <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	617a      	str	r2, [r7, #20]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037ba:	8952      	ldrh	r2, [r2, #10]
 80037bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80037c0:	fb01 f202 	mul.w	r2, r1, r2
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <put_fat+0xc6>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b25a      	sxtb	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e001      	b.n	80037f6 <put_fat+0xca>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003800:	2201      	movs	r2, #1
 8003802:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003812:	895b      	ldrh	r3, [r3, #10]
 8003814:	4619      	mov	r1, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fbb3 f3f1 	udiv	r3, r3, r1
 800381c:	4413      	add	r3, r2
 800381e:	4619      	mov	r1, r3
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fd73 	bl	800330c <move_window>
 8003826:	4603      	mov	r3, r0
 8003828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800382a:	7ffb      	ldrb	r3, [r7, #31]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 80c6 	bne.w	80039be <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003838:	895b      	ldrh	r3, [r3, #10]
 800383a:	461a      	mov	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003842:	fb01 f202 	mul.w	r2, r1, r2
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <put_fat+0x134>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e00e      	b.n	800387e <put_fat+0x152>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b25b      	sxtb	r3, r3
 8003866:	f023 030f 	bic.w	r3, r3, #15
 800386a:	b25a      	sxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b25b      	sxtb	r3, r3
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b25b      	sxtb	r3, r3
 8003878:	4313      	orrs	r3, r2
 800387a:	b25b      	sxtb	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003888:	2201      	movs	r2, #1
 800388a:	711a      	strb	r2, [r3, #4]
			break;
 800388c:	e09c      	b.n	80039c8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389c:	895b      	ldrh	r3, [r3, #10]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038aa:	4413      	add	r3, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fd2c 	bl	800330c <move_window>
 80038b4:	4603      	mov	r3, r0
 80038b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 8081 	bne.w	80039c2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ca:	8952      	ldrh	r2, [r2, #10]
 80038cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038d0:	fb01 f202 	mul.w	r2, r1, r2
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	3301      	adds	r3, #1
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fa:	2201      	movs	r2, #1
 80038fc:	711a      	strb	r2, [r3, #4]
			break;
 80038fe:	e063      	b.n	80039c8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800390e:	895b      	ldrh	r3, [r3, #10]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	b29b      	uxth	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	fbb3 f3f1 	udiv	r3, r3, r1
 800391c:	4413      	add	r3, r2
 800391e:	4619      	mov	r1, r3
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff fcf3 	bl	800330c <move_window>
 8003926:	4603      	mov	r3, r0
 8003928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800392a:	7ffb      	ldrb	r3, [r7, #31]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d14a      	bne.n	80039c6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800393a:	8952      	ldrh	r2, [r2, #10]
 800393c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003940:	fb01 f202 	mul.w	r2, r1, r2
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	3303      	adds	r3, #3
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	061a      	lsls	r2, r3, #24
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	3302      	adds	r3, #2
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3301      	adds	r3, #1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	4313      	orrs	r3, r2
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	7812      	ldrb	r2, [r2, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4313      	orrs	r3, r2
 8003976:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	b29b      	uxth	r3, r3
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	b29a      	uxth	r2, r3
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3301      	adds	r3, #1
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0c1a      	lsrs	r2, r3, #16
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	3302      	adds	r3, #2
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0e1a      	lsrs	r2, r3, #24
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	3303      	adds	r3, #3
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ae:	2201      	movs	r2, #1
 80039b0:	711a      	strb	r2, [r3, #4]
			break;
 80039b2:	e009      	b.n	80039c8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80039b4:	2302      	movs	r3, #2
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e006      	b.n	80039c8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80039ba:	bf00      	nop
 80039bc:	e004      	b.n	80039c8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80039be:	bf00      	nop
 80039c0:	e002      	b.n	80039c8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80039c6:	bf00      	nop
		}
	}

	return res;
 80039c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d906      	bls.n	80039f0 <remove_chain+0x1e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <remove_chain+0x24>
		res = FR_INT_ERR;
 80039f0:	2302      	movs	r3, #2
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e049      	b.n	8003a8a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80039fa:	e03b      	b.n	8003a74 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fd99 	bl	8003536 <get_fat>
 8003a04:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d03b      	beq.n	8003a84 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <remove_chain+0x46>
 8003a12:	2302      	movs	r3, #2
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e038      	b.n	8003a8a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d102      	bne.n	8003a26 <remove_chain+0x54>
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e031      	b.n	8003a8a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003a26:	2200      	movs	r2, #0
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe7e 	bl	800372c <put_fat>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d126      	bne.n	8003a88 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d013      	beq.n	8003a70 <remove_chain+0x9e>
				fs->free_clust++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	3301      	adds	r3, #1
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a58:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a60:	795b      	ldrb	r3, [r3, #5]
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3bc      	bcc.n	80039fc <remove_chain+0x2a>
 8003a82:	e002      	b.n	8003a8a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8003a88:	bf00      	nop
		}
	}

	return res;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d006      	beq.n	8003ac2 <create_chain+0x2e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d31d      	bcc.n	8003afe <create_chain+0x6a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e01a      	b.n	8003afe <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fd33 	bl	8003536 <get_fat>
 8003ad0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d801      	bhi.n	8003adc <create_chain+0x48>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e07f      	b.n	8003bdc <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d101      	bne.n	8003ae8 <create_chain+0x54>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	e079      	b.n	8003bdc <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d201      	bcs.n	8003afa <create_chain+0x66>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	e070      	b.n	8003bdc <create_chain+0x148>
		scl = clst;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3301      	adds	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d307      	bcc.n	8003b26 <create_chain+0x92>
			ncl = 2;
 8003b16:	2302      	movs	r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d901      	bls.n	8003b26 <create_chain+0x92>
 8003b22:	2300      	movs	r3, #0
 8003b24:	e05a      	b.n	8003bdc <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fd04 	bl	8003536 <get_fat>
 8003b2e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d002      	beq.n	8003b44 <create_chain+0xb0>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <create_chain+0xb4>
			return cs;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	e049      	b.n	8003bdc <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1d8      	bne.n	8003b02 <create_chain+0x6e>
 8003b50:	2300      	movs	r3, #0
 8003b52:	e043      	b.n	8003bdc <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8003b54:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003b56:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8003b5a:	6979      	ldr	r1, [r7, #20]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fde5 	bl	800372c <put_fat>
 8003b62:	4603      	mov	r3, r0
 8003b64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <create_chain+0xec>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fdd8 	bl	800372c <put_fat>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d121      	bne.n	8003bca <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d01c      	beq.n	8003bda <create_chain+0x146>
			fs->free_clust--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bb0:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb8:	795b      	ldrb	r3, [r3, #5]
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc6:	715a      	strb	r2, [r3, #5]
 8003bc8:	e007      	b.n	8003bda <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <create_chain+0x142>
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	e000      	b.n	8003bd8 <create_chain+0x144>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003bda:	697b      	ldr	r3, [r7, #20]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c06:	895b      	ldrh	r3, [r3, #10]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c1c:	7892      	ldrb	r2, [r2, #2]
 8003c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	613a      	str	r2, [r7, #16]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <clmt_clust+0x54>
 8003c34:	2300      	movs	r3, #0
 8003c36:	e010      	b.n	8003c5a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d307      	bcc.n	8003c50 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003c4e:	e7e9      	b.n	8003c24 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8003c50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c78:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d009      	beq.n	8003c9e <dir_sdi+0x3a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d301      	bcc.n	8003ca2 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0aa      	b.n	8003df8 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d110      	bne.n	8003cca <dir_sdi+0x66>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d115      	bne.n	8003cfc <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cdc:	891b      	ldrh	r3, [r3, #8]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d301      	bcc.n	8003cea <dir_sdi+0x86>
			return FR_INT_ERR;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e086      	b.n	8003df8 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e043      	b.n	8003d84 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d08:	895b      	ldrh	r3, [r3, #10]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1c:	789b      	ldrb	r3, [r3, #2]
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003d24:	e021      	b.n	8003d6a <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fc00 	bl	8003536 <get_fat>
 8003d36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d101      	bne.n	8003d44 <dir_sdi+0xe0>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e059      	b.n	8003df8 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d909      	bls.n	8003d5e <dir_sdi+0xfa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d301      	bcc.n	8003d62 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e04a      	b.n	8003df8 <dir_sdi+0x194>
			idx -= ic;
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d2d9      	bcs.n	8003d26 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fbb6 	bl	80034ee <clust2sect>
 8003d82:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <dir_sdi+0x136>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e02e      	b.n	8003df8 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da6:	895b      	ldrh	r3, [r3, #10]
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	fbb3 f2f2 	udiv	r2, r3, r2
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dbe:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd6:	895b      	ldrh	r3, [r3, #10]
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003de4:	fb01 f202 	mul.w	r2, r1, r2
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	015b      	lsls	r3, r3, #5
 8003dec:	4403      	add	r3, r0
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df4:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e10:	88db      	ldrh	r3, [r3, #6]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <dir_next+0x2a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <dir_next+0x2e>
		return FR_NO_FILE;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	e12e      	b.n	800408c <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e3a:	895b      	ldrh	r3, [r3, #10]
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e48:	fb01 f202 	mul.w	r2, r1, r2
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 80fa 	bne.w	8004048 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e64:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e7e:	891b      	ldrh	r3, [r3, #8]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	f0c0 80df 	bcc.w	8004048 <dir_next+0x248>
				return FR_NO_FILE;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e0fe      	b.n	800408c <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	895b      	ldrh	r3, [r3, #10]
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eb4:	7892      	ldrb	r2, [r2, #2]
 8003eb6:	3a01      	subs	r2, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 80c4 	bne.w	8004048 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7ff fb2f 	bl	8003536 <get_fat>
 8003ed8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d801      	bhi.n	8003ee4 <dir_next+0xe4>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0d3      	b.n	800408c <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d101      	bne.n	8003ef0 <dir_next+0xf0>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cd      	b.n	800408c <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f0c0 808e 	bcc.w	8004022 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <dir_next+0x110>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e0bd      	b.n	800408c <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7ff fdb6 	bl	8003a94 <create_chain>
 8003f28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <dir_next+0x134>
 8003f30:	2307      	movs	r3, #7
 8003f32:	e0ab      	b.n	800408c <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <dir_next+0x13e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0a6      	b.n	800408c <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d101      	bne.n	8003f4a <dir_next+0x14a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0a0      	b.n	800408c <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f988 	bl	8003268 <sync_window>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <dir_next+0x162>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e094      	b.n	800408c <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f78:	895b      	ldrh	r3, [r3, #10]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f7fe ff5b 	bl	8002e38 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f90:	681c      	ldr	r4, [r3, #0]
 8003f92:	6979      	ldr	r1, [r7, #20]
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7ff faaa 	bl	80034ee <clust2sect>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8003fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	e021      	b.n	8003fec <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff f951 	bl	8003268 <sync_window>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <dir_next+0x1d0>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e05d      	b.n	800408c <dir_next+0x28c>
						dp->fs->winsect++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8003fdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fde:	3201      	adds	r2, #1
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d3d2      	bcc.n	8003fa8 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800400e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1acb      	subs	r3, r1, r3
 800401c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004028:	461a      	mov	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6979      	ldr	r1, [r7, #20]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fa58 	bl	80034ee <clust2sect>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004046:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004052:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	895b      	ldrh	r3, [r3, #10]
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	fbb3 f1f2 	udiv	r1, r3, r2
 8004078:	fb01 f202 	mul.w	r2, r1, r2
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	015b      	lsls	r3, r3, #5
 8004080:	4403      	add	r3, r0
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004088:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800409e:	2100      	movs	r1, #0
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fddf 	bl	8003c64 <dir_sdi>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d135      	bne.n	800411c <dir_alloc+0x88>
		n = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7ff f920 	bl	800330c <move_window>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d121      	bne.n	800411a <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2be5      	cmp	r3, #229	@ 0xe5
 80040e2:	d006      	beq.n	80040f2 <dir_alloc+0x5e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d102      	bne.n	8004106 <dir_alloc+0x72>
 8004100:	e00c      	b.n	800411c <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004106:	2101      	movs	r1, #1
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe79 	bl	8003e00 <dir_next>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0cd      	beq.n	80040b4 <dir_alloc+0x20>
 8004118:	e000      	b.n	800411c <dir_alloc+0x88>
			if (res != FR_OK) break;
 800411a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d101      	bne.n	8004126 <dir_alloc+0x92>
 8004122:	2307      	movs	r3, #7
 8004124:	73fb      	strb	r3, [r7, #15]
	return res;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	331b      	adds	r3, #27
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	b21a      	sxth	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	331a      	adds	r3, #26
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d10f      	bne.n	8004180 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3315      	adds	r3, #21
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	b21a      	sxth	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b21b      	sxth	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b21b      	sxth	r3, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

	return cl;
 8004180:	68fb      	ldr	r3, [r7, #12]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	331a      	adds	r3, #26
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	331b      	adds	r3, #27
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	0c1a      	lsrs	r2, r3, #16
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3314      	adds	r3, #20
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3315      	adds	r3, #21
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	2301      	movs	r3, #1
 80041fe:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004200:	4a2b      	ldr	r2, [pc, #172]	@ (80042b0 <cmp_lfn+0xd8>)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b21a      	sxth	r2, r3
 8004214:	4926      	ldr	r1, [pc, #152]	@ (80042b0 <cmp_lfn+0xd8>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	440b      	add	r3, r1
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	440b      	add	r3, r1
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b21b      	sxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b21b      	sxth	r3, r3
 800422a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d019      	beq.n	8004266 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004232:	89bb      	ldrh	r3, [r7, #12]
 8004234:	4618      	mov	r0, r3
 8004236:	f002 fc2f 	bl	8006a98 <ff_wtoupper>
 800423a:	4603      	mov	r3, r0
 800423c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2bfe      	cmp	r3, #254	@ 0xfe
 8004242:	d80e      	bhi.n	8004262 <cmp_lfn+0x8a>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	617a      	str	r2, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f002 fc20 	bl	8006a98 <ff_wtoupper>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	4293      	cmp	r3, r2
 8004260:	d008      	beq.n	8004274 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004262:	2300      	movs	r3, #0
 8004264:	e01f      	b.n	80042a6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004266:	89bb      	ldrh	r3, [r7, #12]
 8004268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800426c:	4293      	cmp	r3, r2
 800426e:	d001      	beq.n	8004274 <cmp_lfn+0x9c>
 8004270:	2300      	movs	r3, #0
 8004272:	e018      	b.n	80042a6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3301      	adds	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d9bf      	bls.n	8004200 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <cmp_lfn+0xcc>
 800428c:	89fb      	ldrh	r3, [r7, #14]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <cmp_lfn+0xcc>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <cmp_lfn+0xcc>
		return 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80042a4:	2301      	movs	r3, #1
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	08009e78 	.word	0x08009e78

080042b4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	460b      	mov	r3, r1
 80042c4:	71fb      	strb	r3, [r7, #7]
 80042c6:	4613      	mov	r3, r2
 80042c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	330d      	adds	r3, #13
 80042ce:	79ba      	ldrb	r2, [r7, #6]
 80042d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	330b      	adds	r3, #11
 80042d6:	220f      	movs	r2, #15
 80042d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	330c      	adds	r3, #12
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	331a      	adds	r3, #26
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	331b      	adds	r3, #27
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	1e5a      	subs	r2, r3, #1
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	82fb      	strh	r3, [r7, #22]
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800430a:	8afb      	ldrh	r3, [r7, #22]
 800430c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <fit_lfn+0x70>
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	61fa      	str	r2, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004324:	4a1c      	ldr	r2, [pc, #112]	@ (8004398 <fit_lfn+0xe4>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	8afa      	ldrh	r2, [r7, #22]
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	8afb      	ldrh	r3, [r7, #22]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	b299      	uxth	r1, r3
 800433e:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <fit_lfn+0xe4>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4413      	add	r3, r2
 800434c:	b2ca      	uxtb	r2, r1
 800434e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004350:	8afb      	ldrh	r3, [r7, #22]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <fit_lfn+0xa8>
 8004356:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800435a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	3301      	adds	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d9d0      	bls.n	800430a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800436e:	4293      	cmp	r3, r2
 8004370:	d006      	beq.n	8004380 <fit_lfn+0xcc>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <fit_lfn+0xd4>
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004386:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	79fa      	ldrb	r2, [r7, #7]
 800438c:	701a      	strb	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	3724      	adds	r7, #36	@ 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	08009e78 	.word	0x08009e78

0800439c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80043aa:	220b      	movs	r2, #11
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7fe fd24 	bl	8002dfc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d92b      	bls.n	8004412 <gen_numname+0x76>
		sr = seq;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80043be:	e022      	b.n	8004406 <gen_numname+0x6a>
			wc = *lfn++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ce:	e017      	b.n	8004400 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005a      	lsls	r2, r3, #1
 80043d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80043de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <gen_numname+0x5e>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80043f4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80043f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	3301      	adds	r3, #1
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d9e4      	bls.n	80043d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1d8      	bne.n	80043c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004412:	2307      	movs	r3, #7
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3330      	adds	r3, #48	@ 0x30
 8004422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800442a:	2b39      	cmp	r3, #57	@ 0x39
 800442c:	d904      	bls.n	8004438 <gen_numname+0x9c>
 800442e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004432:	3307      	adds	r3, #7
 8004434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800443e:	3330      	adds	r3, #48	@ 0x30
 8004440:	443b      	add	r3, r7
 8004442:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004446:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1df      	bne.n	8004416 <gen_numname+0x7a>
	ns[i] = '~';
 8004456:	f107 0214 	add.w	r2, r7, #20
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	4413      	add	r3, r2
 800445e:	227e      	movs	r2, #126	@ 0x7e
 8004460:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
 8004466:	e002      	b.n	800446e <gen_numname+0xd2>
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	3301      	adds	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004472:	429a      	cmp	r2, r3
 8004474:	d205      	bcs.n	8004482 <gen_numname+0xe6>
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b20      	cmp	r3, #32
 8004480:	d1f2      	bne.n	8004468 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	2b07      	cmp	r3, #7
 8004486:	d807      	bhi.n	8004498 <gen_numname+0xfc>
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800448e:	3330      	adds	r3, #48	@ 0x30
 8004490:	443b      	add	r3, r7
 8004492:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004496:	e000      	b.n	800449a <gen_numname+0xfe>
 8004498:	2120      	movs	r1, #32
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	627a      	str	r2, [r7, #36]	@ 0x24
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	460a      	mov	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d9e9      	bls.n	8004482 <gen_numname+0xe6>
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	@ 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80044c4:	230b      	movs	r3, #11
 80044c6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	0852      	lsrs	r2, r2, #1
 80044ce:	01db      	lsls	r3, r3, #7
 80044d0:	4313      	orrs	r3, r2
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	6079      	str	r1, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4413      	add	r3, r2
 80044de:	73fb      	strb	r3, [r7, #15]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ed      	bne.n	80044c8 <sum_sfn+0x10>
	return sum;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fbae 	bl	8003c64 <dir_sdi>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <dir_find+0x1e>
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	e0b8      	b.n	8004688 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004516:	23ff      	movs	r3, #255	@ 0xff
 8004518:	753b      	strb	r3, [r7, #20]
 800451a:	7d3b      	ldrb	r3, [r7, #20]
 800451c:	757b      	strb	r3, [r7, #21]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004528:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe fee5 	bl	800330c <move_window>
 8004542:	4603      	mov	r3, r0
 8004544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 8097 	bne.w	800467c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800455e:	7dbb      	ldrb	r3, [r7, #22]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <dir_find+0x72>
 8004564:	2304      	movs	r3, #4
 8004566:	75fb      	strb	r3, [r7, #23]
 8004568:	e08d      	b.n	8004686 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	330b      	adds	r3, #11
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004574:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004576:	7dbb      	ldrb	r3, [r7, #22]
 8004578:	2be5      	cmp	r3, #229	@ 0xe5
 800457a:	d007      	beq.n	800458c <dir_find+0x94>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <dir_find+0xa6>
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d008      	beq.n	800459e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800458c:	23ff      	movs	r3, #255	@ 0xff
 800458e:	757b      	strb	r3, [r7, #21]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800459a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800459c:	e063      	b.n	8004666 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d137      	bne.n	8004614 <dir_find+0x11c>
				if (dp->lfn) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05a      	beq.n	8004666 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80045b0:	7dbb      	ldrb	r3, [r7, #22]
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d010      	beq.n	80045dc <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	7b5b      	ldrb	r3, [r3, #13]
 80045be:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80045c0:	7dbb      	ldrb	r3, [r7, #22]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c6:	75bb      	strb	r3, [r7, #22]
 80045c8:	7dbb      	ldrb	r3, [r7, #22]
 80045ca:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d2:	88da      	ldrh	r2, [r3, #6]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045da:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80045dc:	7dba      	ldrb	r2, [r7, #22]
 80045de:	7d7b      	ldrb	r3, [r7, #21]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d114      	bne.n	800460e <dir_find+0x116>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	330d      	adds	r3, #13
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	7d3a      	ldrb	r2, [r7, #20]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10e      	bne.n	800460e <dir_find+0x116>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	6939      	ldr	r1, [r7, #16]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fdec 	bl	80041d8 <cmp_lfn>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <dir_find+0x116>
 8004606:	7d7b      	ldrb	r3, [r7, #21]
 8004608:	3b01      	subs	r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e000      	b.n	8004610 <dir_find+0x118>
 800460e:	23ff      	movs	r3, #255	@ 0xff
 8004610:	757b      	strb	r3, [r7, #21]
 8004612:	e028      	b.n	8004666 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004614:	7d7b      	ldrb	r3, [r7, #21]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <dir_find+0x132>
 800461a:	6938      	ldr	r0, [r7, #16]
 800461c:	f7ff ff4c 	bl	80044b8 <sum_sfn>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	7d3b      	ldrb	r3, [r7, #20]
 8004626:	4293      	cmp	r3, r2
 8004628:	d02a      	beq.n	8004680 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	330b      	adds	r3, #11
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <dir_find+0x15e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	220b      	movs	r2, #11
 8004648:	4619      	mov	r1, r3
 800464a:	6938      	ldr	r0, [r7, #16]
 800464c:	f7fe fc0e 	bl	8002e6c <mem_cmp>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004656:	23ff      	movs	r3, #255	@ 0xff
 8004658:	757b      	strb	r3, [r7, #21]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004664:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fbc9 	bl	8003e00 <dir_next>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f43f af58 	beq.w	800452a <dir_find+0x32>
 800467a:	e004      	b.n	8004686 <dir_find+0x18e>
		if (res != FR_OK) break;
 800467c:	bf00      	nop
 800467e:	e002      	b.n	8004686 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004684:	bf00      	nop

	return res;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	@ 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	220c      	movs	r2, #12
 80046b2:	6a39      	ldr	r1, [r7, #32]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fba1 	bl	8002dfc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d03b      	beq.n	800473c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	330b      	adds	r3, #11
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	461a      	mov	r2, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80046d8:	2301      	movs	r3, #1
 80046da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046dc:	e013      	b.n	8004706 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80046de:	f107 010c 	add.w	r1, r7, #12
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	6a38      	ldr	r0, [r7, #32]
 80046e8:	f7ff fe58 	bl	800439c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff03 	bl	80044f8 <dir_find>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80046f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	3301      	adds	r3, #1
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	2b63      	cmp	r3, #99	@ 0x63
 800470a:	d9e8      	bls.n	80046de <dir_register+0x4e>
 800470c:	e000      	b.n	8004710 <dir_register+0x80>
			if (res != FR_OK) break;
 800470e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	2b64      	cmp	r3, #100	@ 0x64
 8004714:	d101      	bne.n	800471a <dir_register+0x8a>
 8004716:	2307      	movs	r3, #7
 8004718:	e0d8      	b.n	80048cc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800471a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800471e:	2b04      	cmp	r3, #4
 8004720:	d002      	beq.n	8004728 <dir_register+0x98>
 8004722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004726:	e0d1      	b.n	80048cc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	330b      	adds	r3, #11
 800472c:	7dfa      	ldrb	r2, [r7, #23]
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004736:	461a      	mov	r2, r3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d014      	beq.n	8004770 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004746:	2300      	movs	r3, #0
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800474a:	e002      	b.n	8004752 <dir_register+0xc2>
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	3301      	adds	r3, #1
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f5      	bne.n	800474c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	3319      	adds	r3, #25
 8004764:	4a5b      	ldr	r2, [pc, #364]	@ (80048d4 <dir_register+0x244>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	e001      	b.n	8004774 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004770:	2301      	movs	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fc8c 	bl	8004094 <dir_alloc>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004786:	2b00      	cmp	r3, #0
 8004788:	d15b      	bne.n	8004842 <dir_register+0x1b2>
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	3b01      	subs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d055      	beq.n	8004842 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479c:	88db      	ldrh	r3, [r3, #6]
 800479e:	461a      	mov	r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fa5c 	bl	8003c64 <dir_sdi>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80047b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d143      	bne.n	8004842 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fe78 	bl	80044b8 <sum_sfn>
 80047c8:	4603      	mov	r3, r0
 80047ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fe fd94 	bl	800330c <move_window>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80047ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d126      	bne.n	8004840 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f8:	6a18      	ldr	r0, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004800:	6959      	ldr	r1, [r3, #20]
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	b2da      	uxtb	r2, r3
 8004806:	7efb      	ldrb	r3, [r7, #27]
 8004808:	f7ff fd54 	bl	80042b4 <fit_lfn>
				dp->fs->wflag = 1;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004818:	2201      	movs	r2, #1
 800481a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800481c:	2100      	movs	r1, #0
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff faee 	bl	8003e00 <dir_next>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800482a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <dir_register+0x1b2>
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	3b01      	subs	r3, #1
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1c6      	bne.n	80047cc <dir_register+0x13c>
 800483e:	e000      	b.n	8004842 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004840:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004846:	2b00      	cmp	r3, #0
 8004848:	d13e      	bne.n	80048c8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe fd55 	bl	800330c <move_window>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800486c:	2b00      	cmp	r3, #0
 800486e:	d12b      	bne.n	80048c8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2220      	movs	r2, #32
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fadb 	bl	8002e38 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004888:	6958      	ldr	r0, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	220b      	movs	r2, #11
 8004894:	4619      	mov	r1, r3
 8004896:	f7fe fab1 	bl	8002dfc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	330b      	adds	r3, #11
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	330c      	adds	r3, #12
 80048b0:	f002 0218 	and.w	r2, r2, #24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c4:	2201      	movs	r2, #1
 80048c6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80048c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3730      	adds	r7, #48	@ 0x30
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	4ec4ec4f 	.word	0x4ec4ec4f

080048d8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	@ 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e002      	b.n	80048f0 <create_name+0x18>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3301      	adds	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80048f6:	d0f8      	beq.n	80048ea <create_name+0x12>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80048fe:	d0f4      	beq.n	80048ea <create_name+0x12>
	lfn = dp->lfn;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	61ba      	str	r2, [r7, #24]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004922:	2b1f      	cmp	r3, #31
 8004924:	d92f      	bls.n	8004986 <create_name+0xae>
 8004926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004928:	2b2f      	cmp	r3, #47	@ 0x2f
 800492a:	d02c      	beq.n	8004986 <create_name+0xae>
 800492c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800492e:	2b5c      	cmp	r3, #92	@ 0x5c
 8004930:	d029      	beq.n	8004986 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2bfe      	cmp	r3, #254	@ 0xfe
 8004936:	d901      	bls.n	800493c <create_name+0x64>
			return FR_INVALID_NAME;
 8004938:	2306      	movs	r3, #6
 800493a:	e186      	b.n	8004c4a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800493c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800493e:	b2db      	uxtb	r3, r3
 8004940:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f002 f86c 	bl	8006a24 <ff_convert>
 800494c:	4603      	mov	r3, r0
 800494e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <create_name+0x82>
 8004956:	2306      	movs	r3, #6
 8004958:	e177      	b.n	8004c4a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800495a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800495c:	2b7f      	cmp	r3, #127	@ 0x7f
 800495e:	d809      	bhi.n	8004974 <create_name+0x9c>
 8004960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004962:	4619      	mov	r1, r3
 8004964:	488e      	ldr	r0, [pc, #568]	@ (8004ba0 <create_name+0x2c8>)
 8004966:	f7fe faa7 	bl	8002eb8 <chk_chr>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004970:	2306      	movs	r3, #6
 8004972:	e16a      	b.n	8004c4a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	617a      	str	r2, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004982:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004984:	e7c5      	b.n	8004912 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	441a      	add	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004990:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004992:	2b1f      	cmp	r3, #31
 8004994:	d801      	bhi.n	800499a <create_name+0xc2>
 8004996:	2304      	movs	r3, #4
 8004998:	e000      	b.n	800499c <create_name+0xc4>
 800499a:	2300      	movs	r3, #0
 800499c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80049a0:	e011      	b.n	80049c6 <create_name+0xee>
		w = lfn[di - 1];
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80049a8:	3b01      	subs	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80049b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d002      	beq.n	80049c0 <create_name+0xe8>
 80049ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80049be:	d106      	bne.n	80049ce <create_name+0xf6>
		di--;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ea      	bne.n	80049a2 <create_name+0xca>
 80049cc:	e000      	b.n	80049d0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80049ce:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <create_name+0x102>
 80049d6:	2306      	movs	r3, #6
 80049d8:	e137      	b.n	8004c4a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	220b      	movs	r2, #11
 80049f0:	2120      	movs	r1, #32
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fa20 	bl	8002e38 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e002      	b.n	8004a04 <create_name+0x12c>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3301      	adds	r3, #1
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d0f5      	beq.n	80049fe <create_name+0x126>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a1e:	d0ee      	beq.n	80049fe <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <create_name+0x162>
 8004a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a2a:	f043 0303 	orr.w	r3, r3, #3
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004a32:	e002      	b.n	8004a3a <create_name+0x162>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <create_name+0x17c>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004a46:	3b01      	subs	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a52:	d1ef      	bne.n	8004a34 <create_name+0x15c>

	b = i = 0; ni = 8;
 8004a54:	2300      	movs	r3, #0
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004a5e:	2308      	movs	r3, #8
 8004a60:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	61ba      	str	r2, [r7, #24]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004a72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8091 	beq.w	8004b9c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d006      	beq.n	8004a8e <create_name+0x1b6>
 8004a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a84:	d10a      	bne.n	8004a9c <create_name+0x1c4>
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d006      	beq.n	8004a9c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8004a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a92:	f043 0303 	orr.w	r3, r3, #3
 8004a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a9a:	e07e      	b.n	8004b9a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d203      	bcs.n	8004aac <create_name+0x1d4>
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d123      	bne.n	8004af4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b0b      	cmp	r3, #11
 8004ab0:	d106      	bne.n	8004ac0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8004ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ab6:	f043 0303 	orr.w	r3, r3, #3
 8004aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004abe:	e076      	b.n	8004bae <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d005      	beq.n	8004ad4 <create_name+0x1fc>
 8004ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004acc:	f043 0303 	orr.w	r3, r3, #3
 8004ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d867      	bhi.n	8004bac <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	230b      	movs	r3, #11
 8004ae6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004af2:	e052      	b.n	8004b9a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004af8:	d914      	bls.n	8004b24 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004afa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 ff90 	bl	8006a24 <ff_convert>
 8004b04:	4603      	mov	r3, r0
 8004b06:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004b08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <create_name+0x240>
 8004b0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b10:	3b80      	subs	r3, #128	@ 0x80
 8004b12:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <create_name+0x2cc>)
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
 8004b16:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004b24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <create_name+0x262>
 8004b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	481e      	ldr	r0, [pc, #120]	@ (8004ba8 <create_name+0x2d0>)
 8004b30:	f7fe f9c2 	bl	8002eb8 <chk_chr>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004b3a:	235f      	movs	r3, #95	@ 0x5f
 8004b3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b42:	f043 0303 	orr.w	r3, r3, #3
 8004b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b4a:	e01b      	b.n	8004b84 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b4e:	2b40      	cmp	r3, #64	@ 0x40
 8004b50:	d909      	bls.n	8004b66 <create_name+0x28e>
 8004b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b54:	2b5a      	cmp	r3, #90	@ 0x5a
 8004b56:	d806      	bhi.n	8004b66 <create_name+0x28e>
					b |= 2;
 8004b58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b5c:	f043 0302 	orr.w	r3, r3, #2
 8004b60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b64:	e00e      	b.n	8004b84 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b68:	2b60      	cmp	r3, #96	@ 0x60
 8004b6a:	d90b      	bls.n	8004b84 <create_name+0x2ac>
 8004b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b6e:	2b7a      	cmp	r3, #122	@ 0x7a
 8004b70:	d808      	bhi.n	8004b84 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8004b72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b80:	3b20      	subs	r3, #32
 8004b82:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	6239      	str	r1, [r7, #32]
 8004b92:	4413      	add	r3, r2
 8004b94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004b9a:	e762      	b.n	8004a62 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8004b9c:	bf00      	nop
 8004b9e:	e006      	b.n	8004bae <create_name+0x2d6>
 8004ba0:	08009d80 	.word	0x08009d80
 8004ba4:	08009df8 	.word	0x08009df8
 8004ba8:	08009d8c 	.word	0x08009d8c
			if (si > di) break;			/* No extension */
 8004bac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2be5      	cmp	r3, #229	@ 0xe5
 8004bba:	d105      	bne.n	8004bc8 <create_name+0x2f0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d104      	bne.n	8004bd8 <create_name+0x300>
 8004bce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d005      	beq.n	8004bf0 <create_name+0x318>
 8004be4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d105      	bne.n	8004bfc <create_name+0x324>
		cf |= NS_LFN;
 8004bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d117      	bne.n	8004c38 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004c08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <create_name+0x348>
 8004c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c18:	f043 0310 	orr.w	r3, r3, #16
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004c20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d105      	bne.n	8004c38 <create_name+0x360>
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c30:	f043 0308 	orr.w	r3, r3, #8
 8004c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	330b      	adds	r3, #11
 8004c42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004c46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c48:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	@ 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b2f      	cmp	r3, #47	@ 0x2f
 8004c64:	d003      	beq.n	8004c6e <follow_path+0x1a>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b5c      	cmp	r3, #92	@ 0x5c
 8004c6c:	d102      	bne.n	8004c74 <follow_path+0x20>
		path++;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b1f      	cmp	r3, #31
 8004c86:	d80c      	bhi.n	8004ca2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004c88:	2100      	movs	r1, #0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe ffea 	bl	8003c64 <dir_sdi>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6153      	str	r3, [r2, #20]
 8004ca0:	e049      	b.n	8004d36 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fe16 	bl	80048d8 <create_name>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13a      	bne.n	8004d2c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fc1e 	bl	80044f8 <dir_find>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	7adb      	ldrb	r3, [r3, #11]
 8004cca:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d12b      	bne.n	8004d30 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004cd8:	7bbb      	ldrb	r3, [r7, #14]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d126      	bne.n	8004d30 <follow_path+0xdc>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004ce6:	e023      	b.n	8004d30 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ce8:	7bbb      	ldrb	r3, [r7, #14]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d120      	bne.n	8004d34 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	330b      	adds	r3, #11
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	e012      	b.n	8004d36 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fa08 	bl	8004130 <ld_clust>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d28:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d2a:	e7ba      	b.n	8004ca2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <follow_path+0xe2>
				break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d34:	bf00      	nop
		}
	}

	return res;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d031      	beq.n	8004dba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e002      	b.n	8004d64 <get_ldnumber+0x24>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	3301      	adds	r3, #1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b1f      	cmp	r3, #31
 8004d6a:	d903      	bls.n	8004d74 <get_ldnumber+0x34>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d72:	d1f4      	bne.n	8004d5e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d7a:	d11c      	bne.n	8004db6 <get_ldnumber+0x76>
			tp = *path;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	60fa      	str	r2, [r7, #12]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	3b30      	subs	r3, #48	@ 0x30
 8004d8c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d80e      	bhi.n	8004db2 <get_ldnumber+0x72>
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d10a      	bne.n	8004db2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <get_ldnumber+0x72>
					vol = (int)i;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	e002      	b.n	8004dbc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004dba:	693b      	ldr	r3, [r7, #16]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
	...

08004dc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2200      	movs	r2, #0
 8004dda:	711a      	strb	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fe fa8d 	bl	800330c <move_window>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <check_fs+0x34>
		return 3;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e04a      	b.n	8004e92 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004e02:	3301      	adds	r3, #1
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	b21a      	sxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8004e10:	b21b      	sxth	r3, r3
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <check_fs+0xd4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d001      	beq.n	8004e20 <check_fs+0x58>
		return 2;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e038      	b.n	8004e92 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3336      	adds	r3, #54	@ 0x36
 8004e24:	3303      	adds	r3, #3
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	061a      	lsls	r2, r3, #24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3336      	adds	r3, #54	@ 0x36
 8004e2e:	3302      	adds	r3, #2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3336      	adds	r3, #54	@ 0x36
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	4313      	orrs	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <check_fs+0xd8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <check_fs+0x90>
		return 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e01c      	b.n	8004e92 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3352      	adds	r3, #82	@ 0x52
 8004e5c:	3303      	adds	r3, #3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	061a      	lsls	r2, r3, #24
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3352      	adds	r3, #82	@ 0x52
 8004e66:	3302      	adds	r3, #2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3352      	adds	r3, #82	@ 0x52
 8004e72:	3301      	adds	r3, #1
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e86:	4a06      	ldr	r2, [pc, #24]	@ (8004ea0 <check_fs+0xd8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <check_fs+0xc8>
		return 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <check_fs+0xca>

	return 1;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	ffffaa55 	.word	0xffffaa55
 8004ea0:	00544146 	.word	0x00544146

08004ea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b096      	sub	sp, #88	@ 0x58
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f7ff ff41 	bl	8004d40 <get_ldnumber>
 8004ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da01      	bge.n	8004eca <find_volume+0x26>
 8004ec6:	230b      	movs	r3, #11
 8004ec8:	e311      	b.n	80054ee <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004eca:	4a98      	ldr	r2, [pc, #608]	@ (800512c <find_volume+0x288>)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <find_volume+0x3a>
 8004eda:	230c      	movs	r3, #12
 8004edc:	e307      	b.n	80054ee <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ee2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01c      	beq.n	8004f2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd fee1 	bl	8002cc0 <disk_status>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <find_volume+0x82>
 8004f16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004f22:	230a      	movs	r3, #10
 8004f24:	e2e3      	b.n	80054ee <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8004f26:	2300      	movs	r3, #0
 8004f28:	e2e1      	b.n	80054ee <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fd fed3 	bl	8002cf4 <disk_initialize>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004f54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f60:	2303      	movs	r3, #3
 8004f62:	e2c4      	b.n	80054ee <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <find_volume+0xd6>
 8004f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8004f76:	230a      	movs	r3, #10
 8004f78:	e2b9      	b.n	80054ee <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f80:	7858      	ldrb	r0, [r3, #1]
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f88:	330a      	adds	r3, #10
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	f7fd ff17 	bl	8002dc0 <disk_ioctl>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9e:	895b      	ldrh	r3, [r3, #10]
 8004fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa4:	d306      	bcc.n	8004fb4 <find_volume+0x110>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fac:	895b      	ldrh	r3, [r3, #10]
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb2:	d901      	bls.n	8004fb8 <find_volume+0x114>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e29a      	b.n	80054ee <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004fbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fc0:	f7ff ff02 	bl	8004dc8 <check_fs>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004fca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d153      	bne.n	800507a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fd6:	e028      	b.n	800502a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004fe2:	4413      	add	r3, r2
 8004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	3304      	adds	r3, #4
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d012      	beq.n	8005016 <find_volume+0x172>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	330b      	adds	r3, #11
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	061a      	lsls	r2, r3, #24
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	330a      	adds	r3, #10
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	431a      	orrs	r2, r3
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	3309      	adds	r3, #9
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	4313      	orrs	r3, r2
 800500c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500e:	3208      	adds	r2, #8
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	431a      	orrs	r2, r3
 8005014:	e000      	b.n	8005018 <find_volume+0x174>
 8005016:	2200      	movs	r2, #0
 8005018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3358      	adds	r3, #88	@ 0x58
 800501e:	443b      	add	r3, r7
 8005020:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005026:	3301      	adds	r3, #1
 8005028:	643b      	str	r3, [r7, #64]	@ 0x40
 800502a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502c:	2b03      	cmp	r3, #3
 800502e:	d9d3      	bls.n	8004fd8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005030:	2300      	movs	r3, #0
 8005032:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <find_volume+0x19c>
 800503a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800503c:	3b01      	subs	r3, #1
 800503e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3358      	adds	r3, #88	@ 0x58
 8005046:	443b      	add	r3, r7
 8005048:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800504c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <find_volume+0x1bc>
 8005054:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005056:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005058:	f7ff feb6 	bl	8004dc8 <check_fs>
 800505c:	4603      	mov	r3, r0
 800505e:	e000      	b.n	8005062 <find_volume+0x1be>
 8005060:	2302      	movs	r3, #2
 8005062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <find_volume+0x1d6>
 800506e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005070:	3301      	adds	r3, #1
 8005072:	643b      	str	r3, [r7, #64]	@ 0x40
 8005074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005076:	2b03      	cmp	r3, #3
 8005078:	d9e2      	bls.n	8005040 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800507a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800507e:	2b03      	cmp	r3, #3
 8005080:	d101      	bne.n	8005086 <find_volume+0x1e2>
 8005082:	2301      	movs	r3, #1
 8005084:	e233      	b.n	80054ee <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005086:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <find_volume+0x1ee>
 800508e:	230d      	movs	r3, #13
 8005090:	e22d      	b.n	80054ee <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	7b1b      	ldrb	r3, [r3, #12]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	b21a      	sxth	r2, r3
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	7adb      	ldrb	r3, [r3, #11]
 800509e:	b21b      	sxth	r3, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b21a      	sxth	r2, r3
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050aa:	895b      	ldrh	r3, [r3, #10]
 80050ac:	b21b      	sxth	r3, r3
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d001      	beq.n	80050b6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80050b2:	230d      	movs	r3, #13
 80050b4:	e21b      	b.n	80054ee <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	7ddb      	ldrb	r3, [r3, #23]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	b21a      	sxth	r2, r3
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	7d9b      	ldrb	r3, [r3, #22]
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	4313      	orrs	r3, r2
 80050c6:	b21b      	sxth	r3, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80050cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d112      	bne.n	80050f8 <find_volume+0x254>
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80050d8:	061a      	lsls	r2, r3, #24
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4313      	orrs	r3, r2
 80050ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050f0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80050f4:	4313      	orrs	r3, r2
 80050f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050fe:	461a      	mov	r2, r3
 8005100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005102:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	7c1a      	ldrb	r2, [r3, #16]
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800510e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d009      	beq.n	8005130 <find_volume+0x28c>
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d003      	beq.n	8005130 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8005128:	230d      	movs	r3, #13
 800512a:	e1e0      	b.n	80054ee <find_volume+0x64a>
 800512c:	200011a8 	.word	0x200011a8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	461a      	mov	r2, r3
 800513a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	7b5a      	ldrb	r2, [r3, #13]
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800514c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005154:	789b      	ldrb	r3, [r3, #2]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <find_volume+0x2d0>
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005160:	789b      	ldrb	r3, [r3, #2]
 8005162:	461a      	mov	r2, r3
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	3b01      	subs	r3, #1
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8005174:	230d      	movs	r3, #13
 8005176:	e1ba      	b.n	80054ee <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	7c9b      	ldrb	r3, [r3, #18]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	b21a      	sxth	r2, r3
 8005180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005182:	7c5b      	ldrb	r3, [r3, #17]
 8005184:	b21b      	sxth	r3, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	b21b      	sxth	r3, r3
 800518a:	b29a      	uxth	r2, r3
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005192:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800519a:	891b      	ldrh	r3, [r3, #8]
 800519c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800519e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051a2:	8952      	ldrh	r2, [r2, #10]
 80051a4:	0952      	lsrs	r2, r2, #5
 80051a6:	b292      	uxth	r2, r2
 80051a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ac:	fb01 f202 	mul.w	r2, r1, r2
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80051b8:	230d      	movs	r3, #13
 80051ba:	e198      	b.n	80054ee <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80051bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051be:	7d1b      	ldrb	r3, [r3, #20]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	b21a      	sxth	r2, r3
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	7cdb      	ldrb	r3, [r3, #19]
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80051d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d112      	bne.n	80051fe <find_volume+0x35a>
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80051de:	061a      	lsls	r2, r3, #24
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	431a      	orrs	r2, r3
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	4313      	orrs	r3, r2
 80051f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	7bdb      	ldrb	r3, [r3, #15]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	b21a      	sxth	r2, r3
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	7b9b      	ldrb	r3, [r3, #14]
 800520a:	b21b      	sxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b21b      	sxth	r3, r3
 8005210:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005212:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <find_volume+0x378>
 8005218:	230d      	movs	r3, #13
 800521a:	e168      	b.n	80054ee <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800521c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800521e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005220:	4413      	add	r3, r2
 8005222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005224:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005228:	8911      	ldrh	r1, [r2, #8]
 800522a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800522c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005230:	8952      	ldrh	r2, [r2, #10]
 8005232:	0952      	lsrs	r2, r2, #5
 8005234:	b292      	uxth	r2, r2
 8005236:	fbb1 f2f2 	udiv	r2, r1, r2
 800523a:	b292      	uxth	r2, r2
 800523c:	4413      	add	r3, r2
 800523e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	429a      	cmp	r2, r3
 8005246:	d201      	bcs.n	800524c <find_volume+0x3a8>
 8005248:	230d      	movs	r3, #13
 800524a:	e150      	b.n	80054ee <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800524c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005254:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005258:	7892      	ldrb	r2, [r2, #2]
 800525a:	fbb3 f3f2 	udiv	r3, r3, r2
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <find_volume+0x3c6>
 8005266:	230d      	movs	r3, #13
 8005268:	e141      	b.n	80054ee <find_volume+0x64a>
	fmt = FS_FAT12;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005276:	4293      	cmp	r3, r2
 8005278:	d902      	bls.n	8005280 <find_volume+0x3dc>
 800527a:	2302      	movs	r3, #2
 800527c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005286:	4293      	cmp	r3, r2
 8005288:	d902      	bls.n	8005290 <find_volume+0x3ec>
 800528a:	2303      	movs	r3, #3
 800528c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	3302      	adds	r3, #2
 8005294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800529a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a2:	461a      	mov	r2, r3
 80052a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80052a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80052aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ac:	4413      	add	r3, r2
 80052ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052b4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80052b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	4413      	add	r3, r2
 80052bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052c2:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 80052c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d124      	bne.n	8005316 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80052cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d2:	891b      	ldrh	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <find_volume+0x438>
 80052d8:	230d      	movs	r3, #13
 80052da:	e108      	b.n	80054ee <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80052e2:	061a      	lsls	r2, r3, #24
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	431a      	orrs	r2, r3
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	4313      	orrs	r3, r2
 80052f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052fa:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80052fe:	4313      	orrs	r3, r2
 8005300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005306:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	647b      	str	r3, [r7, #68]	@ 0x44
 8005314:	e02b      	b.n	800536e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800531c:	891b      	ldrh	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <find_volume+0x482>
 8005322:	230d      	movs	r3, #13
 8005324:	e0e3      	b.n	80054ee <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005330:	4413      	add	r3, r2
 8005332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005338:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800533a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800533e:	2b02      	cmp	r3, #2
 8005340:	d105      	bne.n	800534e <find_volume+0x4aa>
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	e00e      	b.n	800536c <find_volume+0x4c8>
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	4613      	mov	r3, r2
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4413      	add	r3, r2
 800535c:	085a      	lsrs	r2, r3, #1
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800536c:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800537c:	895b      	ldrh	r3, [r3, #10]
 800537e:	4619      	mov	r1, r3
 8005380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005382:	440b      	add	r3, r1
 8005384:	3b01      	subs	r3, #1
 8005386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005388:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800538c:	8949      	ldrh	r1, [r1, #10]
 800538e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005392:	429a      	cmp	r2, r3
 8005394:	d201      	bcs.n	800539a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8005396:	230d      	movs	r3, #13
 8005398:	e0a9      	b.n	80054ee <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a0:	461a      	mov	r2, r3
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	6113      	str	r3, [r2, #16]
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053b6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80053c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d17a      	bne.n	80054c0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21a      	sxth	r2, r3
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053da:	b21b      	sxth	r3, r3
 80053dc:	4313      	orrs	r3, r2
 80053de:	b21b      	sxth	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d16d      	bne.n	80054c0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80053e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e6:	3301      	adds	r3, #1
 80053e8:	4619      	mov	r1, r3
 80053ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053ec:	f7fd ff8e 	bl	800330c <move_window>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d164      	bne.n	80054c0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fc:	2200      	movs	r2, #0
 80053fe:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005402:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	b21a      	sxth	r2, r3
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005410:	b21b      	sxth	r3, r3
 8005412:	4313      	orrs	r3, r2
 8005414:	b21b      	sxth	r3, r3
 8005416:	4a38      	ldr	r2, [pc, #224]	@ (80054f8 <find_volume+0x654>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d151      	bne.n	80054c0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	061a      	lsls	r2, r3, #24
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	789b      	ldrb	r3, [r3, #2]
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	4313      	orrs	r3, r2
 8005432:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	4a30      	ldr	r2, [pc, #192]	@ (80054fc <find_volume+0x658>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d140      	bne.n	80054c0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005444:	061a      	lsls	r2, r3, #24
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	4313      	orrs	r3, r2
 800545a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800545c:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005460:	4313      	orrs	r3, r2
 8005462:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <find_volume+0x65c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d12b      	bne.n	80054c0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800546e:	061a      	lsls	r2, r3, #24
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	4313      	orrs	r3, r2
 8005484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005486:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800548a:	4313      	orrs	r3, r2
 800548c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800548e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005492:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800549a:	061a      	lsls	r2, r3, #24
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	431a      	orrs	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4313      	orrs	r3, r2
 80054b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b2:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80054b6:	4313      	orrs	r3, r2
 80054b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054be:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c6:	461a      	mov	r2, r3
 80054c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054cc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <find_volume+0x660>)
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <find_volume+0x660>)
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <find_volume+0x660>)
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80054e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80054e8:	f7fd fe94 	bl	8003214 <clear_lock>
#endif

	return FR_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3758      	adds	r7, #88	@ 0x58
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	ffffaa55 	.word	0xffffaa55
 80054fc:	41615252 	.word	0x41615252
 8005500:	61417272 	.word	0x61417272
 8005504:	200011ac 	.word	0x200011ac

08005508 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d02a      	beq.n	8005570 <validate+0x68>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d024      	beq.n	8005570 <validate+0x68>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <validate+0x68>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005544:	88da      	ldrh	r2, [r3, #6]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800554c:	889b      	ldrh	r3, [r3, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d10e      	bne.n	8005570 <validate+0x68>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fbad 	bl	8002cc0 <disk_status>
 8005566:	4603      	mov	r3, r0
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005570:	2309      	movs	r3, #9
 8005572:	e000      	b.n	8005576 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005592:	f107 0310 	add.w	r3, r7, #16
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fbd2 	bl	8004d40 <get_ldnumber>
 800559c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da01      	bge.n	80055a8 <f_mount+0x28>
 80055a4:	230b      	movs	r3, #11
 80055a6:	e02f      	b.n	8005608 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80055a8:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <f_mount+0x90>)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80055b8:	69b8      	ldr	r0, [r7, #24]
 80055ba:	f7fd fe2b 	bl	8003214 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	490d      	ldr	r1, [pc, #52]	@ (8005610 <f_mount+0x90>)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <f_mount+0x6e>
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d001      	beq.n	80055f2 <f_mount+0x72>
 80055ee:	2300      	movs	r3, #0
 80055f0:	e00a      	b.n	8005608 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80055f2:	f107 0108 	add.w	r1, r7, #8
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	2200      	movs	r2, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fc51 	bl	8004ea4 <find_volume>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200011a8 	.word	0x200011a8

08005614 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005622:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005626:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800562a:	f843 1c50 	str.w	r1, [r3, #-80]
 800562e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005632:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005636:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800563a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <f_open+0x32>
 8005642:	2309      	movs	r3, #9
 8005644:	e2f3      	b.n	8005c2e <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8005646:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800564a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800564e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005652:	461a      	mov	r2, r3
 8005654:	2300      	movs	r3, #0
 8005656:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005658:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800565c:	461a      	mov	r2, r3
 800565e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005662:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800566e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005672:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	f107 0118 	add.w	r1, r7, #24
 8005680:	3910      	subs	r1, #16
 8005682:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005686:	3b18      	subs	r3, #24
 8005688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fc09 	bl	8004ea4 <find_volume>
 8005692:	4603      	mov	r3, r0
 8005694:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005698:	f102 0217 	add.w	r2, r2, #23
 800569c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800569e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80056a2:	f103 0317 	add.w	r3, r3, #23
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 82bb 	bne.w	8005c24 <f_open+0x610>
		INIT_BUF(dj);
 80056ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056b2:	461a      	mov	r2, r3
 80056b4:	f107 0318 	add.w	r3, r7, #24
 80056b8:	3b04      	subs	r3, #4
 80056ba:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80056be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056c2:	461a      	mov	r2, r3
 80056c4:	4bd3      	ldr	r3, [pc, #844]	@ (8005a14 <f_open+0x400>)
 80056c6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80056ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056ce:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80056d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80056d6:	3b18      	subs	r3, #24
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff faba 	bl	8004c54 <follow_path>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80056e6:	f102 0217 	add.w	r2, r2, #23
 80056ea:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80056ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056f0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80056f4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80056f8:	f102 0210 	add.w	r2, r2, #16
 80056fc:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80056fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005702:	f103 0317 	add.w	r3, r3, #23
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d124      	bne.n	8005756 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 800570c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005710:	f103 0310 	add.w	r3, r3, #16
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <f_open+0x114>
				res = FR_INVALID_NAME;
 800571a:	2306      	movs	r3, #6
 800571c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005720:	f102 0217 	add.w	r2, r2, #23
 8005724:	7013      	strb	r3, [r2, #0]
 8005726:	e016      	b.n	8005756 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005728:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800572c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf8c      	ite	hi
 8005734:	2301      	movhi	r3, #1
 8005736:	2300      	movls	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005740:	3b18      	subs	r3, #24
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd fbd1 	bl	8002eec <chk_lock>
 800574a:	4603      	mov	r3, r0
 800574c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005750:	f102 0217 	add.w	r2, r2, #23
 8005754:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005756:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800575a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800575e:	f003 031c 	and.w	r3, r3, #28
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 813c 	beq.w	80059e0 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8005768:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800576c:	f103 0317 	add.w	r3, r3, #23
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02e      	beq.n	80057d4 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005776:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800577a:	f103 0317 	add.w	r3, r3, #23
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d112      	bne.n	80057aa <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005784:	f7fd fc22 	bl	8002fcc <enq_lock>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <f_open+0x18a>
 800578e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005792:	3b18      	subs	r3, #24
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe ff7b 	bl	8004690 <dir_register>
 800579a:	4603      	mov	r3, r0
 800579c:	e000      	b.n	80057a0 <f_open+0x18c>
 800579e:	2312      	movs	r3, #18
 80057a0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80057a4:	f102 0217 	add.w	r2, r2, #23
 80057a8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80057aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057ae:	461a      	mov	r2, r3
 80057b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057b4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80057c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057c4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80057c8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80057cc:	f102 0210 	add.w	r2, r2, #16
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e01f      	b.n	8005814 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80057d4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80057d8:	f103 0310 	add.w	r3, r3, #16
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330b      	adds	r3, #11
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f003 0311 	and.w	r3, r3, #17
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <f_open+0x1e4>
					res = FR_DENIED;
 80057ea:	2307      	movs	r3, #7
 80057ec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80057f0:	f102 0217 	add.w	r2, r2, #23
 80057f4:	7013      	strb	r3, [r2, #0]
 80057f6:	e00d      	b.n	8005814 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80057f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <f_open+0x200>
						res = FR_EXIST;
 8005808:	2308      	movs	r3, #8
 800580a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800580e:	f102 0217 	add.w	r2, r2, #23
 8005812:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005814:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005818:	f103 0317 	add.w	r3, r3, #23
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f040 8113 	bne.w	8005a4a <f_open+0x436>
 8005824:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005828:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 810a 	beq.w	8005a4a <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8005836:	f7fd f9e1 	bl	8002bfc <get_fattime>
 800583a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800583e:	f103 030c 	add.w	r3, r3, #12
 8005842:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005844:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005848:	f103 0310 	add.w	r3, r3, #16
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330e      	adds	r3, #14
 8005850:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005854:	f102 020c 	add.w	r2, r2, #12
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005862:	f103 030c 	add.w	r3, r3, #12
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	b29a      	uxth	r2, r3
 800586e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005872:	f103 0310 	add.w	r3, r3, #16
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330f      	adds	r3, #15
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005882:	f103 030c 	add.w	r3, r3, #12
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	0c1a      	lsrs	r2, r3, #16
 800588a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800588e:	f103 0310 	add.w	r3, r3, #16
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3310      	adds	r3, #16
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800589e:	f103 030c 	add.w	r3, r3, #12
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	0e1a      	lsrs	r2, r3, #24
 80058a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058aa:	f103 0310 	add.w	r3, r3, #16
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3311      	adds	r3, #17
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80058b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058ba:	f103 0310 	add.w	r3, r3, #16
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330b      	adds	r3, #11
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80058c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058ca:	f103 0310 	add.w	r3, r3, #16
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	331c      	adds	r3, #28
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058da:	f103 0310 	add.w	r3, r3, #16
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	331d      	adds	r3, #29
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058ea:	f103 0310 	add.w	r3, r3, #16
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	331e      	adds	r3, #30
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058fa:	f103 0310 	add.w	r3, r3, #16
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	331f      	adds	r3, #31
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005906:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800590a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800590e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005912:	f102 0210 	add.w	r2, r2, #16
 8005916:	6811      	ldr	r1, [r2, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fc09 	bl	8004130 <ld_clust>
 800591e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005922:	f103 0308 	add.w	r3, r3, #8
 8005926:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005928:	2100      	movs	r1, #0
 800592a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800592e:	f103 0310 	add.w	r3, r3, #16
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	f7fe fc2a 	bl	800418c <st_clust>
				dj.fs->wflag = 1;
 8005938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800593c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005944:	2201      	movs	r2, #1
 8005946:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005948:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800594c:	f103 0308 	add.w	r3, r3, #8
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d079      	beq.n	8005a4a <f_open+0x436>
					dw = dj.fs->winsect;
 8005956:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800595a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800595e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005968:	f102 020c 	add.w	r2, r2, #12
 800596c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800596e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005972:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005976:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800597a:	f102 0208 	add.w	r2, r2, #8
 800597e:	6811      	ldr	r1, [r2, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe f826 	bl	80039d2 <remove_chain>
 8005986:	4603      	mov	r3, r0
 8005988:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800598c:	f102 0217 	add.w	r2, r2, #23
 8005990:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005992:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005996:	f103 0317 	add.w	r3, r3, #23
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d154      	bne.n	8005a4a <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80059a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80059a4:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80059a8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80059ac:	f103 0308 	add.w	r3, r3, #8
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059b8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80059ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80059be:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80059c2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80059c6:	f102 020c 	add.w	r2, r2, #12
 80059ca:	6811      	ldr	r1, [r2, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fd fc9d 	bl	800330c <move_window>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80059d8:	f102 0217 	add.w	r2, r2, #23
 80059dc:	7013      	strb	r3, [r2, #0]
 80059de:	e034      	b.n	8005a4a <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80059e0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80059e4:	f103 0317 	add.w	r3, r3, #23
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d12d      	bne.n	8005a4a <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80059ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80059f2:	f103 0310 	add.w	r3, r3, #16
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330b      	adds	r3, #11
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d009      	beq.n	8005a18 <f_open+0x404>
					res = FR_NO_FILE;
 8005a04:	2304      	movs	r3, #4
 8005a06:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005a0a:	f102 0217 	add.w	r2, r2, #23
 8005a0e:	7013      	strb	r3, [r2, #0]
 8005a10:	e01b      	b.n	8005a4a <f_open+0x436>
 8005a12:	bf00      	nop
 8005a14:	200011c8 	.word	0x200011c8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005a18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a1c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <f_open+0x436>
 8005a28:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005a2c:	f103 0310 	add.w	r3, r3, #16
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330b      	adds	r3, #11
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <f_open+0x436>
						res = FR_DENIED;
 8005a3e:	2307      	movs	r3, #7
 8005a40:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005a44:	f102 0217 	add.w	r2, r2, #23
 8005a48:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8005a4a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005a4e:	f103 0317 	add.w	r3, r3, #23
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d155      	bne.n	8005b04 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005a58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a5c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <f_open+0x46a>
				mode |= FA__WRITTEN;
 8005a68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a72:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005a76:	f043 0320 	orr.w	r3, r3, #32
 8005a7a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005a7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a82:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005a90:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005a94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a98:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8005a9a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005a9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005aac:	f103 0310 	add.w	r3, r3, #16
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ab4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ab8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	bf8c      	ite	hi
 8005ac0:	2301      	movhi	r3, #1
 8005ac2:	2300      	movls	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005acc:	3b18      	subs	r3, #24
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fd fa9f 	bl	8003014 <inc_lock>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005adc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8005ae6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005aea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <f_open+0x4f0>
 8005af8:	2302      	movs	r3, #2
 8005afa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005afe:	f102 0217 	add.w	r2, r2, #23
 8005b02:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005b04:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005b08:	f103 0317 	add.w	r3, r3, #23
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 8088 	bne.w	8005c24 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8005b14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005b18:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b20:	461a      	mov	r2, r3
 8005b22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005b26:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005b2a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8005b2c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005b30:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b38:	2200      	movs	r2, #0
 8005b3a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005b3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005b40:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005b44:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005b48:	f102 0210 	add.w	r2, r2, #16
 8005b4c:	6811      	ldr	r1, [r2, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe faee 	bl	8004130 <ld_clust>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005b5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b62:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005b64:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005b68:	f103 0310 	add.w	r3, r3, #16
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	331f      	adds	r3, #31
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	061a      	lsls	r2, r3, #24
 8005b74:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005b78:	f103 0310 	add.w	r3, r3, #16
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	331e      	adds	r3, #30
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005b8a:	f103 0310 	add.w	r3, r3, #16
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	331d      	adds	r3, #29
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005b9c:	f102 0210 	add.w	r2, r2, #16
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	321c      	adds	r2, #28
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005bac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005bb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bb4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8005bb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005bba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8005bc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005bcc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005bda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005bde:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be6:	461a      	mov	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005bec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005bf0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005bf4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005bf8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005bfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c00:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8005c02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005c06:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c14:	88da      	ldrh	r2, [r3, #6]
 8005c16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005c1a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c22:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005c24:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c28:	f103 0317 	add.w	r3, r3, #23
 8005c2c:	781b      	ldrb	r3, [r3, #0]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop

08005c3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08a      	sub	sp, #40	@ 0x28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff fc57 	bl	8005508 <validate>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <f_write+0x2c>
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	e21e      	b.n	80060a6 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c6e:	79db      	ldrb	r3, [r3, #7]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7a:	79db      	ldrb	r3, [r3, #7]
 8005c7c:	e213      	b.n	80060a6 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c84:	799b      	ldrb	r3, [r3, #6]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005c8e:	2307      	movs	r3, #7
 8005c90:	e209      	b.n	80060a6 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	f080 81d9 	bcs.w	800605e <f_write+0x422>
 8005cac:	2300      	movs	r3, #0
 8005cae:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005cb0:	e1d5      	b.n	800605e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cc6:	8952      	ldrh	r2, [r2, #10]
 8005cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ccc:	fb01 f202 	mul.w	r2, r1, r2
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 8169 	bne.w	8005faa <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cec:	8952      	ldrh	r2, [r2, #10]
 8005cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d00:	789b      	ldrb	r3, [r3, #2]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4013      	ands	r3, r2
 8005d08:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005d0a:	7dbb      	ldrb	r3, [r7, #22]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d15f      	bne.n	8005dd0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d111      	bne.n	8005d40 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d126      	bne.n	8005d7a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd feac 	bl	8003a94 <create_chain>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d3e:	e01c      	b.n	8005d7a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4619      	mov	r1, r3
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7fd ff44 	bl	8003be4 <clmt_clust>
 8005d5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d5e:	e00c      	b.n	8005d7a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fd fe8e 	bl	8003a94 <create_chain>
 8005d78:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8173 	beq.w	8006068 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d106      	bne.n	8005d96 <f_write+0x15a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8e:	2202      	movs	r2, #2
 8005d90:	71da      	strb	r2, [r3, #7]
 8005d92:	2302      	movs	r3, #2
 8005d94:	e187      	b.n	80060a6 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d106      	bne.n	8005dac <f_write+0x170>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da4:	2201      	movs	r2, #1
 8005da6:	71da      	strb	r2, [r3, #7]
 8005da8:	2301      	movs	r3, #1
 8005daa:	e17c      	b.n	80060a6 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db2:	461a      	mov	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <f_write+0x194>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd6:	799b      	ldrb	r3, [r3, #6]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d023      	beq.n	8005e28 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dec:	7858      	ldrb	r0, [r3, #1]
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df6:	699a      	ldr	r2, [r3, #24]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f7fc ffc1 	bl	8002d80 <disk_write>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	71da      	strb	r2, [r3, #7]
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e149      	b.n	80060a6 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e18:	799b      	ldrb	r3, [r3, #6]
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e26:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fd fb57 	bl	80034ee <clust2sect>
 8005e40:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <f_write+0x21a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4e:	2202      	movs	r2, #2
 8005e50:	71da      	strb	r2, [r3, #7]
 8005e52:	2302      	movs	r3, #2
 8005e54:	e127      	b.n	80060a6 <f_write+0x46a>
			sect += csect;
 8005e56:	7dbb      	ldrb	r3, [r7, #22]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e6a:	895b      	ldrh	r3, [r3, #10]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e74:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d069      	beq.n	8005f50 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005e7c:	7dba      	ldrb	r2, [r7, #22]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e8e:	7892      	ldrb	r2, [r2, #2]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d90a      	bls.n	8005eaa <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	7dbb      	ldrb	r3, [r7, #22]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb6:	7858      	ldrb	r0, [r3, #1]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	f7fc ff5f 	bl	8002d80 <disk_write>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d006      	beq.n	8005ed6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ece:	2201      	movs	r2, #1
 8005ed0:	71da      	strb	r2, [r3, #7]
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e0e7      	b.n	80060a6 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d926      	bls.n	8005f36 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005f02:	8952      	ldrh	r2, [r2, #10]
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	18d1      	adds	r1, r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f18:	895b      	ldrh	r3, [r3, #10]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fc ff6e 	bl	8002dfc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f26:	799b      	ldrb	r3, [r3, #6]
 8005f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f34:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f42:	895b      	ldrh	r3, [r3, #10]
 8005f44:	461a      	mov	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	623b      	str	r3, [r7, #32]
				continue;
 8005f4e:	e06e      	b.n	800602e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d01f      	beq.n	8005f9e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d215      	bcs.n	8005f9e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f7e:	7858      	ldrb	r0, [r3, #1]
 8005f80:	68f9      	ldr	r1, [r7, #12]
 8005f82:	2301      	movs	r3, #1
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	f7fc fedb 	bl	8002d40 <disk_read>
 8005f8a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f96:	2201      	movs	r2, #1
 8005f98:	71da      	strb	r2, [r3, #7]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e083      	b.n	80060a6 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb6:	895b      	ldrh	r3, [r3, #10]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fce:	8952      	ldrh	r2, [r2, #10]
 8005fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fd4:	fb01 f202 	mul.w	r2, r1, r2
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	1ac3      	subs	r3, r0, r3
 8005fdc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d901      	bls.n	8005fea <f_write+0x3ae>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ffe:	8952      	ldrh	r2, [r2, #10]
 8006000:	fbb3 f1f2 	udiv	r1, r3, r2
 8006004:	fb01 f202 	mul.w	r2, r1, r2
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	4618      	mov	r0, r3
 8006014:	f7fc fef2 	bl	8002dfc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800601e:	799b      	ldrb	r3, [r3, #6]
 8006020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800602c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	4413      	add	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	4413      	add	r3, r2
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006048:	6093      	str	r3, [r2, #8]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	441a      	add	r2, r3
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f ae26 	bne.w	8005cb2 <f_write+0x76>
 8006066:	e000      	b.n	800606a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006068:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	429a      	cmp	r2, r3
 800607c:	d907      	bls.n	800608e <f_write+0x452>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800608c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	f043 0320 	orr.w	r3, r3, #32
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3728      	adds	r7, #40	@ 0x28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fa26 	bl	8005508 <validate>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 80bc 	bne.w	8006240 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ce:	799b      	ldrb	r3, [r3, #6]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80b3 	beq.w	8006240 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e0:	799b      	ldrb	r3, [r3, #6]
 80060e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01e      	beq.n	8006128 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060f6:	7858      	ldrb	r0, [r3, #1]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	2301      	movs	r3, #1
 8006104:	f7fc fe3c 	bl	8002d80 <disk_write>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800610e:	2301      	movs	r3, #1
 8006110:	e097      	b.n	8006242 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006118:	799b      	ldrb	r3, [r3, #6]
 800611a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611e:	b2da      	uxtb	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006126:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fd f8e6 	bl	800330c <move_window>
 8006140:	4603      	mov	r3, r0
 8006142:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d17a      	bne.n	8006240 <f_sync+0x192>
				dir = fp->dir_ptr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	330b      	adds	r3, #11
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	330b      	adds	r3, #11
 800615e:	f042 0220 	orr.w	r2, r2, #32
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	331c      	adds	r3, #28
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	b29b      	uxth	r3, r3
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	b29a      	uxth	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	331d      	adds	r3, #29
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	0c1a      	lsrs	r2, r3, #16
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	331e      	adds	r3, #30
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	0e1a      	lsrs	r2, r3, #24
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	331f      	adds	r3, #31
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4619      	mov	r1, r3
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f7fd ffe6 	bl	800418c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80061c0:	f7fc fd1c 	bl	8002bfc <get_fattime>
 80061c4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3316      	adds	r3, #22
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3317      	adds	r3, #23
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	0c1a      	lsrs	r2, r3, #16
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3318      	adds	r3, #24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	0e1a      	lsrs	r2, r3, #24
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3319      	adds	r3, #25
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3312      	adds	r3, #18
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3313      	adds	r3, #19
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620e:	799b      	ldrb	r3, [r3, #6]
 8006210:	f023 0320 	bic.w	r3, r3, #32
 8006214:	b2da      	uxtb	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800621c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622a:	2201      	movs	r2, #1
 800622c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd f89a 	bl	8003370 <sync_fs>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006240:	7dfb      	ldrb	r3, [r7, #23]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ff2b 	bl	80060ae <f_sync>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d119      	bne.n	8006296 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff f950 	bl	8005508 <validate>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d111      	bne.n	8006296 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc ff86 	bl	800318c <dec_lock>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b090      	sub	sp, #64	@ 0x40
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff f92c 	bl	8005508 <validate>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80062b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <f_lseek+0x24>
 80062be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062c2:	e2da      	b.n	800687a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ca:	79db      	ldrb	r3, [r3, #7]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d6:	79db      	ldrb	r3, [r3, #7]
 80062d8:	e2cf      	b.n	800687a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8124 	beq.w	8006530 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d16c      	bne.n	80063ca <f_lseek+0x12a>
			tbl = fp->cltbl;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	2302      	movs	r3, #2
 8006306:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d046      	beq.n	80063a6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006322:	3302      	adds	r3, #2
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632c:	3301      	adds	r3, #1
 800632e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd f8fb 	bl	8003536 <get_fat>
 8006340:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2b01      	cmp	r3, #1
 8006346:	d806      	bhi.n	8006356 <f_lseek+0xb6>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634e:	2202      	movs	r2, #2
 8006350:	71da      	strb	r2, [r3, #7]
 8006352:	2302      	movs	r3, #2
 8006354:	e291      	b.n	800687a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d106      	bne.n	800636c <f_lseek+0xcc>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006364:	2201      	movs	r2, #1
 8006366:	71da      	strb	r2, [r3, #7]
 8006368:	2301      	movs	r3, #1
 800636a:	e286      	b.n	800687a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006372:	429a      	cmp	r2, r3
 8006374:	d0d7      	beq.n	8006326 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	429a      	cmp	r2, r3
 800637c:	d809      	bhi.n	8006392 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	1d1a      	adds	r2, r3, #4
 8006382:	627a      	str	r2, [r7, #36]	@ 0x24
 8006384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	627a      	str	r2, [r7, #36]	@ 0x24
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d3b8      	bcc.n	8006318 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80063b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d803      	bhi.n	80063c2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e259      	b.n	8006876 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80063c2:	2311      	movs	r3, #17
 80063c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80063c8:	e255      	b.n	8006876 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d904      	bls.n	80063e2 <f_lseek+0x142>
				ofs = fp->fsize;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e8:	461a      	mov	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8240 	beq.w	8006876 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fd fbf1 	bl	8003be4 <clmt_clust>
 8006402:	4602      	mov	r2, r0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fd f865 	bl	80034ee <clust2sect>
 8006424:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <f_lseek+0x19a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006432:	2202      	movs	r2, #2
 8006434:	71da      	strb	r2, [r3, #7]
 8006436:	2302      	movs	r3, #2
 8006438:	e21f      	b.n	800687a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3b01      	subs	r3, #1
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800644a:	8952      	ldrh	r2, [r2, #10]
 800644c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800645c:	7892      	ldrb	r2, [r2, #2]
 800645e:	3a01      	subs	r2, #1
 8006460:	4013      	ands	r3, r2
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4413      	add	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800647c:	8952      	ldrh	r2, [r2, #10]
 800647e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006482:	fb01 f202 	mul.w	r2, r1, r2
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 81f4 	beq.w	8006876 <f_lseek+0x5d6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	429a      	cmp	r2, r3
 800649a:	f000 81ec 	beq.w	8006876 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a4:	799b      	ldrb	r3, [r3, #6]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d023      	beq.n	80064f6 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ba:	7858      	ldrb	r0, [r3, #1]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	2301      	movs	r3, #1
 80064c8:	f7fc fc5a 	bl	8002d80 <disk_write>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d8:	2201      	movs	r2, #1
 80064da:	71da      	strb	r2, [r3, #7]
 80064dc:	2301      	movs	r3, #1
 80064de:	e1cc      	b.n	800687a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e6:	799b      	ldrb	r3, [r3, #6]
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f4:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006502:	7858      	ldrb	r0, [r3, #1]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	2301      	movs	r3, #1
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	f7fc fc19 	bl	8002d40 <disk_read>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800651a:	2201      	movs	r2, #1
 800651c:	71da      	strb	r2, [r3, #7]
 800651e:	2301      	movs	r3, #1
 8006520:	e1ab      	b.n	800687a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006528:	461a      	mov	r2, r3
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	6193      	str	r3, [r2, #24]
 800652e:	e1a2      	b.n	8006876 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d90c      	bls.n	8006558 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006544:	799b      	ldrb	r3, [r3, #6]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656c:	461a      	mov	r2, r3
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8100 	beq.w	800677a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006586:	789b      	ldrb	r3, [r3, #2]
 8006588:	461a      	mov	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006596:	895b      	ldrh	r3, [r3, #10]
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d021      	beq.n	80065e8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	1e59      	subs	r1, r3, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d315      	bcc.n	80065e8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	1e5a      	subs	r2, r3, #1
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	425b      	negs	r3, r3
 80065c4:	4013      	ands	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065cc:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065e6:	e031      	b.n	800664c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d123      	bne.n	8006640 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f7fd fa46 	bl	8003a94 <create_chain>
 8006608:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <f_lseek+0x37e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006616:	2202      	movs	r2, #2
 8006618:	71da      	strb	r2, [r3, #7]
 800661a:	2302      	movs	r3, #2
 800661c:	e12d      	b.n	800687a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800661e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d106      	bne.n	8006634 <f_lseek+0x394>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662c:	2201      	movs	r2, #1
 800662e:	71da      	strb	r2, [r3, #7]
 8006630:	2301      	movs	r3, #1
 8006632:	e122      	b.n	800687a <f_lseek+0x5da>
					fp->sclust = clst;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663a:	461a      	mov	r2, r3
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006646:	461a      	mov	r2, r3
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8093 	beq.w	800677a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8006654:	e052      	b.n	80066fc <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665c:	799b      	ldrb	r3, [r3, #6]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd fa0f 	bl	8003a94 <create_chain>
 8006676:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <f_lseek+0x3f6>
							ofs = bcs; break;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	e03f      	b.n	8006704 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800668e:	4618      	mov	r0, r3
 8006690:	f7fc ff51 	bl	8003536 <get_fat>
 8006694:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d106      	bne.n	80066ac <f_lseek+0x40c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a4:	2201      	movs	r2, #1
 80066a6:	71da      	strb	r2, [r3, #7]
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0e6      	b.n	800687a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d909      	bls.n	80066c6 <f_lseek+0x426>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d306      	bcc.n	80066d4 <f_lseek+0x434>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066cc:	2202      	movs	r2, #2
 80066ce:	71da      	strb	r2, [r3, #7]
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0d2      	b.n	800687a <f_lseek+0x5da>
					fp->clust = clst;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066da:	461a      	mov	r2, r3
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066f2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	429a      	cmp	r2, r3
 8006702:	d8a8      	bhi.n	8006656 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4413      	add	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006716:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006724:	895b      	ldrh	r3, [r3, #10]
 8006726:	461a      	mov	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	fbb3 f1f2 	udiv	r1, r3, r2
 800672e:	fb01 f202 	mul.w	r2, r1, r2
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006742:	4618      	mov	r0, r3
 8006744:	f7fc fed3 	bl	80034ee <clust2sect>
 8006748:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <f_lseek+0x4be>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006756:	2202      	movs	r2, #2
 8006758:	71da      	strb	r2, [r3, #7]
 800675a:	2302      	movs	r3, #2
 800675c:	e08d      	b.n	800687a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800676a:	895b      	ldrh	r3, [r3, #10]
 800676c:	461a      	mov	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	fbb3 f3f2 	udiv	r3, r3, r2
 8006774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006776:	4413      	add	r3, r2
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800678e:	8952      	ldrh	r2, [r2, #10]
 8006790:	fbb3 f1f2 	udiv	r1, r3, r2
 8006794:	fb01 f202 	mul.w	r2, r1, r2
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04e      	beq.n	800683c <f_lseek+0x59c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d047      	beq.n	800683c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b2:	799b      	ldrb	r3, [r3, #6]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d023      	beq.n	8006804 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c8:	7858      	ldrb	r0, [r3, #1]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	2301      	movs	r3, #1
 80067d6:	f7fc fad3 	bl	8002d80 <disk_write>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d006      	beq.n	80067ee <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e6:	2201      	movs	r2, #1
 80067e8:	71da      	strb	r2, [r3, #7]
 80067ea:	2301      	movs	r3, #1
 80067ec:	e045      	b.n	800687a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f4:	799b      	ldrb	r3, [r3, #6]
 80067f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006802:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006810:	7858      	ldrb	r0, [r3, #1]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	2301      	movs	r3, #1
 8006816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006818:	f7fc fa92 	bl	8002d40 <disk_read>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006828:	2201      	movs	r2, #1
 800682a:	71da      	strb	r2, [r3, #7]
 800682c:	2301      	movs	r3, #1
 800682e:	e024      	b.n	800687a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006836:	461a      	mov	r2, r3
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d912      	bls.n	8006876 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800685e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006866:	799b      	ldrb	r3, [r3, #6]
 8006868:	f043 0320 	orr.w	r3, r3, #32
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006874:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006876:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800687a:	4618      	mov	r0, r3
 800687c:	3740      	adds	r7, #64	@ 0x40
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	2b0a      	cmp	r3, #10
 8006892:	d103      	bne.n	800689c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006894:	210d      	movs	r1, #13
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fff3 	bl	8006882 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	db25      	blt.n	80068f4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	60fa      	str	r2, [r7, #12]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b3c      	cmp	r3, #60	@ 0x3c
 80068ba:	dd12      	ble.n	80068e2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f103 010c 	add.w	r1, r3, #12
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	f7ff f9b6 	bl	8005c3c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d101      	bne.n	80068dc <putc_bfd+0x5a>
 80068d8:	2300      	movs	r3, #0
 80068da:	e001      	b.n	80068e0 <putc_bfd+0x5e>
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	609a      	str	r2, [r3, #8]
 80068f2:	e000      	b.n	80068f6 <putc_bfd+0x74>
	if (i < 0) return;
 80068f4:	bf00      	nop
}
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b097      	sub	sp, #92	@ 0x5c
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006912:	e009      	b.n	8006928 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff ffad 	bl	8006882 <putc_bfd>
	while (*str)			/* Put the string */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f1      	bne.n	8006914 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	db15      	blt.n	8006962 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	461c      	mov	r4, r3
 800693c:	f107 0208 	add.w	r2, r7, #8
 8006940:	f107 030c 	add.w	r3, r7, #12
 8006944:	f103 010c 	add.w	r1, r3, #12
 8006948:	4613      	mov	r3, r2
 800694a:	4622      	mov	r2, r4
 800694c:	f7ff f976 	bl	8005c3c <f_write>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <f_puts+0x66>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	e001      	b.n	8006966 <f_puts+0x6a>
	return EOF;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006966:	4618      	mov	r0, r3
 8006968:	375c      	adds	r7, #92	@ 0x5c
 800696a:	46bd      	mov	sp, r7
 800696c:	bd90      	pop	{r4, r7, pc}
	...

08006970 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006986:	4b1e      	ldr	r3, [pc, #120]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 8006988:	7a5b      	ldrb	r3, [r3, #9]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d831      	bhi.n	80069f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006990:	4b1b      	ldr	r3, [pc, #108]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 8006992:	7a5b      	ldrb	r3, [r3, #9]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 800699a:	2100      	movs	r1, #0
 800699c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800699e:	4b18      	ldr	r3, [pc, #96]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069a0:	7a5b      	ldrb	r3, [r3, #9]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80069ae:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069b0:	7a5b      	ldrb	r3, [r3, #9]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069b8:	4413      	add	r3, r2
 80069ba:	79fa      	ldrb	r2, [r7, #7]
 80069bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80069be:	4b10      	ldr	r3, [pc, #64]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069c0:	7a5b      	ldrb	r3, [r3, #9]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	b2d1      	uxtb	r1, r2
 80069c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006a00 <FATFS_LinkDriverEx+0x90>)
 80069ca:	7251      	strb	r1, [r2, #9]
 80069cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069ce:	7dbb      	ldrb	r3, [r7, #22]
 80069d0:	3330      	adds	r3, #48	@ 0x30
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	3301      	adds	r3, #1
 80069dc:	223a      	movs	r2, #58	@ 0x3a
 80069de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3302      	adds	r3, #2
 80069e4:	222f      	movs	r2, #47	@ 0x2f
 80069e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3303      	adds	r3, #3
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr
 8006a00:	200013c8 	.word	0x200013c8

08006a04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff ffac 	bl	8006970 <FATFS_LinkDriverEx>
 8006a18:	4603      	mov	r3, r0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	6039      	str	r1, [r7, #0]
 8006a2e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a34:	d802      	bhi.n	8006a3c <ff_convert+0x18>
		c = chr;
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	81fb      	strh	r3, [r7, #14]
 8006a3a:	e025      	b.n	8006a88 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	2bff      	cmp	r3, #255	@ 0xff
 8006a46:	d805      	bhi.n	8006a54 <ff_convert+0x30>
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	3b80      	subs	r3, #128	@ 0x80
 8006a4c:	4a11      	ldr	r2, [pc, #68]	@ (8006a94 <ff_convert+0x70>)
 8006a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a52:	e000      	b.n	8006a56 <ff_convert+0x32>
 8006a54:	2300      	movs	r3, #0
 8006a56:	81fb      	strh	r3, [r7, #14]
 8006a58:	e016      	b.n	8006a88 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	81fb      	strh	r3, [r7, #14]
 8006a5e:	e009      	b.n	8006a74 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	4a0c      	ldr	r2, [pc, #48]	@ (8006a94 <ff_convert+0x70>)
 8006a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d006      	beq.n	8006a7c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006a6e:	89fb      	ldrh	r3, [r7, #14]
 8006a70:	3301      	adds	r3, #1
 8006a72:	81fb      	strh	r3, [r7, #14]
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a78:	d9f2      	bls.n	8006a60 <ff_convert+0x3c>
 8006a7a:	e000      	b.n	8006a7e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006a7c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006a7e:	89fb      	ldrh	r3, [r7, #14]
 8006a80:	3380      	adds	r3, #128	@ 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006a88:	89fb      	ldrh	r3, [r7, #14]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	08009e88 	.word	0x08009e88

08006a98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e002      	b.n	8006aae <ff_wtoupper+0x16>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	4a0f      	ldr	r2, [pc, #60]	@ (8006aec <ff_wtoupper+0x54>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d006      	beq.n	8006ac8 <ff_wtoupper+0x30>
 8006aba:	4a0c      	ldr	r2, [pc, #48]	@ (8006aec <ff_wtoupper+0x54>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d1ef      	bne.n	8006aa8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006ac8:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <ff_wtoupper+0x54>)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <ff_wtoupper+0x46>
 8006ad4:	4a06      	ldr	r2, [pc, #24]	@ (8006af0 <ff_wtoupper+0x58>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006adc:	e000      	b.n	8006ae0 <ff_wtoupper+0x48>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	08009f88 	.word	0x08009f88
 8006af0:	0800a168 	.word	0x0800a168

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	e9c0 3300 	strd	r3, r3, [r0]
 8006afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	@ 0x5c
 8006b12:	f000 f92a 	bl	8006d6a <memset>
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x58>)
 8006b18:	6224      	str	r4, [r4, #32]
 8006b1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <std+0x5c>)
 8006b1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b20:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <std+0x60>)
 8006b22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b24:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <std+0x64>)
 8006b26:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b28:	4b0c      	ldr	r3, [pc, #48]	@ (8006b5c <std+0x68>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d006      	beq.n	8006b3c <std+0x48>
 8006b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b32:	4294      	cmp	r4, r2
 8006b34:	d002      	beq.n	8006b3c <std+0x48>
 8006b36:	33d0      	adds	r3, #208	@ 0xd0
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d105      	bne.n	8006b48 <std+0x54>
 8006b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	f001 bac8 	b.w	80080d8 <__retarget_lock_init_recursive>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08006ce1 	.word	0x08006ce1
 8006b50:	08006d07 	.word	0x08006d07
 8006b54:	08006d3f 	.word	0x08006d3f
 8006b58:	08006d63 	.word	0x08006d63
 8006b5c:	200013d4 	.word	0x200013d4

08006b60 <stdio_exit_handler>:
 8006b60:	4a02      	ldr	r2, [pc, #8]	@ (8006b6c <stdio_exit_handler+0xc>)
 8006b62:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <stdio_exit_handler+0x10>)
 8006b64:	4803      	ldr	r0, [pc, #12]	@ (8006b74 <stdio_exit_handler+0x14>)
 8006b66:	f000 b869 	b.w	8006c3c <_fwalk_sglue>
 8006b6a:	bf00      	nop
 8006b6c:	20000028 	.word	0x20000028
 8006b70:	08008b9d 	.word	0x08008b9d
 8006b74:	20000040 	.word	0x20000040

08006b78 <cleanup_stdio>:
 8006b78:	6841      	ldr	r1, [r0, #4]
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <cleanup_stdio+0x34>)
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	4299      	cmp	r1, r3
 8006b80:	4604      	mov	r4, r0
 8006b82:	d001      	beq.n	8006b88 <cleanup_stdio+0x10>
 8006b84:	f002 f80a 	bl	8008b9c <_fflush_r>
 8006b88:	68a1      	ldr	r1, [r4, #8]
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <cleanup_stdio+0x38>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	d002      	beq.n	8006b96 <cleanup_stdio+0x1e>
 8006b90:	4620      	mov	r0, r4
 8006b92:	f002 f803 	bl	8008b9c <_fflush_r>
 8006b96:	68e1      	ldr	r1, [r4, #12]
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <cleanup_stdio+0x3c>)
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	d004      	beq.n	8006ba8 <cleanup_stdio+0x30>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba4:	f001 bffa 	b.w	8008b9c <_fflush_r>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	200013d4 	.word	0x200013d4
 8006bb0:	2000143c 	.word	0x2000143c
 8006bb4:	200014a4 	.word	0x200014a4

08006bb8 <global_stdio_init.part.0>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <global_stdio_init.part.0+0x30>)
 8006bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bec <global_stdio_init.part.0+0x34>)
 8006bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf0 <global_stdio_init.part.0+0x38>)
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f7ff ff94 	bl	8006af4 <std>
 8006bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2109      	movs	r1, #9
 8006bd4:	f7ff ff8e 	bl	8006af4 <std>
 8006bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bdc:	2202      	movs	r2, #2
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	2112      	movs	r1, #18
 8006be4:	f7ff bf86 	b.w	8006af4 <std>
 8006be8:	2000150c 	.word	0x2000150c
 8006bec:	200013d4 	.word	0x200013d4
 8006bf0:	08006b61 	.word	0x08006b61

08006bf4 <__sfp_lock_acquire>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__sfp_lock_acquire+0x8>)
 8006bf6:	f001 ba71 	b.w	80080dc <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	2000153b 	.word	0x2000153b

08006c00 <__sfp_lock_release>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__sfp_lock_release+0x8>)
 8006c02:	f001 ba6d 	b.w	80080e0 <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	2000153b 	.word	0x2000153b

08006c0c <__sinit>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f7ff fff0 	bl	8006bf4 <__sfp_lock_acquire>
 8006c14:	6a23      	ldr	r3, [r4, #32]
 8006c16:	b11b      	cbz	r3, 8006c20 <__sinit+0x14>
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f7ff bff0 	b.w	8006c00 <__sfp_lock_release>
 8006c20:	4b04      	ldr	r3, [pc, #16]	@ (8006c34 <__sinit+0x28>)
 8006c22:	6223      	str	r3, [r4, #32]
 8006c24:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <__sinit+0x2c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f5      	bne.n	8006c18 <__sinit+0xc>
 8006c2c:	f7ff ffc4 	bl	8006bb8 <global_stdio_init.part.0>
 8006c30:	e7f2      	b.n	8006c18 <__sinit+0xc>
 8006c32:	bf00      	nop
 8006c34:	08006b79 	.word	0x08006b79
 8006c38:	2000150c 	.word	0x2000150c

08006c3c <_fwalk_sglue>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4607      	mov	r7, r0
 8006c42:	4688      	mov	r8, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	2600      	movs	r6, #0
 8006c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c50:	d505      	bpl.n	8006c5e <_fwalk_sglue+0x22>
 8006c52:	6824      	ldr	r4, [r4, #0]
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d1f7      	bne.n	8006c48 <_fwalk_sglue+0xc>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d907      	bls.n	8006c74 <_fwalk_sglue+0x38>
 8006c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	d003      	beq.n	8006c74 <_fwalk_sglue+0x38>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	4306      	orrs	r6, r0
 8006c74:	3568      	adds	r5, #104	@ 0x68
 8006c76:	e7e9      	b.n	8006c4c <_fwalk_sglue+0x10>

08006c78 <sniprintf>:
 8006c78:	b40c      	push	{r2, r3}
 8006c7a:	b530      	push	{r4, r5, lr}
 8006c7c:	4b17      	ldr	r3, [pc, #92]	@ (8006cdc <sniprintf+0x64>)
 8006c7e:	1e0c      	subs	r4, r1, #0
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	b09d      	sub	sp, #116	@ 0x74
 8006c84:	da08      	bge.n	8006c98 <sniprintf+0x20>
 8006c86:	238b      	movs	r3, #139	@ 0x8b
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	b01d      	add	sp, #116	@ 0x74
 8006c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c94:	b002      	add	sp, #8
 8006c96:	4770      	bx	lr
 8006c98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ca0:	bf0c      	ite	eq
 8006ca2:	4623      	moveq	r3, r4
 8006ca4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cb0:	9002      	str	r0, [sp, #8]
 8006cb2:	9006      	str	r0, [sp, #24]
 8006cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	ab21      	add	r3, sp, #132	@ 0x84
 8006cbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cbe:	a902      	add	r1, sp, #8
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	f001 fc5d 	bl	8008580 <_svfiprintf_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	bfbc      	itt	lt
 8006cca:	238b      	movlt	r3, #139	@ 0x8b
 8006ccc:	602b      	strlt	r3, [r5, #0]
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d0dd      	beq.n	8006c8e <sniprintf+0x16>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	9b02      	ldr	r3, [sp, #8]
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e7d9      	b.n	8006c8e <sniprintf+0x16>
 8006cda:	bf00      	nop
 8006cdc:	2000003c 	.word	0x2000003c

08006ce0 <__sread>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f001 f9a8 	bl	800803c <_read_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	bfab      	itete	ge
 8006cf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf4:	181b      	addge	r3, r3, r0
 8006cf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cfa:	bfac      	ite	ge
 8006cfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cfe:	81a3      	strhlt	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__seofread>:
 8006d02:	2000      	movs	r0, #0
 8006d04:	4770      	bx	lr

08006d06 <__swrite>:
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	4605      	mov	r5, r0
 8006d10:	05db      	lsls	r3, r3, #23
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d505      	bpl.n	8006d24 <__swrite+0x1e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d20:	f001 f97a 	bl	8008018 <_lseek_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	4632      	mov	r2, r6
 8006d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	4628      	mov	r0, r5
 8006d30:	463b      	mov	r3, r7
 8006d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3a:	f001 b991 	b.w	8008060 <_write_r>

08006d3e <__sseek>:
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	460c      	mov	r4, r1
 8006d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d46:	f001 f967 	bl	8008018 <_lseek_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	bf15      	itete	ne
 8006d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d5a:	81a3      	strheq	r3, [r4, #12]
 8006d5c:	bf18      	it	ne
 8006d5e:	81a3      	strhne	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__sclose>:
 8006d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d66:	f001 b935 	b.w	8007fd4 <_close_r>

08006d6a <memset>:
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d100      	bne.n	8006d74 <memset+0xa>
 8006d72:	4770      	bx	lr
 8006d74:	f803 1b01 	strb.w	r1, [r3], #1
 8006d78:	e7f9      	b.n	8006d6e <memset+0x4>
	...

08006d7c <localtime>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <localtime+0x30>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	681d      	ldr	r5, [r3, #0]
 8006d84:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006d86:	b953      	cbnz	r3, 8006d9e <localtime+0x22>
 8006d88:	2024      	movs	r0, #36	@ 0x24
 8006d8a:	f001 fa65 	bl	8008258 <malloc>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6368      	str	r0, [r5, #52]	@ 0x34
 8006d92:	b920      	cbnz	r0, 8006d9e <localtime+0x22>
 8006d94:	2132      	movs	r1, #50	@ 0x32
 8006d96:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <localtime+0x34>)
 8006d98:	4806      	ldr	r0, [pc, #24]	@ (8006db4 <localtime+0x38>)
 8006d9a:	f001 f9af 	bl	80080fc <__assert_func>
 8006d9e:	4620      	mov	r0, r4
 8006da0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8006da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da6:	f000 b807 	b.w	8006db8 <localtime_r>
 8006daa:	bf00      	nop
 8006dac:	2000003c 	.word	0x2000003c
 8006db0:	0800a348 	.word	0x0800a348
 8006db4:	0800a35f 	.word	0x0800a35f

08006db8 <localtime_r>:
 8006db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	f001 ff7c 	bl	8008cbc <__gettzinfo>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4640      	mov	r0, r8
 8006dca:	f001 ff7b 	bl	8008cc4 <gmtime_r>
 8006dce:	6943      	ldr	r3, [r0, #20]
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	0799      	lsls	r1, r3, #30
 8006dd4:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8006dd8:	d106      	bne.n	8006de8 <localtime_r+0x30>
 8006dda:	2264      	movs	r2, #100	@ 0x64
 8006ddc:	fb97 f3f2 	sdiv	r3, r7, r2
 8006de0:	fb02 7313 	mls	r3, r2, r3, r7
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d170      	bne.n	8006eca <localtime_r+0x112>
 8006de8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006dec:	fb97 f3f2 	sdiv	r3, r7, r2
 8006df0:	fb02 7313 	mls	r3, r2, r3, r7
 8006df4:	fab3 f383 	clz	r3, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	2230      	movs	r2, #48	@ 0x30
 8006dfc:	4e63      	ldr	r6, [pc, #396]	@ (8006f8c <localtime_r+0x1d4>)
 8006dfe:	fb02 6603 	mla	r6, r2, r3, r6
 8006e02:	f000 feb1 	bl	8007b68 <__tz_lock>
 8006e06:	f000 febb 	bl	8007b80 <_tzset_unlocked>
 8006e0a:	4b61      	ldr	r3, [pc, #388]	@ (8006f90 <localtime_r+0x1d8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d06a      	beq.n	8006ee8 <localtime_r+0x130>
 8006e12:	686b      	ldr	r3, [r5, #4]
 8006e14:	42bb      	cmp	r3, r7
 8006e16:	d15a      	bne.n	8006ece <localtime_r+0x116>
 8006e18:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006e1c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8006e20:	682f      	ldr	r7, [r5, #0]
 8006e22:	2f00      	cmp	r7, #0
 8006e24:	d15b      	bne.n	8006ede <localtime_r+0x126>
 8006e26:	4282      	cmp	r2, r0
 8006e28:	eb73 0101 	sbcs.w	r1, r3, r1
 8006e2c:	db5e      	blt.n	8006eec <localtime_r+0x134>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	6223      	str	r3, [r4, #32]
 8006e32:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8006e34:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8006e38:	fb93 f0f2 	sdiv	r0, r3, r2
 8006e3c:	fb02 3310 	mls	r3, r2, r0, r3
 8006e40:	223c      	movs	r2, #60	@ 0x3c
 8006e42:	fb93 f5f2 	sdiv	r5, r3, r2
 8006e46:	fb02 3215 	mls	r2, r2, r5, r3
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	6861      	ldr	r1, [r4, #4]
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	68a2      	ldr	r2, [r4, #8]
 8006e52:	1b49      	subs	r1, r1, r5
 8006e54:	1a12      	subs	r2, r2, r0
 8006e56:	2b3b      	cmp	r3, #59	@ 0x3b
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	6061      	str	r1, [r4, #4]
 8006e5c:	60a2      	str	r2, [r4, #8]
 8006e5e:	dd51      	ble.n	8006f04 <localtime_r+0x14c>
 8006e60:	3101      	adds	r1, #1
 8006e62:	6061      	str	r1, [r4, #4]
 8006e64:	3b3c      	subs	r3, #60	@ 0x3c
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	2b3b      	cmp	r3, #59	@ 0x3b
 8006e6c:	dd50      	ble.n	8006f10 <localtime_r+0x158>
 8006e6e:	3201      	adds	r2, #1
 8006e70:	60a2      	str	r2, [r4, #8]
 8006e72:	3b3c      	subs	r3, #60	@ 0x3c
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	2b17      	cmp	r3, #23
 8006e7a:	dd4f      	ble.n	8006f1c <localtime_r+0x164>
 8006e7c:	69e2      	ldr	r2, [r4, #28]
 8006e7e:	3b18      	subs	r3, #24
 8006e80:	3201      	adds	r2, #1
 8006e82:	61e2      	str	r2, [r4, #28]
 8006e84:	69a2      	ldr	r2, [r4, #24]
 8006e86:	60a3      	str	r3, [r4, #8]
 8006e88:	3201      	adds	r2, #1
 8006e8a:	2a07      	cmp	r2, #7
 8006e8c:	bfa8      	it	ge
 8006e8e:	2200      	movge	r2, #0
 8006e90:	61a2      	str	r2, [r4, #24]
 8006e92:	68e2      	ldr	r2, [r4, #12]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	3201      	adds	r2, #1
 8006e98:	60e2      	str	r2, [r4, #12]
 8006e9a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8006e9e:	428a      	cmp	r2, r1
 8006ea0:	dd0e      	ble.n	8006ec0 <localtime_r+0x108>
 8006ea2:	2b0b      	cmp	r3, #11
 8006ea4:	eba2 0201 	sub.w	r2, r2, r1
 8006ea8:	60e2      	str	r2, [r4, #12]
 8006eaa:	f103 0201 	add.w	r2, r3, #1
 8006eae:	bf05      	ittet	eq
 8006eb0:	2200      	moveq	r2, #0
 8006eb2:	6963      	ldreq	r3, [r4, #20]
 8006eb4:	6122      	strne	r2, [r4, #16]
 8006eb6:	3301      	addeq	r3, #1
 8006eb8:	bf02      	ittt	eq
 8006eba:	6122      	streq	r2, [r4, #16]
 8006ebc:	6163      	streq	r3, [r4, #20]
 8006ebe:	61e2      	streq	r2, [r4, #28]
 8006ec0:	f000 fe58 	bl	8007b74 <__tz_unlock>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e795      	b.n	8006dfa <localtime_r+0x42>
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f000 fda2 	bl	8007a18 <__tzcalc_limits>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d19f      	bne.n	8006e18 <localtime_r+0x60>
 8006ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8006edc:	e004      	b.n	8006ee8 <localtime_r+0x130>
 8006ede:	4282      	cmp	r2, r0
 8006ee0:	eb73 0101 	sbcs.w	r1, r3, r1
 8006ee4:	da02      	bge.n	8006eec <localtime_r+0x134>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6223      	str	r3, [r4, #32]
 8006eea:	e009      	b.n	8006f00 <localtime_r+0x148>
 8006eec:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8006ef0:	4282      	cmp	r2, r0
 8006ef2:	418b      	sbcs	r3, r1
 8006ef4:	bfb4      	ite	lt
 8006ef6:	2301      	movlt	r3, #1
 8006ef8:	2300      	movge	r3, #0
 8006efa:	6223      	str	r3, [r4, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d198      	bne.n	8006e32 <localtime_r+0x7a>
 8006f00:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006f02:	e797      	b.n	8006e34 <localtime_r+0x7c>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	daaf      	bge.n	8006e68 <localtime_r+0xb0>
 8006f08:	3901      	subs	r1, #1
 8006f0a:	6061      	str	r1, [r4, #4]
 8006f0c:	333c      	adds	r3, #60	@ 0x3c
 8006f0e:	e7aa      	b.n	8006e66 <localtime_r+0xae>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	dab0      	bge.n	8006e76 <localtime_r+0xbe>
 8006f14:	3a01      	subs	r2, #1
 8006f16:	60a2      	str	r2, [r4, #8]
 8006f18:	333c      	adds	r3, #60	@ 0x3c
 8006f1a:	e7ab      	b.n	8006e74 <localtime_r+0xbc>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dacf      	bge.n	8006ec0 <localtime_r+0x108>
 8006f20:	69e2      	ldr	r2, [r4, #28]
 8006f22:	3318      	adds	r3, #24
 8006f24:	3a01      	subs	r2, #1
 8006f26:	61e2      	str	r2, [r4, #28]
 8006f28:	69a2      	ldr	r2, [r4, #24]
 8006f2a:	60a3      	str	r3, [r4, #8]
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	bf48      	it	mi
 8006f30:	2206      	movmi	r2, #6
 8006f32:	61a2      	str	r2, [r4, #24]
 8006f34:	68e2      	ldr	r2, [r4, #12]
 8006f36:	3a01      	subs	r2, #1
 8006f38:	60e2      	str	r2, [r4, #12]
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d1c0      	bne.n	8006ec0 <localtime_r+0x108>
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	d405      	bmi.n	8006f50 <localtime_r+0x198>
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8006f4c:	60e3      	str	r3, [r4, #12]
 8006f4e:	e7b7      	b.n	8006ec0 <localtime_r+0x108>
 8006f50:	230b      	movs	r3, #11
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	6963      	ldr	r3, [r4, #20]
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	6162      	str	r2, [r4, #20]
 8006f5a:	0792      	lsls	r2, r2, #30
 8006f5c:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8006f60:	d105      	bne.n	8006f6e <localtime_r+0x1b6>
 8006f62:	2164      	movs	r1, #100	@ 0x64
 8006f64:	fb93 f2f1 	sdiv	r2, r3, r1
 8006f68:	fb01 3212 	mls	r2, r1, r2, r3
 8006f6c:	b962      	cbnz	r2, 8006f88 <localtime_r+0x1d0>
 8006f6e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f72:	fb93 f1f2 	sdiv	r1, r3, r2
 8006f76:	fb02 3311 	mls	r3, r2, r1, r3
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006f84:	61e3      	str	r3, [r4, #28]
 8006f86:	e7de      	b.n	8006f46 <localtime_r+0x18e>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e7f9      	b.n	8006f80 <localtime_r+0x1c8>
 8006f8c:	0800a3b8 	.word	0x0800a3b8
 8006f90:	20001530 	.word	0x20001530

08006f94 <iso_year_adjust>:
 8006f94:	6942      	ldr	r2, [r0, #20]
 8006f96:	f240 736c 	movw	r3, #1900	@ 0x76c
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	bfa8      	it	ge
 8006f9e:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8006fa2:	4413      	add	r3, r2
 8006fa4:	0792      	lsls	r2, r2, #30
 8006fa6:	d105      	bne.n	8006fb4 <iso_year_adjust+0x20>
 8006fa8:	2164      	movs	r1, #100	@ 0x64
 8006faa:	fb93 f2f1 	sdiv	r2, r3, r1
 8006fae:	fb01 3212 	mls	r2, r1, r2, r3
 8006fb2:	b9ca      	cbnz	r2, 8006fe8 <iso_year_adjust+0x54>
 8006fb4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006fb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8006fbc:	fb02 3311 	mls	r3, r2, r1, r3
 8006fc0:	fab3 f383 	clz	r3, r3
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8006fca:	0040      	lsls	r0, r0, #1
 8006fcc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8006fd0:	4418      	add	r0, r3
 8006fd2:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 8006fd6:	4298      	cmp	r0, r3
 8006fd8:	d027      	beq.n	800702a <iso_year_adjust+0x96>
 8006fda:	dc11      	bgt.n	8007000 <iso_year_adjust+0x6c>
 8006fdc:	2801      	cmp	r0, #1
 8006fde:	dc0a      	bgt.n	8006ff6 <iso_year_adjust+0x62>
 8006fe0:	43c0      	mvns	r0, r0
 8006fe2:	0fc0      	lsrs	r0, r0, #31
 8006fe4:	4240      	negs	r0, r0
 8006fe6:	4770      	bx	lr
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e7ec      	b.n	8006fc6 <iso_year_adjust+0x32>
 8006fec:	4b10      	ldr	r3, [pc, #64]	@ (8007030 <iso_year_adjust+0x9c>)
 8006fee:	40c3      	lsrs	r3, r0
 8006ff0:	f343 0000 	sbfx	r0, r3, #0, #1
 8006ff4:	4770      	bx	lr
 8006ff6:	380a      	subs	r0, #10
 8006ff8:	2817      	cmp	r0, #23
 8006ffa:	d9f7      	bls.n	8006fec <iso_year_adjust+0x58>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4770      	bx	lr
 8007000:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8007004:	4298      	cmp	r0, r3
 8007006:	dc06      	bgt.n	8007016 <iso_year_adjust+0x82>
 8007008:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 800700c:	4298      	cmp	r0, r3
 800700e:	bfd4      	ite	le
 8007010:	2000      	movle	r0, #0
 8007012:	2001      	movgt	r0, #1
 8007014:	4770      	bx	lr
 8007016:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 800701a:	3802      	subs	r0, #2
 800701c:	2815      	cmp	r0, #21
 800701e:	d8ed      	bhi.n	8006ffc <iso_year_adjust+0x68>
 8007020:	4b04      	ldr	r3, [pc, #16]	@ (8007034 <iso_year_adjust+0xa0>)
 8007022:	40c3      	lsrs	r3, r0
 8007024:	f003 0001 	and.w	r0, r3, #1
 8007028:	4770      	bx	lr
 800702a:	2001      	movs	r0, #1
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	00cc00cf 	.word	0x00cc00cf
 8007034:	002a001f 	.word	0x002a001f

08007038 <__strftime.isra.0>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	461e      	mov	r6, r3
 800703e:	2300      	movs	r3, #0
 8007040:	4607      	mov	r7, r0
 8007042:	460d      	mov	r5, r1
 8007044:	461c      	mov	r4, r3
 8007046:	b08f      	sub	sp, #60	@ 0x3c
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	7813      	ldrb	r3, [r2, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 84ae 	beq.w	80079ae <__strftime.isra.0+0x976>
 8007052:	2b25      	cmp	r3, #37	@ 0x25
 8007054:	d11f      	bne.n	8007096 <__strftime.isra.0+0x5e>
 8007056:	f892 9001 	ldrb.w	r9, [r2, #1]
 800705a:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 800705e:	d024      	beq.n	80070aa <__strftime.isra.0+0x72>
 8007060:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8007064:	d021      	beq.n	80070aa <__strftime.isra.0+0x72>
 8007066:	f04f 0900 	mov.w	r9, #0
 800706a:	f102 0801 	add.w	r8, r2, #1
 800706e:	f898 2000 	ldrb.w	r2, [r8]
 8007072:	3a31      	subs	r2, #49	@ 0x31
 8007074:	2a08      	cmp	r2, #8
 8007076:	d81b      	bhi.n	80070b0 <__strftime.isra.0+0x78>
 8007078:	220a      	movs	r2, #10
 800707a:	4640      	mov	r0, r8
 800707c:	a906      	add	r1, sp, #24
 800707e:	f001 fa19 	bl	80084b4 <strtoul>
 8007082:	4602      	mov	r2, r0
 8007084:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007088:	f898 1000 	ldrb.w	r1, [r8]
 800708c:	2945      	cmp	r1, #69	@ 0x45
 800708e:	d111      	bne.n	80070b4 <__strftime.isra.0+0x7c>
 8007090:	f108 0801 	add.w	r8, r8, #1
 8007094:	e010      	b.n	80070b8 <__strftime.isra.0+0x80>
 8007096:	1e69      	subs	r1, r5, #1
 8007098:	42a1      	cmp	r1, r4
 800709a:	f240 815d 	bls.w	8007358 <__strftime.isra.0+0x320>
 800709e:	3201      	adds	r2, #1
 80070a0:	f104 0a01 	add.w	sl, r4, #1
 80070a4:	553b      	strb	r3, [r7, r4]
 80070a6:	4654      	mov	r4, sl
 80070a8:	e7cf      	b.n	800704a <__strftime.isra.0+0x12>
 80070aa:	f102 0802 	add.w	r8, r2, #2
 80070ae:	e7de      	b.n	800706e <__strftime.isra.0+0x36>
 80070b0:	2200      	movs	r2, #0
 80070b2:	e7e9      	b.n	8007088 <__strftime.isra.0+0x50>
 80070b4:	294f      	cmp	r1, #79	@ 0x4f
 80070b6:	d0eb      	beq.n	8007090 <__strftime.isra.0+0x58>
 80070b8:	f898 0000 	ldrb.w	r0, [r8]
 80070bc:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 80070c0:	2955      	cmp	r1, #85	@ 0x55
 80070c2:	f200 8149 	bhi.w	8007358 <__strftime.isra.0+0x320>
 80070c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80070ca:	046a      	.short	0x046a
 80070cc:	01470147 	.word	0x01470147
 80070d0:	01470147 	.word	0x01470147
 80070d4:	01470147 	.word	0x01470147
 80070d8:	01470147 	.word	0x01470147
 80070dc:	01470147 	.word	0x01470147
 80070e0:	01470147 	.word	0x01470147
 80070e4:	01470147 	.word	0x01470147
 80070e8:	01470147 	.word	0x01470147
 80070ec:	01470147 	.word	0x01470147
 80070f0:	01470147 	.word	0x01470147
 80070f4:	01470147 	.word	0x01470147
 80070f8:	01470147 	.word	0x01470147
 80070fc:	01470147 	.word	0x01470147
 8007100:	00750147 	.word	0x00750147
 8007104:	00dc00a3 	.word	0x00dc00a3
 8007108:	01470128 	.word	0x01470128
 800710c:	01cb0159 	.word	0x01cb0159
 8007110:	02590252 	.word	0x02590252
 8007114:	01470147 	.word	0x01470147
 8007118:	02710147 	.word	0x02710147
 800711c:	01470147 	.word	0x01470147
 8007120:	0147027c 	.word	0x0147027c
 8007124:	033302ac 	.word	0x033302ac
 8007128:	036a033d 	.word	0x036a033d
 800712c:	03d80372 	.word	0x03d80372
 8007130:	03ee00d8 	.word	0x03ee00d8
 8007134:	01470440 	.word	0x01470440
 8007138:	01470147 	.word	0x01470147
 800713c:	01470147 	.word	0x01470147
 8007140:	00560147 	.word	0x00560147
 8007144:	00ba008d 	.word	0x00ba008d
 8007148:	011d011d 	.word	0x011d011d
 800714c:	017e0147 	.word	0x017e0147
 8007150:	0147008d 	.word	0x0147008d
 8007154:	0252026a 	.word	0x0252026a
 8007158:	026e0259 	.word	0x026e0259
 800715c:	01470273 	.word	0x01470273
 8007160:	02a5027c 	.word	0x02a5027c
 8007164:	02b500d0 	.word	0x02b500d0
 8007168:	035d0335 	.word	0x035d0335
 800716c:	03cf03a4 	.word	0x03cf03a4
 8007170:	03e000d4 	.word	0x03e000d4
 8007174:	0403      	.short	0x0403
 8007176:	69b3      	ldr	r3, [r6, #24]
 8007178:	4aad      	ldr	r2, [pc, #692]	@ (8007430 <__strftime.isra.0+0x3f8>)
 800717a:	3318      	adds	r3, #24
 800717c:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007180:	4658      	mov	r0, fp
 8007182:	f7f8 ffed 	bl	8000160 <strlen>
 8007186:	f10b 3bff 	add.w	fp, fp, #4294967295
 800718a:	eb04 0a00 	add.w	sl, r4, r0
 800718e:	1e6b      	subs	r3, r5, #1
 8007190:	45a2      	cmp	sl, r4
 8007192:	d107      	bne.n	80071a4 <__strftime.isra.0+0x16c>
 8007194:	f898 3000 	ldrb.w	r3, [r8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8409 	beq.w	80079b0 <__strftime.isra.0+0x978>
 800719e:	f108 0201 	add.w	r2, r8, #1
 80071a2:	e780      	b.n	80070a6 <__strftime.isra.0+0x6e>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	f240 80d7 	bls.w	8007358 <__strftime.isra.0+0x320>
 80071aa:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80071ae:	553a      	strb	r2, [r7, r4]
 80071b0:	3401      	adds	r4, #1
 80071b2:	e7ed      	b.n	8007190 <__strftime.isra.0+0x158>
 80071b4:	69b2      	ldr	r2, [r6, #24]
 80071b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007430 <__strftime.isra.0+0x3f8>)
 80071b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80071bc:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 80071c0:	4658      	mov	r0, fp
 80071c2:	f7f8 ffcd 	bl	8000160 <strlen>
 80071c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071ca:	eb04 0a00 	add.w	sl, r4, r0
 80071ce:	1e6b      	subs	r3, r5, #1
 80071d0:	4554      	cmp	r4, sl
 80071d2:	d0df      	beq.n	8007194 <__strftime.isra.0+0x15c>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	f240 80bf 	bls.w	8007358 <__strftime.isra.0+0x320>
 80071da:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80071de:	553a      	strb	r2, [r7, r4]
 80071e0:	3401      	adds	r4, #1
 80071e2:	e7f5      	b.n	80071d0 <__strftime.isra.0+0x198>
 80071e4:	4b92      	ldr	r3, [pc, #584]	@ (8007430 <__strftime.isra.0+0x3f8>)
 80071e6:	6932      	ldr	r2, [r6, #16]
 80071e8:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80071ec:	4658      	mov	r0, fp
 80071ee:	f7f8 ffb7 	bl	8000160 <strlen>
 80071f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071f6:	eb04 0a00 	add.w	sl, r4, r0
 80071fa:	1e6b      	subs	r3, r5, #1
 80071fc:	45a2      	cmp	sl, r4
 80071fe:	d0c9      	beq.n	8007194 <__strftime.isra.0+0x15c>
 8007200:	42a3      	cmp	r3, r4
 8007202:	f240 80a9 	bls.w	8007358 <__strftime.isra.0+0x320>
 8007206:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 800720a:	553a      	strb	r2, [r7, r4]
 800720c:	3401      	adds	r4, #1
 800720e:	e7f5      	b.n	80071fc <__strftime.isra.0+0x1c4>
 8007210:	6933      	ldr	r3, [r6, #16]
 8007212:	4a87      	ldr	r2, [pc, #540]	@ (8007430 <__strftime.isra.0+0x3f8>)
 8007214:	330c      	adds	r3, #12
 8007216:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 800721a:	4658      	mov	r0, fp
 800721c:	f7f8 ffa0 	bl	8000160 <strlen>
 8007220:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007224:	eb04 0a00 	add.w	sl, r4, r0
 8007228:	1e6b      	subs	r3, r5, #1
 800722a:	45a2      	cmp	sl, r4
 800722c:	d0b2      	beq.n	8007194 <__strftime.isra.0+0x15c>
 800722e:	42a3      	cmp	r3, r4
 8007230:	f240 8092 	bls.w	8007358 <__strftime.isra.0+0x320>
 8007234:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8007238:	553a      	strb	r2, [r7, r4]
 800723a:	3401      	adds	r4, #1
 800723c:	e7f5      	b.n	800722a <__strftime.isra.0+0x1f2>
 800723e:	4b7c      	ldr	r3, [pc, #496]	@ (8007430 <__strftime.isra.0+0x3f8>)
 8007240:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8007244:	4650      	mov	r0, sl
 8007246:	f7f8 ff8b 	bl	8000160 <strlen>
 800724a:	f89a 3000 	ldrb.w	r3, [sl]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8341 	beq.w	80078d6 <__strftime.isra.0+0x89e>
 8007254:	4633      	mov	r3, r6
 8007256:	4652      	mov	r2, sl
 8007258:	1b29      	subs	r1, r5, r4
 800725a:	1938      	adds	r0, r7, r4
 800725c:	f7ff feec 	bl	8007038 <__strftime.isra.0>
 8007260:	2800      	cmp	r0, #0
 8007262:	dd79      	ble.n	8007358 <__strftime.isra.0+0x320>
 8007264:	eb04 0a00 	add.w	sl, r4, r0
 8007268:	e794      	b.n	8007194 <__strftime.isra.0+0x15c>
 800726a:	4b71      	ldr	r3, [pc, #452]	@ (8007430 <__strftime.isra.0+0x3f8>)
 800726c:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 8007270:	e7e8      	b.n	8007244 <__strftime.isra.0+0x20c>
 8007272:	4b6f      	ldr	r3, [pc, #444]	@ (8007430 <__strftime.isra.0+0x3f8>)
 8007274:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8007278:	e7e4      	b.n	8007244 <__strftime.isra.0+0x20c>
 800727a:	4b6d      	ldr	r3, [pc, #436]	@ (8007430 <__strftime.isra.0+0x3f8>)
 800727c:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 8007280:	e7e0      	b.n	8007244 <__strftime.isra.0+0x20c>
 8007282:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8007286:	496b      	ldr	r1, [pc, #428]	@ (8007434 <__strftime.isra.0+0x3fc>)
 8007288:	458a      	cmp	sl, r1
 800728a:	bfac      	ite	ge
 800728c:	f04f 0b00 	movge.w	fp, #0
 8007290:	f04f 0b01 	movlt.w	fp, #1
 8007294:	f1ba 0f00 	cmp.w	sl, #0
 8007298:	db12      	blt.n	80072c0 <__strftime.isra.0+0x288>
 800729a:	2064      	movs	r0, #100	@ 0x64
 800729c:	fb9a f0f0 	sdiv	r0, sl, r0
 80072a0:	3013      	adds	r0, #19
 80072a2:	f1b9 0f00 	cmp.w	r9, #0
 80072a6:	d015      	beq.n	80072d4 <__strftime.isra.0+0x29c>
 80072a8:	2863      	cmp	r0, #99	@ 0x63
 80072aa:	dd28      	ble.n	80072fe <__strftime.isra.0+0x2c6>
 80072ac:	4b62      	ldr	r3, [pc, #392]	@ (8007438 <__strftime.isra.0+0x400>)
 80072ae:	4963      	ldr	r1, [pc, #396]	@ (800743c <__strftime.isra.0+0x404>)
 80072b0:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 80072b4:	bf0c      	ite	eq
 80072b6:	469c      	moveq	ip, r3
 80072b8:	468c      	movne	ip, r1
 80072ba:	f8df e184 	ldr.w	lr, [pc, #388]	@ 8007440 <__strftime.isra.0+0x408>
 80072be:	e00d      	b.n	80072dc <__strftime.isra.0+0x2a4>
 80072c0:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 80072c4:	9203      	str	r2, [sp, #12]
 80072c6:	f000 ff14 	bl	80080f2 <abs>
 80072ca:	2164      	movs	r1, #100	@ 0x64
 80072cc:	9a03      	ldr	r2, [sp, #12]
 80072ce:	fb90 f0f1 	sdiv	r0, r0, r1
 80072d2:	e7e6      	b.n	80072a2 <__strftime.isra.0+0x26a>
 80072d4:	f8df c164 	ldr.w	ip, [pc, #356]	@ 800743c <__strftime.isra.0+0x404>
 80072d8:	f8df e168 	ldr.w	lr, [pc, #360]	@ 8007444 <__strftime.isra.0+0x40c>
 80072dc:	2a02      	cmp	r2, #2
 80072de:	bf2c      	ite	cs
 80072e0:	ebcb 0102 	rsbcs	r1, fp, r2
 80072e4:	f1cb 0102 	rsbcc	r1, fp, #2
 80072e8:	4b57      	ldr	r3, [pc, #348]	@ (8007448 <__strftime.isra.0+0x410>)
 80072ea:	4a52      	ldr	r2, [pc, #328]	@ (8007434 <__strftime.isra.0+0x3fc>)
 80072ec:	9001      	str	r0, [sp, #4]
 80072ee:	4592      	cmp	sl, r2
 80072f0:	bfa8      	it	ge
 80072f2:	4663      	movge	r3, ip
 80072f4:	4672      	mov	r2, lr
 80072f6:	9100      	str	r1, [sp, #0]
 80072f8:	1b29      	subs	r1, r5, r4
 80072fa:	1938      	adds	r0, r7, r4
 80072fc:	e023      	b.n	8007346 <__strftime.isra.0+0x30e>
 80072fe:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 800743c <__strftime.isra.0+0x404>
 8007302:	e7da      	b.n	80072ba <__strftime.isra.0+0x282>
 8007304:	4951      	ldr	r1, [pc, #324]	@ (800744c <__strftime.isra.0+0x414>)
 8007306:	4a52      	ldr	r2, [pc, #328]	@ (8007450 <__strftime.isra.0+0x418>)
 8007308:	68f3      	ldr	r3, [r6, #12]
 800730a:	2864      	cmp	r0, #100	@ 0x64
 800730c:	bf18      	it	ne
 800730e:	460a      	movne	r2, r1
 8007310:	1b29      	subs	r1, r5, r4
 8007312:	1938      	adds	r0, r7, r4
 8007314:	f7ff fcb0 	bl	8006c78 <sniprintf>
 8007318:	e017      	b.n	800734a <__strftime.isra.0+0x312>
 800731a:	6970      	ldr	r0, [r6, #20]
 800731c:	6933      	ldr	r3, [r6, #16]
 800731e:	2800      	cmp	r0, #0
 8007320:	f103 0a01 	add.w	sl, r3, #1
 8007324:	eb07 0b04 	add.w	fp, r7, r4
 8007328:	68f3      	ldr	r3, [r6, #12]
 800732a:	eba5 0904 	sub.w	r9, r5, r4
 800732e:	db19      	blt.n	8007364 <__strftime.isra.0+0x32c>
 8007330:	2264      	movs	r2, #100	@ 0x64
 8007332:	fb90 fcf2 	sdiv	ip, r0, r2
 8007336:	fb02 001c 	mls	r0, r2, ip, r0
 800733a:	e9cd 3000 	strd	r3, r0, [sp]
 800733e:	4649      	mov	r1, r9
 8007340:	4653      	mov	r3, sl
 8007342:	4658      	mov	r0, fp
 8007344:	4a43      	ldr	r2, [pc, #268]	@ (8007454 <__strftime.isra.0+0x41c>)
 8007346:	f7ff fc97 	bl	8006c78 <sniprintf>
 800734a:	2800      	cmp	r0, #0
 800734c:	db04      	blt.n	8007358 <__strftime.isra.0+0x320>
 800734e:	eb00 0a04 	add.w	sl, r0, r4
 8007352:	4555      	cmp	r5, sl
 8007354:	f63f af1e 	bhi.w	8007194 <__strftime.isra.0+0x15c>
 8007358:	f04f 0a00 	mov.w	sl, #0
 800735c:	4650      	mov	r0, sl
 800735e:	b00f      	add	sp, #60	@ 0x3c
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8007368:	9303      	str	r3, [sp, #12]
 800736a:	f000 fec2 	bl	80080f2 <abs>
 800736e:	2264      	movs	r2, #100	@ 0x64
 8007370:	fb90 fcf2 	sdiv	ip, r0, r2
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	fb0c 0012 	mls	r0, ip, r2, r0
 800737a:	e7de      	b.n	800733a <__strftime.isra.0+0x302>
 800737c:	2125      	movs	r1, #37	@ 0x25
 800737e:	f88d 1018 	strb.w	r1, [sp, #24]
 8007382:	f1b9 0f00 	cmp.w	r9, #0
 8007386:	d00b      	beq.n	80073a0 <__strftime.isra.0+0x368>
 8007388:	2a05      	cmp	r2, #5
 800738a:	f88d 9019 	strb.w	r9, [sp, #25]
 800738e:	d817      	bhi.n	80073c0 <__strftime.isra.0+0x388>
 8007390:	f10d 001a 	add.w	r0, sp, #26
 8007394:	4930      	ldr	r1, [pc, #192]	@ (8007458 <__strftime.isra.0+0x420>)
 8007396:	f000 fea4 	bl	80080e2 <strcpy>
 800739a:	4633      	mov	r3, r6
 800739c:	aa06      	add	r2, sp, #24
 800739e:	e75b      	b.n	8007258 <__strftime.isra.0+0x220>
 80073a0:	232b      	movs	r3, #43	@ 0x2b
 80073a2:	f88d 3019 	strb.w	r3, [sp, #25]
 80073a6:	2304      	movs	r3, #4
 80073a8:	211e      	movs	r1, #30
 80073aa:	4a2c      	ldr	r2, [pc, #176]	@ (800745c <__strftime.isra.0+0x424>)
 80073ac:	f10d 001a 	add.w	r0, sp, #26
 80073b0:	f7ff fc62 	bl	8006c78 <sniprintf>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	ddeb      	ble.n	8007390 <__strftime.isra.0+0x358>
 80073b8:	f10d 031a 	add.w	r3, sp, #26
 80073bc:	4418      	add	r0, r3
 80073be:	e7e9      	b.n	8007394 <__strftime.isra.0+0x35c>
 80073c0:	1f93      	subs	r3, r2, #6
 80073c2:	d0e5      	beq.n	8007390 <__strftime.isra.0+0x358>
 80073c4:	e7f0      	b.n	80073a8 <__strftime.isra.0+0x370>
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7ff fde4 	bl	8006f94 <iso_year_adjust>
 80073cc:	4682      	mov	sl, r0
 80073ce:	6970      	ldr	r0, [r6, #20]
 80073d0:	2800      	cmp	r0, #0
 80073d2:	db11      	blt.n	80073f8 <__strftime.isra.0+0x3c0>
 80073d4:	2364      	movs	r3, #100	@ 0x64
 80073d6:	fb90 f2f3 	sdiv	r2, r0, r3
 80073da:	fb03 0012 	mls	r0, r3, r2, r0
 80073de:	2364      	movs	r3, #100	@ 0x64
 80073e0:	4482      	add	sl, r0
 80073e2:	fb9a f2f3 	sdiv	r2, sl, r3
 80073e6:	fb03 aa12 	mls	sl, r3, r2, sl
 80073ea:	449a      	add	sl, r3
 80073ec:	fbba f2f3 	udiv	r2, sl, r3
 80073f0:	fb03 a312 	mls	r3, r3, r2, sl
 80073f4:	4a16      	ldr	r2, [pc, #88]	@ (8007450 <__strftime.isra.0+0x418>)
 80073f6:	e78b      	b.n	8007310 <__strftime.isra.0+0x2d8>
 80073f8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80073fc:	f000 fe79 	bl	80080f2 <abs>
 8007400:	2364      	movs	r3, #100	@ 0x64
 8007402:	fb90 f2f3 	sdiv	r2, r0, r3
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	fb02 0013 	mls	r0, r2, r3, r0
 800740e:	da07      	bge.n	8007420 <__strftime.isra.0+0x3e8>
 8007410:	6972      	ldr	r2, [r6, #20]
 8007412:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 8007416:	429a      	cmp	r2, r3
 8007418:	bfb8      	it	lt
 800741a:	f04f 0a01 	movlt.w	sl, #1
 800741e:	e7de      	b.n	80073de <__strftime.isra.0+0x3a6>
 8007420:	d0dd      	beq.n	80073de <__strftime.isra.0+0x3a6>
 8007422:	6972      	ldr	r2, [r6, #20]
 8007424:	4b03      	ldr	r3, [pc, #12]	@ (8007434 <__strftime.isra.0+0x3fc>)
 8007426:	429a      	cmp	r2, r3
 8007428:	bfb8      	it	lt
 800742a:	f04f 3aff 	movlt.w	sl, #4294967295
 800742e:	e7d6      	b.n	80073de <__strftime.isra.0+0x3a6>
 8007430:	0800a5f8 	.word	0x0800a5f8
 8007434:	fffff894 	.word	0xfffff894
 8007438:	0800a427 	.word	0x0800a427
 800743c:	0800a72f 	.word	0x0800a72f
 8007440:	0800a41f 	.word	0x0800a41f
 8007444:	0800a418 	.word	0x0800a418
 8007448:	0800a877 	.word	0x0800a877
 800744c:	0800a429 	.word	0x0800a429
 8007450:	0800a437 	.word	0x0800a437
 8007454:	0800a42d 	.word	0x0800a42d
 8007458:	0800a440 	.word	0x0800a440
 800745c:	0800a43c 	.word	0x0800a43c
 8007460:	6971      	ldr	r1, [r6, #20]
 8007462:	48bc      	ldr	r0, [pc, #752]	@ (8007754 <__strftime.isra.0+0x71c>)
 8007464:	9205      	str	r2, [sp, #20]
 8007466:	4281      	cmp	r1, r0
 8007468:	bfac      	ite	ge
 800746a:	2300      	movge	r3, #0
 800746c:	2301      	movlt	r3, #1
 800746e:	4630      	mov	r0, r6
 8007470:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8007474:	f7ff fd8e 	bl	8006f94 <iso_year_adjust>
 8007478:	9904      	ldr	r1, [sp, #16]
 800747a:	4682      	mov	sl, r0
 800747c:	2900      	cmp	r1, #0
 800747e:	9a05      	ldr	r2, [sp, #20]
 8007480:	db3a      	blt.n	80074f8 <__strftime.isra.0+0x4c0>
 8007482:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8007486:	fb91 fbfb 	sdiv	fp, r1, fp
 800748a:	f10b 0b13 	add.w	fp, fp, #19
 800748e:	6970      	ldr	r0, [r6, #20]
 8007490:	2800      	cmp	r0, #0
 8007492:	db3e      	blt.n	8007512 <__strftime.isra.0+0x4da>
 8007494:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8007498:	fb90 fefc 	sdiv	lr, r0, ip
 800749c:	f1ba 0f00 	cmp.w	sl, #0
 80074a0:	fb0c 001e 	mls	r0, ip, lr, r0
 80074a4:	da4f      	bge.n	8007546 <__strftime.isra.0+0x50e>
 80074a6:	4482      	add	sl, r0
 80074a8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80074ac:	d157      	bne.n	800755e <__strftime.isra.0+0x526>
 80074ae:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 80074b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074b6:	2164      	movs	r1, #100	@ 0x64
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	fb01 aa0b 	mla	sl, r1, fp, sl
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f040 81f7 	bne.w	80078b2 <__strftime.isra.0+0x87a>
 80074c4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 80074c8:	d104      	bne.n	80074d4 <__strftime.isra.0+0x49c>
 80074ca:	f242 710f 	movw	r1, #9999	@ 0x270f
 80074ce:	458a      	cmp	sl, r1
 80074d0:	f200 8275 	bhi.w	80079be <__strftime.isra.0+0x986>
 80074d4:	a906      	add	r1, sp, #24
 80074d6:	2025      	movs	r0, #37	@ 0x25
 80074d8:	7008      	strb	r0, [r1, #0]
 80074da:	f1b9 0f00 	cmp.w	r9, #0
 80074de:	f040 81f3 	bne.w	80078c8 <__strftime.isra.0+0x890>
 80074e2:	1c48      	adds	r0, r1, #1
 80074e4:	499c      	ldr	r1, [pc, #624]	@ (8007758 <__strftime.isra.0+0x720>)
 80074e6:	9203      	str	r2, [sp, #12]
 80074e8:	f000 fdfb 	bl	80080e2 <strcpy>
 80074ec:	9a03      	ldr	r2, [sp, #12]
 80074ee:	f8cd a000 	str.w	sl, [sp]
 80074f2:	4613      	mov	r3, r2
 80074f4:	aa06      	add	r2, sp, #24
 80074f6:	e098      	b.n	800762a <__strftime.isra.0+0x5f2>
 80074f8:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 80074fc:	9205      	str	r2, [sp, #20]
 80074fe:	9104      	str	r1, [sp, #16]
 8007500:	f000 fdf7 	bl	80080f2 <abs>
 8007504:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8007508:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 800750c:	fb90 fbfc 	sdiv	fp, r0, ip
 8007510:	e7bd      	b.n	800748e <__strftime.isra.0+0x456>
 8007512:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8007516:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800751a:	f000 fdea 	bl	80080f2 <abs>
 800751e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8007522:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8007526:	fb90 fefc 	sdiv	lr, r0, ip
 800752a:	f1ba 0f00 	cmp.w	sl, #0
 800752e:	fb0e 001c 	mls	r0, lr, ip, r0
 8007532:	da08      	bge.n	8007546 <__strftime.isra.0+0x50e>
 8007534:	6971      	ldr	r1, [r6, #20]
 8007536:	4b89      	ldr	r3, [pc, #548]	@ (800775c <__strftime.isra.0+0x724>)
 8007538:	4299      	cmp	r1, r3
 800753a:	dab4      	bge.n	80074a6 <__strftime.isra.0+0x46e>
 800753c:	f04f 0a01 	mov.w	sl, #1
 8007540:	f8cd a00c 	str.w	sl, [sp, #12]
 8007544:	e7af      	b.n	80074a6 <__strftime.isra.0+0x46e>
 8007546:	f1ba 0f00 	cmp.w	sl, #0
 800754a:	d0ac      	beq.n	80074a6 <__strftime.isra.0+0x46e>
 800754c:	4b81      	ldr	r3, [pc, #516]	@ (8007754 <__strftime.isra.0+0x71c>)
 800754e:	4299      	cmp	r1, r3
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	bfbc      	itt	lt
 8007554:	2301      	movlt	r3, #1
 8007556:	f04f 3aff 	movlt.w	sl, #4294967295
 800755a:	9303      	str	r3, [sp, #12]
 800755c:	e7a3      	b.n	80074a6 <__strftime.isra.0+0x46e>
 800755e:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8007562:	bf04      	itt	eq
 8007564:	f04f 0a00 	moveq.w	sl, #0
 8007568:	f10b 0b01 	addeq.w	fp, fp, #1
 800756c:	e7a3      	b.n	80074b6 <__strftime.isra.0+0x47e>
 800756e:	497c      	ldr	r1, [pc, #496]	@ (8007760 <__strftime.isra.0+0x728>)
 8007570:	4a7c      	ldr	r2, [pc, #496]	@ (8007764 <__strftime.isra.0+0x72c>)
 8007572:	68b3      	ldr	r3, [r6, #8]
 8007574:	286b      	cmp	r0, #107	@ 0x6b
 8007576:	bf18      	it	ne
 8007578:	460a      	movne	r2, r1
 800757a:	e6c9      	b.n	8007310 <__strftime.isra.0+0x2d8>
 800757c:	68b3      	ldr	r3, [r6, #8]
 800757e:	b163      	cbz	r3, 800759a <__strftime.isra.0+0x562>
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d004      	beq.n	800758e <__strftime.isra.0+0x556>
 8007584:	210c      	movs	r1, #12
 8007586:	fb93 f2f1 	sdiv	r2, r3, r1
 800758a:	fb01 3312 	mls	r3, r1, r2, r3
 800758e:	4975      	ldr	r1, [pc, #468]	@ (8007764 <__strftime.isra.0+0x72c>)
 8007590:	4a73      	ldr	r2, [pc, #460]	@ (8007760 <__strftime.isra.0+0x728>)
 8007592:	2849      	cmp	r0, #73	@ 0x49
 8007594:	bf18      	it	ne
 8007596:	460a      	movne	r2, r1
 8007598:	e6ba      	b.n	8007310 <__strftime.isra.0+0x2d8>
 800759a:	230c      	movs	r3, #12
 800759c:	e7f7      	b.n	800758e <__strftime.isra.0+0x556>
 800759e:	69f3      	ldr	r3, [r6, #28]
 80075a0:	4a71      	ldr	r2, [pc, #452]	@ (8007768 <__strftime.isra.0+0x730>)
 80075a2:	3301      	adds	r3, #1
 80075a4:	e6b4      	b.n	8007310 <__strftime.isra.0+0x2d8>
 80075a6:	6933      	ldr	r3, [r6, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	e723      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 80075ac:	6873      	ldr	r3, [r6, #4]
 80075ae:	e721      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 80075b0:	1e6b      	subs	r3, r5, #1
 80075b2:	429c      	cmp	r4, r3
 80075b4:	f4bf aed0 	bcs.w	8007358 <__strftime.isra.0+0x320>
 80075b8:	230a      	movs	r3, #10
 80075ba:	f104 0a01 	add.w	sl, r4, #1
 80075be:	553b      	strb	r3, [r7, r4]
 80075c0:	e5e8      	b.n	8007194 <__strftime.isra.0+0x15c>
 80075c2:	68b3      	ldr	r3, [r6, #8]
 80075c4:	2b0b      	cmp	r3, #11
 80075c6:	bfd4      	ite	le
 80075c8:	2200      	movle	r2, #0
 80075ca:	2201      	movgt	r2, #1
 80075cc:	4b67      	ldr	r3, [pc, #412]	@ (800776c <__strftime.isra.0+0x734>)
 80075ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80075d2:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 80075d6:	4658      	mov	r0, fp
 80075d8:	f7f8 fdc2 	bl	8000160 <strlen>
 80075dc:	eb04 0a00 	add.w	sl, r4, r0
 80075e0:	4863      	ldr	r0, [pc, #396]	@ (8007770 <__strftime.isra.0+0x738>)
 80075e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075e6:	1e69      	subs	r1, r5, #1
 80075e8:	45a2      	cmp	sl, r4
 80075ea:	f43f add3 	beq.w	8007194 <__strftime.isra.0+0x15c>
 80075ee:	42a1      	cmp	r1, r4
 80075f0:	f67f aeb2 	bls.w	8007358 <__strftime.isra.0+0x320>
 80075f4:	f898 2000 	ldrb.w	r2, [r8]
 80075f8:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80075fc:	2a50      	cmp	r2, #80	@ 0x50
 80075fe:	d106      	bne.n	800760e <__strftime.isra.0+0x5d6>
 8007600:	5cc2      	ldrb	r2, [r0, r3]
 8007602:	f002 0203 	and.w	r2, r2, #3
 8007606:	2a01      	cmp	r2, #1
 8007608:	bf08      	it	eq
 800760a:	3320      	addeq	r3, #32
 800760c:	b2db      	uxtb	r3, r3
 800760e:	553b      	strb	r3, [r7, r4]
 8007610:	3401      	adds	r4, #1
 8007612:	e7e9      	b.n	80075e8 <__strftime.isra.0+0x5b0>
 8007614:	2203      	movs	r2, #3
 8007616:	6933      	ldr	r3, [r6, #16]
 8007618:	fb93 f3f2 	sdiv	r3, r3, r2
 800761c:	4a55      	ldr	r2, [pc, #340]	@ (8007774 <__strftime.isra.0+0x73c>)
 800761e:	3301      	adds	r3, #1
 8007620:	e676      	b.n	8007310 <__strftime.isra.0+0x2d8>
 8007622:	6873      	ldr	r3, [r6, #4]
 8007624:	4a54      	ldr	r2, [pc, #336]	@ (8007778 <__strftime.isra.0+0x740>)
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68b3      	ldr	r3, [r6, #8]
 800762a:	1b29      	subs	r1, r5, r4
 800762c:	1938      	adds	r0, r7, r4
 800762e:	f7ff fb23 	bl	8006c78 <sniprintf>
 8007632:	e68a      	b.n	800734a <__strftime.isra.0+0x312>
 8007634:	6a33      	ldr	r3, [r6, #32]
 8007636:	2b00      	cmp	r3, #0
 8007638:	db77      	blt.n	800772a <__strftime.isra.0+0x6f2>
 800763a:	f000 fa95 	bl	8007b68 <__tz_lock>
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	b90b      	cbnz	r3, 8007646 <__strftime.isra.0+0x60e>
 8007642:	f000 fa9d 	bl	8007b80 <_tzset_unlocked>
 8007646:	f001 fb39 	bl	8008cbc <__gettzinfo>
 800764a:	6a33      	ldr	r3, [r6, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfd4      	ite	le
 8007650:	2200      	movle	r2, #0
 8007652:	2201      	movgt	r2, #1
 8007654:	2328      	movs	r3, #40	@ 0x28
 8007656:	fb02 3303 	mla	r3, r2, r3, r3
 800765a:	58c3      	ldr	r3, [r0, r3]
 800765c:	f1c3 0a00 	rsb	sl, r3, #0
 8007660:	f000 fa88 	bl	8007b74 <__tz_unlock>
 8007664:	2301      	movs	r3, #1
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	6972      	ldr	r2, [r6, #20]
 800766a:	1b29      	subs	r1, r5, r4
 800766c:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 8007670:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8007674:	f16c 0c00 	sbc.w	ip, ip, #0
 8007678:	f1bc 0f00 	cmp.w	ip, #0
 800767c:	eb07 0004 	add.w	r0, r7, r4
 8007680:	da02      	bge.n	8007688 <__strftime.isra.0+0x650>
 8007682:	3303      	adds	r3, #3
 8007684:	f14c 0c00 	adc.w	ip, ip, #0
 8007688:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800768c:	f102 3eff 	add.w	lr, r2, #4294967295
 8007690:	fb9e fefb 	sdiv	lr, lr, fp
 8007694:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800769e:	ebb3 030e 	subs.w	r3, r3, lr
 80076a2:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80076a6:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80076aa:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 80076ae:	fb9e fefb 	sdiv	lr, lr, fp
 80076b2:	eb13 030e 	adds.w	r3, r3, lr
 80076b6:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 80076ba:	f240 1e6d 	movw	lr, #365	@ 0x16d
 80076be:	3a46      	subs	r2, #70	@ 0x46
 80076c0:	fb0e f202 	mul.w	r2, lr, r2
 80076c4:	f04f 0e18 	mov.w	lr, #24
 80076c8:	189b      	adds	r3, r3, r2
 80076ca:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 80076ce:	69f2      	ldr	r2, [r6, #28]
 80076d0:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80076d4:	189b      	adds	r3, r3, r2
 80076d6:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 80076da:	fba3 230e 	umull	r2, r3, r3, lr
 80076de:	fb0e 330c 	mla	r3, lr, ip, r3
 80076e2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80076e6:	eb12 020c 	adds.w	r2, r2, ip
 80076ea:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80076ee:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 80076f2:	fba2 2e0c 	umull	r2, lr, r2, ip
 80076f6:	fb0c ee03 	mla	lr, ip, r3, lr
 80076fa:	eb12 030b 	adds.w	r3, r2, fp
 80076fe:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 8007702:	fba3 e30c 	umull	lr, r3, r3, ip
 8007706:	fb0c 3302 	mla	r3, ip, r2, r3
 800770a:	f8d6 c000 	ldr.w	ip, [r6]
 800770e:	eb1e 020c 	adds.w	r2, lr, ip
 8007712:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8007716:	ebb2 020a 	subs.w	r2, r2, sl
 800771a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 800771e:	e9cd 2300 	strd	r2, r3, [sp]
 8007722:	4a16      	ldr	r2, [pc, #88]	@ (800777c <__strftime.isra.0+0x744>)
 8007724:	f7ff faa8 	bl	8006c78 <sniprintf>
 8007728:	e60f      	b.n	800734a <__strftime.isra.0+0x312>
 800772a:	f04f 0a00 	mov.w	sl, #0
 800772e:	e79b      	b.n	8007668 <__strftime.isra.0+0x630>
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	e65f      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 8007734:	1e6b      	subs	r3, r5, #1
 8007736:	429c      	cmp	r4, r3
 8007738:	f4bf ae0e 	bcs.w	8007358 <__strftime.isra.0+0x320>
 800773c:	2309      	movs	r3, #9
 800773e:	f104 0a01 	add.w	sl, r4, #1
 8007742:	e73c      	b.n	80075be <__strftime.isra.0+0x586>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	4a0e      	ldr	r2, [pc, #56]	@ (8007780 <__strftime.isra.0+0x748>)
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	6873      	ldr	r3, [r6, #4]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	68b3      	ldr	r3, [r6, #8]
 8007750:	e5d2      	b.n	80072f8 <__strftime.isra.0+0x2c0>
 8007752:	bf00      	nop
 8007754:	fffff894 	.word	0xfffff894
 8007758:	0800a448 	.word	0x0800a448
 800775c:	fffff895 	.word	0xfffff895
 8007760:	0800a437 	.word	0x0800a437
 8007764:	0800a429 	.word	0x0800a429
 8007768:	0800a44c 	.word	0x0800a44c
 800776c:	0800a5f8 	.word	0x0800a5f8
 8007770:	0800a731 	.word	0x0800a731
 8007774:	0800a451 	.word	0x0800a451
 8007778:	0800a460 	.word	0x0800a460
 800777c:	0800a456 	.word	0x0800a456
 8007780:	0800a45b 	.word	0x0800a45b
 8007784:	1e6b      	subs	r3, r5, #1
 8007786:	429c      	cmp	r4, r3
 8007788:	f4bf ade6 	bcs.w	8007358 <__strftime.isra.0+0x320>
 800778c:	69b3      	ldr	r3, [r6, #24]
 800778e:	b91b      	cbnz	r3, 8007798 <__strftime.isra.0+0x760>
 8007790:	2337      	movs	r3, #55	@ 0x37
 8007792:	f104 0a01 	add.w	sl, r4, #1
 8007796:	e712      	b.n	80075be <__strftime.isra.0+0x586>
 8007798:	3330      	adds	r3, #48	@ 0x30
 800779a:	b2db      	uxtb	r3, r3
 800779c:	e7f9      	b.n	8007792 <__strftime.isra.0+0x75a>
 800779e:	69f3      	ldr	r3, [r6, #28]
 80077a0:	69b2      	ldr	r2, [r6, #24]
 80077a2:	3307      	adds	r3, #7
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	2207      	movs	r2, #7
 80077a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ac:	e622      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff fbf0 	bl	8006f94 <iso_year_adjust>
 80077b4:	69b2      	ldr	r2, [r6, #24]
 80077b6:	b132      	cbz	r2, 80077c6 <__strftime.isra.0+0x78e>
 80077b8:	3a01      	subs	r2, #1
 80077ba:	2800      	cmp	r0, #0
 80077bc:	69f3      	ldr	r3, [r6, #28]
 80077be:	dc26      	bgt.n	800780e <__strftime.isra.0+0x7d6>
 80077c0:	d103      	bne.n	80077ca <__strftime.isra.0+0x792>
 80077c2:	330a      	adds	r3, #10
 80077c4:	e7ee      	b.n	80077a4 <__strftime.isra.0+0x76c>
 80077c6:	2206      	movs	r2, #6
 80077c8:	e7f7      	b.n	80077ba <__strftime.isra.0+0x782>
 80077ca:	1ad2      	subs	r2, r2, r3
 80077cc:	6973      	ldr	r3, [r6, #20]
 80077ce:	f240 716b 	movw	r1, #1899	@ 0x76b
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfa8      	it	ge
 80077d6:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 80077da:	440b      	add	r3, r1
 80077dc:	0799      	lsls	r1, r3, #30
 80077de:	d105      	bne.n	80077ec <__strftime.isra.0+0x7b4>
 80077e0:	2064      	movs	r0, #100	@ 0x64
 80077e2:	fb93 f1f0 	sdiv	r1, r3, r0
 80077e6:	fb00 3111 	mls	r1, r0, r1, r3
 80077ea:	b971      	cbnz	r1, 800780a <__strftime.isra.0+0x7d2>
 80077ec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80077f0:	fb93 f0f1 	sdiv	r0, r3, r1
 80077f4:	fb01 3310 	mls	r3, r1, r0, r3
 80077f8:	fab3 f383 	clz	r3, r3
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	2a04      	cmp	r2, #4
 8007802:	bfcc      	ite	gt
 8007804:	2334      	movgt	r3, #52	@ 0x34
 8007806:	2335      	movle	r3, #53	@ 0x35
 8007808:	e5f4      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 800780a:	2301      	movs	r3, #1
 800780c:	e7f7      	b.n	80077fe <__strftime.isra.0+0x7c6>
 800780e:	2301      	movs	r3, #1
 8007810:	e5f0      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 8007812:	496c      	ldr	r1, [pc, #432]	@ (80079c4 <__strftime.isra.0+0x98c>)
 8007814:	a806      	add	r0, sp, #24
 8007816:	9203      	str	r2, [sp, #12]
 8007818:	f000 fc63 	bl	80080e2 <strcpy>
 800781c:	a806      	add	r0, sp, #24
 800781e:	f7f8 fc9f 	bl	8000160 <strlen>
 8007822:	ab06      	add	r3, sp, #24
 8007824:	eb03 0a00 	add.w	sl, r3, r0
 8007828:	f10a 0a01 	add.w	sl, sl, #1
 800782c:	46d3      	mov	fp, sl
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	d009      	beq.n	8007848 <__strftime.isra.0+0x810>
 8007834:	9a03      	ldr	r2, [sp, #12]
 8007836:	f803 9000 	strb.w	r9, [r3, r0]
 800783a:	2a05      	cmp	r2, #5
 800783c:	d901      	bls.n	8007842 <__strftime.isra.0+0x80a>
 800783e:	1f93      	subs	r3, r2, #6
 8007840:	d106      	bne.n	8007850 <__strftime.isra.0+0x818>
 8007842:	4658      	mov	r0, fp
 8007844:	4960      	ldr	r1, [pc, #384]	@ (80079c8 <__strftime.isra.0+0x990>)
 8007846:	e5a6      	b.n	8007396 <__strftime.isra.0+0x35e>
 8007848:	232b      	movs	r3, #43	@ 0x2b
 800784a:	aa06      	add	r2, sp, #24
 800784c:	5413      	strb	r3, [r2, r0]
 800784e:	2304      	movs	r3, #4
 8007850:	a90e      	add	r1, sp, #56	@ 0x38
 8007852:	4650      	mov	r0, sl
 8007854:	4a5d      	ldr	r2, [pc, #372]	@ (80079cc <__strftime.isra.0+0x994>)
 8007856:	eba1 010a 	sub.w	r1, r1, sl
 800785a:	f7ff fa0d 	bl	8006c78 <sniprintf>
 800785e:	2800      	cmp	r0, #0
 8007860:	bfc8      	it	gt
 8007862:	eb0a 0b00 	addgt.w	fp, sl, r0
 8007866:	e7ec      	b.n	8007842 <__strftime.isra.0+0x80a>
 8007868:	1e6b      	subs	r3, r5, #1
 800786a:	429c      	cmp	r4, r3
 800786c:	f4bf ad74 	bcs.w	8007358 <__strftime.isra.0+0x320>
 8007870:	69b3      	ldr	r3, [r6, #24]
 8007872:	f104 0a01 	add.w	sl, r4, #1
 8007876:	3330      	adds	r3, #48	@ 0x30
 8007878:	e6a1      	b.n	80075be <__strftime.isra.0+0x586>
 800787a:	69b2      	ldr	r2, [r6, #24]
 800787c:	b11a      	cbz	r2, 8007886 <__strftime.isra.0+0x84e>
 800787e:	3a01      	subs	r2, #1
 8007880:	69f3      	ldr	r3, [r6, #28]
 8007882:	3307      	adds	r3, #7
 8007884:	e78e      	b.n	80077a4 <__strftime.isra.0+0x76c>
 8007886:	2206      	movs	r2, #6
 8007888:	e7fa      	b.n	8007880 <__strftime.isra.0+0x848>
 800788a:	6970      	ldr	r0, [r6, #20]
 800788c:	2800      	cmp	r0, #0
 800788e:	db05      	blt.n	800789c <__strftime.isra.0+0x864>
 8007890:	2364      	movs	r3, #100	@ 0x64
 8007892:	fb90 f2f3 	sdiv	r2, r0, r3
 8007896:	fb02 0313 	mls	r3, r2, r3, r0
 800789a:	e5ab      	b.n	80073f4 <__strftime.isra.0+0x3bc>
 800789c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80078a0:	f000 fc27 	bl	80080f2 <abs>
 80078a4:	e7f4      	b.n	8007890 <__strftime.isra.0+0x858>
 80078a6:	6971      	ldr	r1, [r6, #20]
 80078a8:	4849      	ldr	r0, [pc, #292]	@ (80079d0 <__strftime.isra.0+0x998>)
 80078aa:	4281      	cmp	r1, r0
 80078ac:	da09      	bge.n	80078c2 <__strftime.isra.0+0x88a>
 80078ae:	eba0 0a01 	sub.w	sl, r0, r1
 80078b2:	212d      	movs	r1, #45	@ 0x2d
 80078b4:	f88d 1018 	strb.w	r1, [sp, #24]
 80078b8:	b102      	cbz	r2, 80078bc <__strftime.isra.0+0x884>
 80078ba:	3a01      	subs	r2, #1
 80078bc:	f10d 0119 	add.w	r1, sp, #25
 80078c0:	e609      	b.n	80074d6 <__strftime.isra.0+0x49e>
 80078c2:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 80078c6:	e5fd      	b.n	80074c4 <__strftime.isra.0+0x48c>
 80078c8:	2330      	movs	r3, #48	@ 0x30
 80078ca:	1c88      	adds	r0, r1, #2
 80078cc:	704b      	strb	r3, [r1, #1]
 80078ce:	e609      	b.n	80074e4 <__strftime.isra.0+0x4ac>
 80078d0:	6a33      	ldr	r3, [r6, #32]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da01      	bge.n	80078da <__strftime.isra.0+0x8a2>
 80078d6:	46a2      	mov	sl, r4
 80078d8:	e45c      	b.n	8007194 <__strftime.isra.0+0x15c>
 80078da:	f000 f945 	bl	8007b68 <__tz_lock>
 80078de:	9b02      	ldr	r3, [sp, #8]
 80078e0:	b90b      	cbnz	r3, 80078e6 <__strftime.isra.0+0x8ae>
 80078e2:	f000 f94d 	bl	8007b80 <_tzset_unlocked>
 80078e6:	f001 f9e9 	bl	8008cbc <__gettzinfo>
 80078ea:	6a33      	ldr	r3, [r6, #32]
 80078ec:	eb07 0a04 	add.w	sl, r7, r4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfd4      	ite	le
 80078f4:	2200      	movle	r2, #0
 80078f6:	2201      	movgt	r2, #1
 80078f8:	2328      	movs	r3, #40	@ 0x28
 80078fa:	fb02 3303 	mla	r3, r2, r3, r3
 80078fe:	58c3      	ldr	r3, [r0, r3]
 8007900:	eba5 0b04 	sub.w	fp, r5, r4
 8007904:	f1c3 0900 	rsb	r9, r3, #0
 8007908:	f000 f934 	bl	8007b74 <__tz_unlock>
 800790c:	233c      	movs	r3, #60	@ 0x3c
 800790e:	fb99 f0f3 	sdiv	r0, r9, r3
 8007912:	f000 fc9c 	bl	800824e <labs>
 8007916:	233c      	movs	r3, #60	@ 0x3c
 8007918:	fb90 f2f3 	sdiv	r2, r0, r3
 800791c:	fb02 0013 	mls	r0, r2, r3, r0
 8007920:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007924:	9000      	str	r0, [sp, #0]
 8007926:	fb99 f3f3 	sdiv	r3, r9, r3
 800792a:	4659      	mov	r1, fp
 800792c:	4650      	mov	r0, sl
 800792e:	4a29      	ldr	r2, [pc, #164]	@ (80079d4 <__strftime.isra.0+0x99c>)
 8007930:	f7ff f9a2 	bl	8006c78 <sniprintf>
 8007934:	2800      	cmp	r0, #0
 8007936:	f6ff ad0f 	blt.w	8007358 <__strftime.isra.0+0x320>
 800793a:	eb00 0a04 	add.w	sl, r0, r4
 800793e:	4555      	cmp	r5, sl
 8007940:	f67f ad0a 	bls.w	8007358 <__strftime.isra.0+0x320>
 8007944:	2301      	movs	r3, #1
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	e424      	b.n	8007194 <__strftime.isra.0+0x15c>
 800794a:	6a33      	ldr	r3, [r6, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dbc2      	blt.n	80078d6 <__strftime.isra.0+0x89e>
 8007950:	f000 f90a 	bl	8007b68 <__tz_lock>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	b90b      	cbnz	r3, 800795c <__strftime.isra.0+0x924>
 8007958:	f000 f912 	bl	8007b80 <_tzset_unlocked>
 800795c:	6a33      	ldr	r3, [r6, #32]
 800795e:	4a1e      	ldr	r2, [pc, #120]	@ (80079d8 <__strftime.isra.0+0x9a0>)
 8007960:	2b00      	cmp	r3, #0
 8007962:	bfd4      	ite	le
 8007964:	2300      	movle	r3, #0
 8007966:	2301      	movgt	r3, #1
 8007968:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800796c:	46a2      	mov	sl, r4
 800796e:	4648      	mov	r0, r9
 8007970:	f7f8 fbf6 	bl	8000160 <strlen>
 8007974:	f109 39ff 	add.w	r9, r9, #4294967295
 8007978:	4420      	add	r0, r4
 800797a:	1e6b      	subs	r3, r5, #1
 800797c:	4550      	cmp	r0, sl
 800797e:	d102      	bne.n	8007986 <__strftime.isra.0+0x94e>
 8007980:	f000 f8f8 	bl	8007b74 <__tz_unlock>
 8007984:	e7de      	b.n	8007944 <__strftime.isra.0+0x90c>
 8007986:	4553      	cmp	r3, sl
 8007988:	d906      	bls.n	8007998 <__strftime.isra.0+0x960>
 800798a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800798e:	f807 200a 	strb.w	r2, [r7, sl]
 8007992:	f10a 0a01 	add.w	sl, sl, #1
 8007996:	e7f1      	b.n	800797c <__strftime.isra.0+0x944>
 8007998:	f000 f8ec 	bl	8007b74 <__tz_unlock>
 800799c:	e4dc      	b.n	8007358 <__strftime.isra.0+0x320>
 800799e:	1e6b      	subs	r3, r5, #1
 80079a0:	429c      	cmp	r4, r3
 80079a2:	f4bf acd9 	bcs.w	8007358 <__strftime.isra.0+0x320>
 80079a6:	2325      	movs	r3, #37	@ 0x25
 80079a8:	f104 0a01 	add.w	sl, r4, #1
 80079ac:	e607      	b.n	80075be <__strftime.isra.0+0x586>
 80079ae:	46a2      	mov	sl, r4
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	f43f acd3 	beq.w	800735c <__strftime.isra.0+0x324>
 80079b6:	2300      	movs	r3, #0
 80079b8:	f807 300a 	strb.w	r3, [r7, sl]
 80079bc:	e4ce      	b.n	800735c <__strftime.isra.0+0x324>
 80079be:	4649      	mov	r1, r9
 80079c0:	e778      	b.n	80078b4 <__strftime.isra.0+0x87c>
 80079c2:	bf00      	nop
 80079c4:	0800a46a 	.word	0x0800a46a
 80079c8:	0800a5c8 	.word	0x0800a5c8
 80079cc:	0800a43c 	.word	0x0800a43c
 80079d0:	fffff894 	.word	0xfffff894
 80079d4:	0800a472 	.word	0x0800a472
 80079d8:	20000034 	.word	0x20000034

080079dc <strftime>:
 80079dc:	f7ff bb2c 	b.w	8007038 <__strftime.isra.0>

080079e0 <time>:
 80079e0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80079e2:	f04f 36ff 	mov.w	r6, #4294967295
 80079e6:	f04f 37ff 	mov.w	r7, #4294967295
 80079ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <time+0x34>)
 80079ec:	4604      	mov	r4, r0
 80079ee:	2200      	movs	r2, #0
 80079f0:	4669      	mov	r1, sp
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	e9cd 6700 	strd	r6, r7, [sp]
 80079f8:	f000 fafc 	bl	8007ff4 <_gettimeofday_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	da01      	bge.n	8007a04 <time+0x24>
 8007a00:	e9cd 6700 	strd	r6, r7, [sp]
 8007a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a08:	b10c      	cbz	r4, 8007a0e <time+0x2e>
 8007a0a:	e9c4 0100 	strd	r0, r1, [r4]
 8007a0e:	b004      	add	sp, #16
 8007a10:	bdd0      	pop	{r4, r6, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000003c 	.word	0x2000003c

08007a18 <__tzcalc_limits>:
 8007a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	f001 f94d 	bl	8008cbc <__gettzinfo>
 8007a22:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8007a26:	429c      	cmp	r4, r3
 8007a28:	f340 8098 	ble.w	8007b5c <__tzcalc_limits+0x144>
 8007a2c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8007a30:	f240 126d 	movw	r2, #365	@ 0x16d
 8007a34:	19e5      	adds	r5, r4, r7
 8007a36:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8007a3a:	10ad      	asrs	r5, r5, #2
 8007a3c:	fb02 5503 	mla	r5, r2, r3, r5
 8007a40:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8007a44:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8007a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a4c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8007a50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007a54:	441d      	add	r5, r3
 8007a56:	eb04 030c 	add.w	r3, r4, ip
 8007a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5e:	4601      	mov	r1, r0
 8007a60:	4f3f      	ldr	r7, [pc, #252]	@ (8007b60 <__tzcalc_limits+0x148>)
 8007a62:	6044      	str	r4, [r0, #4]
 8007a64:	441d      	add	r5, r3
 8007a66:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8007a6a:	7a0b      	ldrb	r3, [r1, #8]
 8007a6c:	694a      	ldr	r2, [r1, #20]
 8007a6e:	2b4a      	cmp	r3, #74	@ 0x4a
 8007a70:	d133      	bne.n	8007ada <__tzcalc_limits+0xc2>
 8007a72:	07a6      	lsls	r6, r4, #30
 8007a74:	eb05 0302 	add.w	r3, r5, r2
 8007a78:	d106      	bne.n	8007a88 <__tzcalc_limits+0x70>
 8007a7a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8007a7e:	fb94 f6fe 	sdiv	r6, r4, lr
 8007a82:	fb0e 4616 	mls	r6, lr, r6, r4
 8007a86:	b936      	cbnz	r6, 8007a96 <__tzcalc_limits+0x7e>
 8007a88:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8007a8c:	fb94 f6fe 	sdiv	r6, r4, lr
 8007a90:	fb0e 4616 	mls	r6, lr, r6, r4
 8007a94:	b9fe      	cbnz	r6, 8007ad6 <__tzcalc_limits+0xbe>
 8007a96:	2a3b      	cmp	r2, #59	@ 0x3b
 8007a98:	bfd4      	ite	le
 8007a9a:	2200      	movle	r2, #0
 8007a9c:	2201      	movgt	r2, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	698a      	ldr	r2, [r1, #24]
 8007aa4:	17d6      	asrs	r6, r2, #31
 8007aa6:	fbc3 2607 	smlal	r2, r6, r3, r7
 8007aaa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8007aac:	18d2      	adds	r2, r2, r3
 8007aae:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8007ab2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8007ab6:	3128      	adds	r1, #40	@ 0x28
 8007ab8:	458c      	cmp	ip, r1
 8007aba:	d1d6      	bne.n	8007a6a <__tzcalc_limits+0x52>
 8007abc:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8007ac0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8007ac4:	428c      	cmp	r4, r1
 8007ac6:	4193      	sbcs	r3, r2
 8007ac8:	bfb4      	ite	lt
 8007aca:	2301      	movlt	r3, #1
 8007acc:	2300      	movge	r3, #0
 8007ace:	6003      	str	r3, [r0, #0]
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	e7e1      	b.n	8007a9e <__tzcalc_limits+0x86>
 8007ada:	2b44      	cmp	r3, #68	@ 0x44
 8007adc:	d101      	bne.n	8007ae2 <__tzcalc_limits+0xca>
 8007ade:	18ab      	adds	r3, r5, r2
 8007ae0:	e7df      	b.n	8007aa2 <__tzcalc_limits+0x8a>
 8007ae2:	07a3      	lsls	r3, r4, #30
 8007ae4:	d105      	bne.n	8007af2 <__tzcalc_limits+0xda>
 8007ae6:	2664      	movs	r6, #100	@ 0x64
 8007ae8:	fb94 f3f6 	sdiv	r3, r4, r6
 8007aec:	fb06 4313 	mls	r3, r6, r3, r4
 8007af0:	bb73      	cbnz	r3, 8007b50 <__tzcalc_limits+0x138>
 8007af2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007af6:	fb94 f6f3 	sdiv	r6, r4, r3
 8007afa:	fb03 4616 	mls	r6, r3, r6, r4
 8007afe:	fab6 f686 	clz	r6, r6
 8007b02:	0976      	lsrs	r6, r6, #5
 8007b04:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8007b08:	462b      	mov	r3, r5
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	f8df e054 	ldr.w	lr, [pc, #84]	@ 8007b64 <__tzcalc_limits+0x14c>
 8007b12:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8007b16:	fb0a e606 	mla	r6, sl, r6, lr
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	45c1      	cmp	r9, r8
 8007b20:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8007b24:	dc16      	bgt.n	8007b54 <__tzcalc_limits+0x13c>
 8007b26:	2607      	movs	r6, #7
 8007b28:	f103 0804 	add.w	r8, r3, #4
 8007b2c:	fb98 f6f6 	sdiv	r6, r8, r6
 8007b30:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007b34:	eba8 0606 	sub.w	r6, r8, r6
 8007b38:	1b92      	subs	r2, r2, r6
 8007b3a:	690e      	ldr	r6, [r1, #16]
 8007b3c:	bf48      	it	mi
 8007b3e:	3207      	addmi	r2, #7
 8007b40:	3e01      	subs	r6, #1
 8007b42:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007b46:	4432      	add	r2, r6
 8007b48:	4572      	cmp	r2, lr
 8007b4a:	da05      	bge.n	8007b58 <__tzcalc_limits+0x140>
 8007b4c:	4413      	add	r3, r2
 8007b4e:	e7a8      	b.n	8007aa2 <__tzcalc_limits+0x8a>
 8007b50:	2601      	movs	r6, #1
 8007b52:	e7d7      	b.n	8007b04 <__tzcalc_limits+0xec>
 8007b54:	4473      	add	r3, lr
 8007b56:	e7e0      	b.n	8007b1a <__tzcalc_limits+0x102>
 8007b58:	3a07      	subs	r2, #7
 8007b5a:	e7f5      	b.n	8007b48 <__tzcalc_limits+0x130>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e7b8      	b.n	8007ad2 <__tzcalc_limits+0xba>
 8007b60:	00015180 	.word	0x00015180
 8007b64:	0800a3b4 	.word	0x0800a3b4

08007b68 <__tz_lock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	@ (8007b70 <__tz_lock+0x8>)
 8007b6a:	f000 bab6 	b.w	80080da <__retarget_lock_acquire>
 8007b6e:	bf00      	nop
 8007b70:	20001538 	.word	0x20001538

08007b74 <__tz_unlock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	@ (8007b7c <__tz_unlock+0x8>)
 8007b76:	f000 bab2 	b.w	80080de <__retarget_lock_release>
 8007b7a:	bf00      	nop
 8007b7c:	20001538 	.word	0x20001538

08007b80 <_tzset_unlocked>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	@ (8007b88 <_tzset_unlocked+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	f000 b802 	b.w	8007b8c <_tzset_unlocked_r>
 8007b88:	2000003c 	.word	0x2000003c

08007b8c <_tzset_unlocked_r>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	b08d      	sub	sp, #52	@ 0x34
 8007b92:	4607      	mov	r7, r0
 8007b94:	f001 f892 	bl	8008cbc <__gettzinfo>
 8007b98:	496d      	ldr	r1, [pc, #436]	@ (8007d50 <_tzset_unlocked_r+0x1c4>)
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f000 fb4f 	bl	8008240 <_getenv_r>
 8007ba2:	4d6c      	ldr	r5, [pc, #432]	@ (8007d54 <_tzset_unlocked_r+0x1c8>)
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	bb10      	cbnz	r0, 8007bee <_tzset_unlocked_r+0x62>
 8007ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8007d58 <_tzset_unlocked_r+0x1cc>)
 8007baa:	4a6c      	ldr	r2, [pc, #432]	@ (8007d5c <_tzset_unlocked_r+0x1d0>)
 8007bac:	6018      	str	r0, [r3, #0]
 8007bae:	4b6c      	ldr	r3, [pc, #432]	@ (8007d60 <_tzset_unlocked_r+0x1d4>)
 8007bb0:	214a      	movs	r1, #74	@ 0x4a
 8007bb2:	6018      	str	r0, [r3, #0]
 8007bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8007d64 <_tzset_unlocked_r+0x1d8>)
 8007bb6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8007bba:	e9c3 2200 	strd	r2, r2, [r3]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8007bc6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8007bca:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8007bce:	62a0      	str	r0, [r4, #40]	@ 0x28
 8007bd0:	6520      	str	r0, [r4, #80]	@ 0x50
 8007bd2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007bd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8007bda:	6828      	ldr	r0, [r5, #0]
 8007bdc:	7221      	strb	r1, [r4, #8]
 8007bde:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8007be2:	f000 fb41 	bl	8008268 <free>
 8007be6:	602e      	str	r6, [r5, #0]
 8007be8:	b00d      	add	sp, #52	@ 0x34
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	6829      	ldr	r1, [r5, #0]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	f040 808e 	bne.w	8007d12 <_tzset_unlocked_r+0x186>
 8007bf6:	6828      	ldr	r0, [r5, #0]
 8007bf8:	f000 fb36 	bl	8008268 <free>
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7f8 faaf 	bl	8000160 <strlen>
 8007c02:	1c41      	adds	r1, r0, #1
 8007c04:	4638      	mov	r0, r7
 8007c06:	f000 fb59 	bl	80082bc <_malloc_r>
 8007c0a:	6028      	str	r0, [r5, #0]
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 8086 	bne.w	8007d1e <_tzset_unlocked_r+0x192>
 8007c12:	2300      	movs	r3, #0
 8007c14:	4a52      	ldr	r2, [pc, #328]	@ (8007d60 <_tzset_unlocked_r+0x1d4>)
 8007c16:	2000      	movs	r0, #0
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4a52      	ldr	r2, [pc, #328]	@ (8007d68 <_tzset_unlocked_r+0x1dc>)
 8007c1e:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8007d64 <_tzset_unlocked_r+0x1d8>
 8007c22:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8007c26:	e9c8 2200 	strd	r2, r2, [r8]
 8007c2a:	224a      	movs	r2, #74	@ 0x4a
 8007c2c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8007c30:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8007c34:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8007c38:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8007c3c:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8007c40:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8007d58 <_tzset_unlocked_r+0x1cc>
 8007c44:	7222      	strb	r2, [r4, #8]
 8007c46:	f8ca 3000 	str.w	r3, [sl]
 8007c4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c4c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8007c50:	6523      	str	r3, [r4, #80]	@ 0x50
 8007c52:	7833      	ldrb	r3, [r6, #0]
 8007c54:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c56:	bf08      	it	eq
 8007c58:	3601      	addeq	r6, #1
 8007c5a:	7833      	ldrb	r3, [r6, #0]
 8007c5c:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c5e:	d162      	bne.n	8007d26 <_tzset_unlocked_r+0x19a>
 8007c60:	1c75      	adds	r5, r6, #1
 8007c62:	4628      	mov	r0, r5
 8007c64:	4a41      	ldr	r2, [pc, #260]	@ (8007d6c <_tzset_unlocked_r+0x1e0>)
 8007c66:	4942      	ldr	r1, [pc, #264]	@ (8007d70 <_tzset_unlocked_r+0x1e4>)
 8007c68:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c6a:	f000 ffd1 	bl	8008c10 <siscanf>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	ddba      	ble.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c74:	1eda      	subs	r2, r3, #3
 8007c76:	2a07      	cmp	r2, #7
 8007c78:	d8b6      	bhi.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007c7a:	5ceb      	ldrb	r3, [r5, r3]
 8007c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c7e:	d1b3      	bne.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007c80:	3602      	adds	r6, #2
 8007c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c84:	18f5      	adds	r5, r6, r3
 8007c86:	5cf3      	ldrb	r3, [r6, r3]
 8007c88:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c8a:	d15a      	bne.n	8007d42 <_tzset_unlocked_r+0x1b6>
 8007c8c:	f04f 39ff 	mov.w	r9, #4294967295
 8007c90:	3501      	adds	r5, #1
 8007c92:	2300      	movs	r3, #0
 8007c94:	af08      	add	r7, sp, #32
 8007c96:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007c9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007c9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ca0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8007ca4:	9303      	str	r3, [sp, #12]
 8007ca6:	f10d 031e 	add.w	r3, sp, #30
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4628      	mov	r0, r5
 8007cae:	4931      	ldr	r1, [pc, #196]	@ (8007d74 <_tzset_unlocked_r+0x1e8>)
 8007cb0:	ab0a      	add	r3, sp, #40	@ 0x28
 8007cb2:	aa07      	add	r2, sp, #28
 8007cb4:	f000 ffac 	bl	8008c10 <siscanf>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	dd95      	ble.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007cbc:	223c      	movs	r2, #60	@ 0x3c
 8007cbe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007cc2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8007cc6:	fb02 6603 	mla	r6, r2, r3, r6
 8007cca:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007cce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007cd2:	fb02 6603 	mla	r6, r2, r3, r6
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd8:	fb09 f606 	mul.w	r6, r9, r6
 8007cdc:	eb05 0903 	add.w	r9, r5, r3
 8007ce0:	5ceb      	ldrb	r3, [r5, r3]
 8007ce2:	2b3c      	cmp	r3, #60	@ 0x3c
 8007ce4:	f040 80e8 	bne.w	8007eb8 <_tzset_unlocked_r+0x32c>
 8007ce8:	f109 0501 	add.w	r5, r9, #1
 8007cec:	4628      	mov	r0, r5
 8007cee:	4a22      	ldr	r2, [pc, #136]	@ (8007d78 <_tzset_unlocked_r+0x1ec>)
 8007cf0:	491f      	ldr	r1, [pc, #124]	@ (8007d70 <_tzset_unlocked_r+0x1e4>)
 8007cf2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007cf4:	f000 ff8c 	bl	8008c10 <siscanf>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	dc41      	bgt.n	8007d80 <_tzset_unlocked_r+0x1f4>
 8007cfc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d02:	d13d      	bne.n	8007d80 <_tzset_unlocked_r+0x1f4>
 8007d04:	4b19      	ldr	r3, [pc, #100]	@ (8007d6c <_tzset_unlocked_r+0x1e0>)
 8007d06:	62a6      	str	r6, [r4, #40]	@ 0x28
 8007d08:	e9c8 3300 	strd	r3, r3, [r8]
 8007d0c:	f8ca 6000 	str.w	r6, [sl]
 8007d10:	e76a      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007d12:	f7f8 fa1b 	bl	800014c <strcmp>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f47f af6d 	bne.w	8007bf6 <_tzset_unlocked_r+0x6a>
 8007d1c:	e764      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007d1e:	4631      	mov	r1, r6
 8007d20:	f000 f9df 	bl	80080e2 <strcpy>
 8007d24:	e775      	b.n	8007c12 <_tzset_unlocked_r+0x86>
 8007d26:	4630      	mov	r0, r6
 8007d28:	4a10      	ldr	r2, [pc, #64]	@ (8007d6c <_tzset_unlocked_r+0x1e0>)
 8007d2a:	4914      	ldr	r1, [pc, #80]	@ (8007d7c <_tzset_unlocked_r+0x1f0>)
 8007d2c:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d2e:	f000 ff6f 	bl	8008c10 <siscanf>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f77f af58 	ble.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d3a:	3b03      	subs	r3, #3
 8007d3c:	2b07      	cmp	r3, #7
 8007d3e:	d9a0      	bls.n	8007c82 <_tzset_unlocked_r+0xf6>
 8007d40:	e752      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007d42:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d44:	f04f 0901 	mov.w	r9, #1
 8007d48:	bf08      	it	eq
 8007d4a:	3501      	addeq	r5, #1
 8007d4c:	e7a1      	b.n	8007c92 <_tzset_unlocked_r+0x106>
 8007d4e:	bf00      	nop
 8007d50:	0800a47e 	.word	0x0800a47e
 8007d54:	20001510 	.word	0x20001510
 8007d58:	2000152c 	.word	0x2000152c
 8007d5c:	0800a481 	.word	0x0800a481
 8007d60:	20001530 	.word	0x20001530
 8007d64:	20000034 	.word	0x20000034
 8007d68:	0800a72f 	.word	0x0800a72f
 8007d6c:	20001520 	.word	0x20001520
 8007d70:	0800a485 	.word	0x0800a485
 8007d74:	0800a4ba 	.word	0x0800a4ba
 8007d78:	20001514 	.word	0x20001514
 8007d7c:	0800a498 	.word	0x0800a498
 8007d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d82:	1eda      	subs	r2, r3, #3
 8007d84:	2a07      	cmp	r2, #7
 8007d86:	f63f af2f 	bhi.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007d8a:	5ceb      	ldrb	r3, [r5, r3]
 8007d8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d8e:	f47f af2b 	bne.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007d92:	f109 0902 	add.w	r9, r9, #2
 8007d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d98:	eb09 0503 	add.w	r5, r9, r3
 8007d9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007da0:	2b2d      	cmp	r3, #45	@ 0x2d
 8007da2:	f040 8098 	bne.w	8007ed6 <_tzset_unlocked_r+0x34a>
 8007da6:	f04f 39ff 	mov.w	r9, #4294967295
 8007daa:	3501      	adds	r5, #1
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007db2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007db6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dbe:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	f10d 031e 	add.w	r3, sp, #30
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	497a      	ldr	r1, [pc, #488]	@ (8007fb8 <_tzset_unlocked_r+0x42c>)
 8007dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dd0:	aa07      	add	r2, sp, #28
 8007dd2:	f000 ff1d 	bl	8008c10 <siscanf>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f300 8083 	bgt.w	8007ee2 <_tzset_unlocked_r+0x356>
 8007ddc:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8007de0:	4627      	mov	r7, r4
 8007de2:	f04f 0b00 	mov.w	fp, #0
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dea:	441d      	add	r5, r3
 8007dec:	782b      	ldrb	r3, [r5, #0]
 8007dee:	2b2c      	cmp	r3, #44	@ 0x2c
 8007df0:	bf08      	it	eq
 8007df2:	3501      	addeq	r5, #1
 8007df4:	f895 9000 	ldrb.w	r9, [r5]
 8007df8:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8007dfc:	f040 8084 	bne.w	8007f08 <_tzset_unlocked_r+0x37c>
 8007e00:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e02:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8007e06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e0a:	aa09      	add	r2, sp, #36	@ 0x24
 8007e0c:	9200      	str	r2, [sp, #0]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	496a      	ldr	r1, [pc, #424]	@ (8007fbc <_tzset_unlocked_r+0x430>)
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8007e18:	f000 fefa 	bl	8008c10 <siscanf>
 8007e1c:	2803      	cmp	r0, #3
 8007e1e:	f47f aee3 	bne.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007e22:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8007e26:	1e4b      	subs	r3, r1, #1
 8007e28:	2b0b      	cmp	r3, #11
 8007e2a:	f63f aedd 	bhi.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007e2e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8007e32:	1e53      	subs	r3, r2, #1
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	f63f aed7 	bhi.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007e3a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	f63f aed2 	bhi.w	8007be8 <_tzset_unlocked_r+0x5c>
 8007e44:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007e48:	f887 9008 	strb.w	r9, [r7, #8]
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e50:	eb05 0903 	add.w	r9, r5, r3
 8007e54:	2500      	movs	r5, #0
 8007e56:	f04f 0302 	mov.w	r3, #2
 8007e5a:	f8ad 501e 	strh.w	r5, [sp, #30]
 8007e5e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007e62:	f8ad 5020 	strh.w	r5, [sp, #32]
 8007e66:	950a      	str	r5, [sp, #40]	@ 0x28
 8007e68:	f899 3000 	ldrb.w	r3, [r9]
 8007e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007e6e:	d177      	bne.n	8007f60 <_tzset_unlocked_r+0x3d4>
 8007e70:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e72:	aa08      	add	r2, sp, #32
 8007e74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e78:	f10d 021e 	add.w	r2, sp, #30
 8007e7c:	9200      	str	r2, [sp, #0]
 8007e7e:	4648      	mov	r0, r9
 8007e80:	494f      	ldr	r1, [pc, #316]	@ (8007fc0 <_tzset_unlocked_r+0x434>)
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	aa07      	add	r2, sp, #28
 8007e86:	f000 fec3 	bl	8008c10 <siscanf>
 8007e8a:	42a8      	cmp	r0, r5
 8007e8c:	dc68      	bgt.n	8007f60 <_tzset_unlocked_r+0x3d4>
 8007e8e:	214a      	movs	r1, #74	@ 0x4a
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8007e98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e9c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8007ea4:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8007ea8:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8007eac:	7221      	strb	r1, [r4, #8]
 8007eae:	62a5      	str	r5, [r4, #40]	@ 0x28
 8007eb0:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8007eb4:	6525      	str	r5, [r4, #80]	@ 0x50
 8007eb6:	e697      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007eb8:	4648      	mov	r0, r9
 8007eba:	4a42      	ldr	r2, [pc, #264]	@ (8007fc4 <_tzset_unlocked_r+0x438>)
 8007ebc:	4942      	ldr	r1, [pc, #264]	@ (8007fc8 <_tzset_unlocked_r+0x43c>)
 8007ebe:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ec0:	f000 fea6 	bl	8008c10 <siscanf>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f77f af1d 	ble.w	8007d04 <_tzset_unlocked_r+0x178>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ecc:	3b03      	subs	r3, #3
 8007ece:	2b07      	cmp	r3, #7
 8007ed0:	f67f af61 	bls.w	8007d96 <_tzset_unlocked_r+0x20a>
 8007ed4:	e688      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007ed6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007ed8:	f04f 0901 	mov.w	r9, #1
 8007edc:	bf08      	it	eq
 8007ede:	3501      	addeq	r5, #1
 8007ee0:	e764      	b.n	8007dac <_tzset_unlocked_r+0x220>
 8007ee2:	213c      	movs	r1, #60	@ 0x3c
 8007ee4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007ee8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007eec:	fb01 3302 	mla	r3, r1, r2, r3
 8007ef0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007ef4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007ef8:	fb01 3302 	mla	r3, r1, r2, r3
 8007efc:	fb09 f303 	mul.w	r3, r9, r3
 8007f00:	e76e      	b.n	8007de0 <_tzset_unlocked_r+0x254>
 8007f02:	f04f 0b01 	mov.w	fp, #1
 8007f06:	e771      	b.n	8007dec <_tzset_unlocked_r+0x260>
 8007f08:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8007f0c:	bf0a      	itet	eq
 8007f0e:	464b      	moveq	r3, r9
 8007f10:	2344      	movne	r3, #68	@ 0x44
 8007f12:	3501      	addeq	r5, #1
 8007f14:	220a      	movs	r2, #10
 8007f16:	4628      	mov	r0, r5
 8007f18:	a90b      	add	r1, sp, #44	@ 0x2c
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	f000 faca 	bl	80084b4 <strtoul>
 8007f20:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8007f24:	9b05      	ldr	r3, [sp, #20]
 8007f26:	45a9      	cmp	r9, r5
 8007f28:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8007f2c:	d114      	bne.n	8007f58 <_tzset_unlocked_r+0x3cc>
 8007f2e:	234d      	movs	r3, #77	@ 0x4d
 8007f30:	f1bb 0f00 	cmp.w	fp, #0
 8007f34:	d107      	bne.n	8007f46 <_tzset_unlocked_r+0x3ba>
 8007f36:	2103      	movs	r1, #3
 8007f38:	7223      	strb	r3, [r4, #8]
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	f8c4 b014 	str.w	fp, [r4, #20]
 8007f40:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8007f44:	e786      	b.n	8007e54 <_tzset_unlocked_r+0x2c8>
 8007f46:	220b      	movs	r2, #11
 8007f48:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8007f52:	2300      	movs	r3, #0
 8007f54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007f56:	e77d      	b.n	8007e54 <_tzset_unlocked_r+0x2c8>
 8007f58:	b280      	uxth	r0, r0
 8007f5a:	723b      	strb	r3, [r7, #8]
 8007f5c:	6178      	str	r0, [r7, #20]
 8007f5e:	e779      	b.n	8007e54 <_tzset_unlocked_r+0x2c8>
 8007f60:	213c      	movs	r1, #60	@ 0x3c
 8007f62:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007f66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007f6a:	3728      	adds	r7, #40	@ 0x28
 8007f6c:	fb01 3302 	mla	r3, r1, r2, r3
 8007f70:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007f74:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007f78:	fb01 3302 	mla	r3, r1, r2, r3
 8007f7c:	f847 3c10 	str.w	r3, [r7, #-16]
 8007f80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007f82:	444d      	add	r5, r9
 8007f84:	f1bb 0f00 	cmp.w	fp, #0
 8007f88:	d0bb      	beq.n	8007f02 <_tzset_unlocked_r+0x376>
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	6860      	ldr	r0, [r4, #4]
 8007f8e:	6523      	str	r3, [r4, #80]	@ 0x50
 8007f90:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <_tzset_unlocked_r+0x440>)
 8007f92:	62a6      	str	r6, [r4, #40]	@ 0x28
 8007f94:	f8c8 3000 	str.w	r3, [r8]
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <_tzset_unlocked_r+0x438>)
 8007f9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f9e:	f7ff fd3b 	bl	8007a18 <__tzcalc_limits>
 8007fa2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007fa4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007fa6:	f8ca 2000 	str.w	r2, [sl]
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	bf18      	it	ne
 8007fae:	2301      	movne	r3, #1
 8007fb0:	4a07      	ldr	r2, [pc, #28]	@ (8007fd0 <_tzset_unlocked_r+0x444>)
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	e618      	b.n	8007be8 <_tzset_unlocked_r+0x5c>
 8007fb6:	bf00      	nop
 8007fb8:	0800a4ba 	.word	0x0800a4ba
 8007fbc:	0800a4a6 	.word	0x0800a4a6
 8007fc0:	0800a4b9 	.word	0x0800a4b9
 8007fc4:	20001514 	.word	0x20001514
 8007fc8:	0800a498 	.word	0x0800a498
 8007fcc:	20001520 	.word	0x20001520
 8007fd0:	20001530 	.word	0x20001530

08007fd4 <_close_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4d05      	ldr	r5, [pc, #20]	@ (8007ff0 <_close_r+0x1c>)
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	f7f9 fa4b 	bl	800147a <_close>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_close_r+0x1a>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_close_r+0x1a>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	20001534 	.word	0x20001534

08007ff4 <_gettimeofday_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4d06      	ldr	r5, [pc, #24]	@ (8008014 <_gettimeofday_r+0x20>)
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	4611      	mov	r1, r2
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	f001 fe1b 	bl	8009c3c <_gettimeofday>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	d102      	bne.n	8008010 <_gettimeofday_r+0x1c>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	b103      	cbz	r3, 8008010 <_gettimeofday_r+0x1c>
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	bf00      	nop
 8008014:	20001534 	.word	0x20001534

08008018 <_lseek_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	2200      	movs	r2, #0
 8008022:	4d05      	ldr	r5, [pc, #20]	@ (8008038 <_lseek_r+0x20>)
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fa4b 	bl	80014c2 <_lseek>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_lseek_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_lseek_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	20001534 	.word	0x20001534

0800803c <_read_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4604      	mov	r4, r0
 8008040:	4608      	mov	r0, r1
 8008042:	4611      	mov	r1, r2
 8008044:	2200      	movs	r2, #0
 8008046:	4d05      	ldr	r5, [pc, #20]	@ (800805c <_read_r+0x20>)
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f7f9 f9dc 	bl	8001408 <_read>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_read_r+0x1e>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_read_r+0x1e>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20001534 	.word	0x20001534

08008060 <_write_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	4611      	mov	r1, r2
 8008068:	2200      	movs	r2, #0
 800806a:	4d05      	ldr	r5, [pc, #20]	@ (8008080 <_write_r+0x20>)
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f7f9 f9e7 	bl	8001442 <_write>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_write_r+0x1e>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_write_r+0x1e>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	20001534 	.word	0x20001534

08008084 <__errno>:
 8008084:	4b01      	ldr	r3, [pc, #4]	@ (800808c <__errno+0x8>)
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	2000003c 	.word	0x2000003c

08008090 <__libc_init_array>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	2600      	movs	r6, #0
 8008094:	4d0c      	ldr	r5, [pc, #48]	@ (80080c8 <__libc_init_array+0x38>)
 8008096:	4c0d      	ldr	r4, [pc, #52]	@ (80080cc <__libc_init_array+0x3c>)
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	42a6      	cmp	r6, r4
 800809e:	d109      	bne.n	80080b4 <__libc_init_array+0x24>
 80080a0:	f001 fdd4 	bl	8009c4c <_init>
 80080a4:	2600      	movs	r6, #0
 80080a6:	4d0a      	ldr	r5, [pc, #40]	@ (80080d0 <__libc_init_array+0x40>)
 80080a8:	4c0a      	ldr	r4, [pc, #40]	@ (80080d4 <__libc_init_array+0x44>)
 80080aa:	1b64      	subs	r4, r4, r5
 80080ac:	10a4      	asrs	r4, r4, #2
 80080ae:	42a6      	cmp	r6, r4
 80080b0:	d105      	bne.n	80080be <__libc_init_array+0x2e>
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b8:	4798      	blx	r3
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7ee      	b.n	800809c <__libc_init_array+0xc>
 80080be:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c2:	4798      	blx	r3
 80080c4:	3601      	adds	r6, #1
 80080c6:	e7f2      	b.n	80080ae <__libc_init_array+0x1e>
 80080c8:	0800a888 	.word	0x0800a888
 80080cc:	0800a888 	.word	0x0800a888
 80080d0:	0800a888 	.word	0x0800a888
 80080d4:	0800a88c 	.word	0x0800a88c

080080d8 <__retarget_lock_init_recursive>:
 80080d8:	4770      	bx	lr

080080da <__retarget_lock_acquire>:
 80080da:	4770      	bx	lr

080080dc <__retarget_lock_acquire_recursive>:
 80080dc:	4770      	bx	lr

080080de <__retarget_lock_release>:
 80080de:	4770      	bx	lr

080080e0 <__retarget_lock_release_recursive>:
 80080e0:	4770      	bx	lr

080080e2 <strcpy>:
 80080e2:	4603      	mov	r3, r0
 80080e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e8:	f803 2b01 	strb.w	r2, [r3], #1
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d1f9      	bne.n	80080e4 <strcpy+0x2>
 80080f0:	4770      	bx	lr

080080f2 <abs>:
 80080f2:	2800      	cmp	r0, #0
 80080f4:	bfb8      	it	lt
 80080f6:	4240      	neglt	r0, r0
 80080f8:	4770      	bx	lr
	...

080080fc <__assert_func>:
 80080fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080fe:	4614      	mov	r4, r2
 8008100:	461a      	mov	r2, r3
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <__assert_func+0x2c>)
 8008104:	4605      	mov	r5, r0
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68d8      	ldr	r0, [r3, #12]
 800810a:	b954      	cbnz	r4, 8008122 <__assert_func+0x26>
 800810c:	4b07      	ldr	r3, [pc, #28]	@ (800812c <__assert_func+0x30>)
 800810e:	461c      	mov	r4, r3
 8008110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008114:	9100      	str	r1, [sp, #0]
 8008116:	462b      	mov	r3, r5
 8008118:	4905      	ldr	r1, [pc, #20]	@ (8008130 <__assert_func+0x34>)
 800811a:	f000 fd67 	bl	8008bec <fiprintf>
 800811e:	f000 fea3 	bl	8008e68 <abort>
 8008122:	4b04      	ldr	r3, [pc, #16]	@ (8008134 <__assert_func+0x38>)
 8008124:	e7f4      	b.n	8008110 <__assert_func+0x14>
 8008126:	bf00      	nop
 8008128:	2000003c 	.word	0x2000003c
 800812c:	0800a72f 	.word	0x0800a72f
 8008130:	0800a701 	.word	0x0800a701
 8008134:	0800a6f4 	.word	0x0800a6f4

08008138 <_free_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4605      	mov	r5, r0
 800813c:	2900      	cmp	r1, #0
 800813e:	d040      	beq.n	80081c2 <_free_r+0x8a>
 8008140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008144:	1f0c      	subs	r4, r1, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfb8      	it	lt
 800814a:	18e4      	addlt	r4, r4, r3
 800814c:	f000 f936 	bl	80083bc <__malloc_lock>
 8008150:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <_free_r+0x8c>)
 8008152:	6813      	ldr	r3, [r2, #0]
 8008154:	b933      	cbnz	r3, 8008164 <_free_r+0x2c>
 8008156:	6063      	str	r3, [r4, #4]
 8008158:	6014      	str	r4, [r2, #0]
 800815a:	4628      	mov	r0, r5
 800815c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008160:	f000 b932 	b.w	80083c8 <__malloc_unlock>
 8008164:	42a3      	cmp	r3, r4
 8008166:	d908      	bls.n	800817a <_free_r+0x42>
 8008168:	6820      	ldr	r0, [r4, #0]
 800816a:	1821      	adds	r1, r4, r0
 800816c:	428b      	cmp	r3, r1
 800816e:	bf01      	itttt	eq
 8008170:	6819      	ldreq	r1, [r3, #0]
 8008172:	685b      	ldreq	r3, [r3, #4]
 8008174:	1809      	addeq	r1, r1, r0
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	e7ed      	b.n	8008156 <_free_r+0x1e>
 800817a:	461a      	mov	r2, r3
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	b10b      	cbz	r3, 8008184 <_free_r+0x4c>
 8008180:	42a3      	cmp	r3, r4
 8008182:	d9fa      	bls.n	800817a <_free_r+0x42>
 8008184:	6811      	ldr	r1, [r2, #0]
 8008186:	1850      	adds	r0, r2, r1
 8008188:	42a0      	cmp	r0, r4
 800818a:	d10b      	bne.n	80081a4 <_free_r+0x6c>
 800818c:	6820      	ldr	r0, [r4, #0]
 800818e:	4401      	add	r1, r0
 8008190:	1850      	adds	r0, r2, r1
 8008192:	4283      	cmp	r3, r0
 8008194:	6011      	str	r1, [r2, #0]
 8008196:	d1e0      	bne.n	800815a <_free_r+0x22>
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4408      	add	r0, r1
 800819e:	6010      	str	r0, [r2, #0]
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	e7da      	b.n	800815a <_free_r+0x22>
 80081a4:	d902      	bls.n	80081ac <_free_r+0x74>
 80081a6:	230c      	movs	r3, #12
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	e7d6      	b.n	800815a <_free_r+0x22>
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	1821      	adds	r1, r4, r0
 80081b0:	428b      	cmp	r3, r1
 80081b2:	bf01      	itttt	eq
 80081b4:	6819      	ldreq	r1, [r3, #0]
 80081b6:	685b      	ldreq	r3, [r3, #4]
 80081b8:	1809      	addeq	r1, r1, r0
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6054      	str	r4, [r2, #4]
 80081c0:	e7cb      	b.n	800815a <_free_r+0x22>
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	20001540 	.word	0x20001540

080081c8 <_findenv_r>:
 80081c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800823c <_findenv_r+0x74>
 80081d0:	4606      	mov	r6, r0
 80081d2:	4689      	mov	r9, r1
 80081d4:	4617      	mov	r7, r2
 80081d6:	f000 fe4f 	bl	8008e78 <__env_lock>
 80081da:	f8da 4000 	ldr.w	r4, [sl]
 80081de:	b134      	cbz	r4, 80081ee <_findenv_r+0x26>
 80081e0:	464b      	mov	r3, r9
 80081e2:	4698      	mov	r8, r3
 80081e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e8:	b13a      	cbz	r2, 80081fa <_findenv_r+0x32>
 80081ea:	2a3d      	cmp	r2, #61	@ 0x3d
 80081ec:	d1f9      	bne.n	80081e2 <_findenv_r+0x1a>
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 fe48 	bl	8008e84 <__env_unlock>
 80081f4:	2000      	movs	r0, #0
 80081f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	eba8 0809 	sub.w	r8, r8, r9
 80081fe:	46a3      	mov	fp, r4
 8008200:	f854 0b04 	ldr.w	r0, [r4], #4
 8008204:	2800      	cmp	r0, #0
 8008206:	d0f2      	beq.n	80081ee <_findenv_r+0x26>
 8008208:	4642      	mov	r2, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f000 fd44 	bl	8008c98 <strncmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	d1f4      	bne.n	80081fe <_findenv_r+0x36>
 8008214:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008218:	eb03 0508 	add.w	r5, r3, r8
 800821c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008220:	2b3d      	cmp	r3, #61	@ 0x3d
 8008222:	d1ec      	bne.n	80081fe <_findenv_r+0x36>
 8008224:	f8da 3000 	ldr.w	r3, [sl]
 8008228:	4630      	mov	r0, r6
 800822a:	ebab 0303 	sub.w	r3, fp, r3
 800822e:	109b      	asrs	r3, r3, #2
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	f000 fe27 	bl	8008e84 <__env_unlock>
 8008236:	1c68      	adds	r0, r5, #1
 8008238:	e7dd      	b.n	80081f6 <_findenv_r+0x2e>
 800823a:	bf00      	nop
 800823c:	20000004 	.word	0x20000004

08008240 <_getenv_r>:
 8008240:	b507      	push	{r0, r1, r2, lr}
 8008242:	aa01      	add	r2, sp, #4
 8008244:	f7ff ffc0 	bl	80081c8 <_findenv_r>
 8008248:	b003      	add	sp, #12
 800824a:	f85d fb04 	ldr.w	pc, [sp], #4

0800824e <labs>:
 800824e:	2800      	cmp	r0, #0
 8008250:	bfb8      	it	lt
 8008252:	4240      	neglt	r0, r0
 8008254:	4770      	bx	lr
	...

08008258 <malloc>:
 8008258:	4b02      	ldr	r3, [pc, #8]	@ (8008264 <malloc+0xc>)
 800825a:	4601      	mov	r1, r0
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f000 b82d 	b.w	80082bc <_malloc_r>
 8008262:	bf00      	nop
 8008264:	2000003c 	.word	0x2000003c

08008268 <free>:
 8008268:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <free+0xc>)
 800826a:	4601      	mov	r1, r0
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f7ff bf63 	b.w	8008138 <_free_r>
 8008272:	bf00      	nop
 8008274:	2000003c 	.word	0x2000003c

08008278 <sbrk_aligned>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	4e0f      	ldr	r6, [pc, #60]	@ (80082b8 <sbrk_aligned+0x40>)
 800827c:	460c      	mov	r4, r1
 800827e:	6831      	ldr	r1, [r6, #0]
 8008280:	4605      	mov	r5, r0
 8008282:	b911      	cbnz	r1, 800828a <sbrk_aligned+0x12>
 8008284:	f000 fdc4 	bl	8008e10 <_sbrk_r>
 8008288:	6030      	str	r0, [r6, #0]
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f000 fdbf 	bl	8008e10 <_sbrk_r>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d103      	bne.n	800829e <sbrk_aligned+0x26>
 8008296:	f04f 34ff 	mov.w	r4, #4294967295
 800829a:	4620      	mov	r0, r4
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	1cc4      	adds	r4, r0, #3
 80082a0:	f024 0403 	bic.w	r4, r4, #3
 80082a4:	42a0      	cmp	r0, r4
 80082a6:	d0f8      	beq.n	800829a <sbrk_aligned+0x22>
 80082a8:	1a21      	subs	r1, r4, r0
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 fdb0 	bl	8008e10 <_sbrk_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	d1f2      	bne.n	800829a <sbrk_aligned+0x22>
 80082b4:	e7ef      	b.n	8008296 <sbrk_aligned+0x1e>
 80082b6:	bf00      	nop
 80082b8:	2000153c 	.word	0x2000153c

080082bc <_malloc_r>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4606      	mov	r6, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d904      	bls.n	80082e2 <_malloc_r+0x26>
 80082d8:	230c      	movs	r3, #12
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	2000      	movs	r0, #0
 80082de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083b8 <_malloc_r+0xfc>
 80082e6:	f000 f869 	bl	80083bc <__malloc_lock>
 80082ea:	f8d8 3000 	ldr.w	r3, [r8]
 80082ee:	461c      	mov	r4, r3
 80082f0:	bb44      	cbnz	r4, 8008344 <_malloc_r+0x88>
 80082f2:	4629      	mov	r1, r5
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff ffbf 	bl	8008278 <sbrk_aligned>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	4604      	mov	r4, r0
 80082fe:	d158      	bne.n	80083b2 <_malloc_r+0xf6>
 8008300:	f8d8 4000 	ldr.w	r4, [r8]
 8008304:	4627      	mov	r7, r4
 8008306:	2f00      	cmp	r7, #0
 8008308:	d143      	bne.n	8008392 <_malloc_r+0xd6>
 800830a:	2c00      	cmp	r4, #0
 800830c:	d04b      	beq.n	80083a6 <_malloc_r+0xea>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	4639      	mov	r1, r7
 8008312:	4630      	mov	r0, r6
 8008314:	eb04 0903 	add.w	r9, r4, r3
 8008318:	f000 fd7a 	bl	8008e10 <_sbrk_r>
 800831c:	4581      	cmp	r9, r0
 800831e:	d142      	bne.n	80083a6 <_malloc_r+0xea>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	4630      	mov	r0, r6
 8008324:	1a6d      	subs	r5, r5, r1
 8008326:	4629      	mov	r1, r5
 8008328:	f7ff ffa6 	bl	8008278 <sbrk_aligned>
 800832c:	3001      	adds	r0, #1
 800832e:	d03a      	beq.n	80083a6 <_malloc_r+0xea>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	442b      	add	r3, r5
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	f8d8 3000 	ldr.w	r3, [r8]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	bb62      	cbnz	r2, 8008398 <_malloc_r+0xdc>
 800833e:	f8c8 7000 	str.w	r7, [r8]
 8008342:	e00f      	b.n	8008364 <_malloc_r+0xa8>
 8008344:	6822      	ldr	r2, [r4, #0]
 8008346:	1b52      	subs	r2, r2, r5
 8008348:	d420      	bmi.n	800838c <_malloc_r+0xd0>
 800834a:	2a0b      	cmp	r2, #11
 800834c:	d917      	bls.n	800837e <_malloc_r+0xc2>
 800834e:	1961      	adds	r1, r4, r5
 8008350:	42a3      	cmp	r3, r4
 8008352:	6025      	str	r5, [r4, #0]
 8008354:	bf18      	it	ne
 8008356:	6059      	strne	r1, [r3, #4]
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	bf08      	it	eq
 800835c:	f8c8 1000 	streq.w	r1, [r8]
 8008360:	5162      	str	r2, [r4, r5]
 8008362:	604b      	str	r3, [r1, #4]
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f82f 	bl	80083c8 <__malloc_unlock>
 800836a:	f104 000b 	add.w	r0, r4, #11
 800836e:	1d23      	adds	r3, r4, #4
 8008370:	f020 0007 	bic.w	r0, r0, #7
 8008374:	1ac2      	subs	r2, r0, r3
 8008376:	bf1c      	itt	ne
 8008378:	1a1b      	subne	r3, r3, r0
 800837a:	50a3      	strne	r3, [r4, r2]
 800837c:	e7af      	b.n	80082de <_malloc_r+0x22>
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	bf0c      	ite	eq
 8008384:	f8c8 2000 	streq.w	r2, [r8]
 8008388:	605a      	strne	r2, [r3, #4]
 800838a:	e7eb      	b.n	8008364 <_malloc_r+0xa8>
 800838c:	4623      	mov	r3, r4
 800838e:	6864      	ldr	r4, [r4, #4]
 8008390:	e7ae      	b.n	80082f0 <_malloc_r+0x34>
 8008392:	463c      	mov	r4, r7
 8008394:	687f      	ldr	r7, [r7, #4]
 8008396:	e7b6      	b.n	8008306 <_malloc_r+0x4a>
 8008398:	461a      	mov	r2, r3
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	42a3      	cmp	r3, r4
 800839e:	d1fb      	bne.n	8008398 <_malloc_r+0xdc>
 80083a0:	2300      	movs	r3, #0
 80083a2:	6053      	str	r3, [r2, #4]
 80083a4:	e7de      	b.n	8008364 <_malloc_r+0xa8>
 80083a6:	230c      	movs	r3, #12
 80083a8:	4630      	mov	r0, r6
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	f000 f80c 	bl	80083c8 <__malloc_unlock>
 80083b0:	e794      	b.n	80082dc <_malloc_r+0x20>
 80083b2:	6005      	str	r5, [r0, #0]
 80083b4:	e7d6      	b.n	8008364 <_malloc_r+0xa8>
 80083b6:	bf00      	nop
 80083b8:	20001540 	.word	0x20001540

080083bc <__malloc_lock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	@ (80083c4 <__malloc_lock+0x8>)
 80083be:	f7ff be8d 	b.w	80080dc <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	2000153a 	.word	0x2000153a

080083c8 <__malloc_unlock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	@ (80083d0 <__malloc_unlock+0x8>)
 80083ca:	f7ff be89 	b.w	80080e0 <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	2000153a 	.word	0x2000153a

080083d4 <_strtoul_l.constprop.0>:
 80083d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4686      	mov	lr, r0
 80083da:	460d      	mov	r5, r1
 80083dc:	4e33      	ldr	r6, [pc, #204]	@ (80084ac <_strtoul_l.constprop.0+0xd8>)
 80083de:	4628      	mov	r0, r5
 80083e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e4:	5d37      	ldrb	r7, [r6, r4]
 80083e6:	f017 0708 	ands.w	r7, r7, #8
 80083ea:	d1f8      	bne.n	80083de <_strtoul_l.constprop.0+0xa>
 80083ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80083ee:	d12f      	bne.n	8008450 <_strtoul_l.constprop.0+0x7c>
 80083f0:	2701      	movs	r7, #1
 80083f2:	782c      	ldrb	r4, [r5, #0]
 80083f4:	1c85      	adds	r5, r0, #2
 80083f6:	f033 0010 	bics.w	r0, r3, #16
 80083fa:	d109      	bne.n	8008410 <_strtoul_l.constprop.0+0x3c>
 80083fc:	2c30      	cmp	r4, #48	@ 0x30
 80083fe:	d12c      	bne.n	800845a <_strtoul_l.constprop.0+0x86>
 8008400:	7828      	ldrb	r0, [r5, #0]
 8008402:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008406:	2858      	cmp	r0, #88	@ 0x58
 8008408:	d127      	bne.n	800845a <_strtoul_l.constprop.0+0x86>
 800840a:	2310      	movs	r3, #16
 800840c:	786c      	ldrb	r4, [r5, #1]
 800840e:	3502      	adds	r5, #2
 8008410:	f04f 38ff 	mov.w	r8, #4294967295
 8008414:	fbb8 f8f3 	udiv	r8, r8, r3
 8008418:	2600      	movs	r6, #0
 800841a:	fb03 f908 	mul.w	r9, r3, r8
 800841e:	4630      	mov	r0, r6
 8008420:	ea6f 0909 	mvn.w	r9, r9
 8008424:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008428:	f1bc 0f09 	cmp.w	ip, #9
 800842c:	d81c      	bhi.n	8008468 <_strtoul_l.constprop.0+0x94>
 800842e:	4664      	mov	r4, ip
 8008430:	42a3      	cmp	r3, r4
 8008432:	dd2a      	ble.n	800848a <_strtoul_l.constprop.0+0xb6>
 8008434:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008438:	d007      	beq.n	800844a <_strtoul_l.constprop.0+0x76>
 800843a:	4580      	cmp	r8, r0
 800843c:	d322      	bcc.n	8008484 <_strtoul_l.constprop.0+0xb0>
 800843e:	d101      	bne.n	8008444 <_strtoul_l.constprop.0+0x70>
 8008440:	45a1      	cmp	r9, r4
 8008442:	db1f      	blt.n	8008484 <_strtoul_l.constprop.0+0xb0>
 8008444:	2601      	movs	r6, #1
 8008446:	fb00 4003 	mla	r0, r0, r3, r4
 800844a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800844e:	e7e9      	b.n	8008424 <_strtoul_l.constprop.0+0x50>
 8008450:	2c2b      	cmp	r4, #43	@ 0x2b
 8008452:	bf04      	itt	eq
 8008454:	782c      	ldrbeq	r4, [r5, #0]
 8008456:	1c85      	addeq	r5, r0, #2
 8008458:	e7cd      	b.n	80083f6 <_strtoul_l.constprop.0+0x22>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1d8      	bne.n	8008410 <_strtoul_l.constprop.0+0x3c>
 800845e:	2c30      	cmp	r4, #48	@ 0x30
 8008460:	bf0c      	ite	eq
 8008462:	2308      	moveq	r3, #8
 8008464:	230a      	movne	r3, #10
 8008466:	e7d3      	b.n	8008410 <_strtoul_l.constprop.0+0x3c>
 8008468:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800846c:	f1bc 0f19 	cmp.w	ip, #25
 8008470:	d801      	bhi.n	8008476 <_strtoul_l.constprop.0+0xa2>
 8008472:	3c37      	subs	r4, #55	@ 0x37
 8008474:	e7dc      	b.n	8008430 <_strtoul_l.constprop.0+0x5c>
 8008476:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800847a:	f1bc 0f19 	cmp.w	ip, #25
 800847e:	d804      	bhi.n	800848a <_strtoul_l.constprop.0+0xb6>
 8008480:	3c57      	subs	r4, #87	@ 0x57
 8008482:	e7d5      	b.n	8008430 <_strtoul_l.constprop.0+0x5c>
 8008484:	f04f 36ff 	mov.w	r6, #4294967295
 8008488:	e7df      	b.n	800844a <_strtoul_l.constprop.0+0x76>
 800848a:	1c73      	adds	r3, r6, #1
 800848c:	d106      	bne.n	800849c <_strtoul_l.constprop.0+0xc8>
 800848e:	2322      	movs	r3, #34	@ 0x22
 8008490:	4630      	mov	r0, r6
 8008492:	f8ce 3000 	str.w	r3, [lr]
 8008496:	b932      	cbnz	r2, 80084a6 <_strtoul_l.constprop.0+0xd2>
 8008498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800849c:	b107      	cbz	r7, 80084a0 <_strtoul_l.constprop.0+0xcc>
 800849e:	4240      	negs	r0, r0
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	d0f9      	beq.n	8008498 <_strtoul_l.constprop.0+0xc4>
 80084a4:	b106      	cbz	r6, 80084a8 <_strtoul_l.constprop.0+0xd4>
 80084a6:	1e69      	subs	r1, r5, #1
 80084a8:	6011      	str	r1, [r2, #0]
 80084aa:	e7f5      	b.n	8008498 <_strtoul_l.constprop.0+0xc4>
 80084ac:	0800a731 	.word	0x0800a731

080084b0 <_strtoul_r>:
 80084b0:	f7ff bf90 	b.w	80083d4 <_strtoul_l.constprop.0>

080084b4 <strtoul>:
 80084b4:	4613      	mov	r3, r2
 80084b6:	460a      	mov	r2, r1
 80084b8:	4601      	mov	r1, r0
 80084ba:	4802      	ldr	r0, [pc, #8]	@ (80084c4 <strtoul+0x10>)
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	f7ff bf89 	b.w	80083d4 <_strtoul_l.constprop.0>
 80084c2:	bf00      	nop
 80084c4:	2000003c 	.word	0x2000003c

080084c8 <__ssputs_r>:
 80084c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	461f      	mov	r7, r3
 80084ce:	688e      	ldr	r6, [r1, #8]
 80084d0:	4682      	mov	sl, r0
 80084d2:	42be      	cmp	r6, r7
 80084d4:	460c      	mov	r4, r1
 80084d6:	4690      	mov	r8, r2
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	d82d      	bhi.n	8008538 <__ssputs_r+0x70>
 80084dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e4:	d026      	beq.n	8008534 <__ssputs_r+0x6c>
 80084e6:	6965      	ldr	r5, [r4, #20]
 80084e8:	6909      	ldr	r1, [r1, #16]
 80084ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ee:	eba3 0901 	sub.w	r9, r3, r1
 80084f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084f6:	1c7b      	adds	r3, r7, #1
 80084f8:	444b      	add	r3, r9
 80084fa:	106d      	asrs	r5, r5, #1
 80084fc:	429d      	cmp	r5, r3
 80084fe:	bf38      	it	cc
 8008500:	461d      	movcc	r5, r3
 8008502:	0553      	lsls	r3, r2, #21
 8008504:	d527      	bpl.n	8008556 <__ssputs_r+0x8e>
 8008506:	4629      	mov	r1, r5
 8008508:	f7ff fed8 	bl	80082bc <_malloc_r>
 800850c:	4606      	mov	r6, r0
 800850e:	b360      	cbz	r0, 800856a <__ssputs_r+0xa2>
 8008510:	464a      	mov	r2, r9
 8008512:	6921      	ldr	r1, [r4, #16]
 8008514:	f000 fc9a 	bl	8008e4c <memcpy>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800851e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	6126      	str	r6, [r4, #16]
 8008526:	444e      	add	r6, r9
 8008528:	6026      	str	r6, [r4, #0]
 800852a:	463e      	mov	r6, r7
 800852c:	6165      	str	r5, [r4, #20]
 800852e:	eba5 0509 	sub.w	r5, r5, r9
 8008532:	60a5      	str	r5, [r4, #8]
 8008534:	42be      	cmp	r6, r7
 8008536:	d900      	bls.n	800853a <__ssputs_r+0x72>
 8008538:	463e      	mov	r6, r7
 800853a:	4632      	mov	r2, r6
 800853c:	4641      	mov	r1, r8
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	f000 fb90 	bl	8008c64 <memmove>
 8008544:	2000      	movs	r0, #0
 8008546:	68a3      	ldr	r3, [r4, #8]
 8008548:	1b9b      	subs	r3, r3, r6
 800854a:	60a3      	str	r3, [r4, #8]
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	4433      	add	r3, r6
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008556:	462a      	mov	r2, r5
 8008558:	f000 fc9a 	bl	8008e90 <_realloc_r>
 800855c:	4606      	mov	r6, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	d1e0      	bne.n	8008524 <__ssputs_r+0x5c>
 8008562:	4650      	mov	r0, sl
 8008564:	6921      	ldr	r1, [r4, #16]
 8008566:	f7ff fde7 	bl	8008138 <_free_r>
 800856a:	230c      	movs	r3, #12
 800856c:	f8ca 3000 	str.w	r3, [sl]
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	e7e9      	b.n	8008552 <__ssputs_r+0x8a>
	...

08008580 <_svfiprintf_r>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	4698      	mov	r8, r3
 8008586:	898b      	ldrh	r3, [r1, #12]
 8008588:	4607      	mov	r7, r0
 800858a:	061b      	lsls	r3, r3, #24
 800858c:	460d      	mov	r5, r1
 800858e:	4614      	mov	r4, r2
 8008590:	b09d      	sub	sp, #116	@ 0x74
 8008592:	d510      	bpl.n	80085b6 <_svfiprintf_r+0x36>
 8008594:	690b      	ldr	r3, [r1, #16]
 8008596:	b973      	cbnz	r3, 80085b6 <_svfiprintf_r+0x36>
 8008598:	2140      	movs	r1, #64	@ 0x40
 800859a:	f7ff fe8f 	bl	80082bc <_malloc_r>
 800859e:	6028      	str	r0, [r5, #0]
 80085a0:	6128      	str	r0, [r5, #16]
 80085a2:	b930      	cbnz	r0, 80085b2 <_svfiprintf_r+0x32>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	b01d      	add	sp, #116	@ 0x74
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	2340      	movs	r3, #64	@ 0x40
 80085b4:	616b      	str	r3, [r5, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ba:	2320      	movs	r3, #32
 80085bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c0:	2330      	movs	r3, #48	@ 0x30
 80085c2:	f04f 0901 	mov.w	r9, #1
 80085c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008764 <_svfiprintf_r+0x1e4>
 80085ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d2:	4623      	mov	r3, r4
 80085d4:	469a      	mov	sl, r3
 80085d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085da:	b10a      	cbz	r2, 80085e0 <_svfiprintf_r+0x60>
 80085dc:	2a25      	cmp	r2, #37	@ 0x25
 80085de:	d1f9      	bne.n	80085d4 <_svfiprintf_r+0x54>
 80085e0:	ebba 0b04 	subs.w	fp, sl, r4
 80085e4:	d00b      	beq.n	80085fe <_svfiprintf_r+0x7e>
 80085e6:	465b      	mov	r3, fp
 80085e8:	4622      	mov	r2, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ff6b 	bl	80084c8 <__ssputs_r>
 80085f2:	3001      	adds	r0, #1
 80085f4:	f000 80a7 	beq.w	8008746 <_svfiprintf_r+0x1c6>
 80085f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fa:	445a      	add	r2, fp
 80085fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 809f 	beq.w	8008746 <_svfiprintf_r+0x1c6>
 8008608:	2300      	movs	r3, #0
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008612:	f10a 0a01 	add.w	sl, sl, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008620:	4654      	mov	r4, sl
 8008622:	2205      	movs	r2, #5
 8008624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008628:	484e      	ldr	r0, [pc, #312]	@ (8008764 <_svfiprintf_r+0x1e4>)
 800862a:	f000 fc01 	bl	8008e30 <memchr>
 800862e:	9a04      	ldr	r2, [sp, #16]
 8008630:	b9d8      	cbnz	r0, 800866a <_svfiprintf_r+0xea>
 8008632:	06d0      	lsls	r0, r2, #27
 8008634:	bf44      	itt	mi
 8008636:	2320      	movmi	r3, #32
 8008638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863c:	0711      	lsls	r1, r2, #28
 800863e:	bf44      	itt	mi
 8008640:	232b      	movmi	r3, #43	@ 0x2b
 8008642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008646:	f89a 3000 	ldrb.w	r3, [sl]
 800864a:	2b2a      	cmp	r3, #42	@ 0x2a
 800864c:	d015      	beq.n	800867a <_svfiprintf_r+0xfa>
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	9a07      	ldr	r2, [sp, #28]
 8008658:	4621      	mov	r1, r4
 800865a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865e:	3b30      	subs	r3, #48	@ 0x30
 8008660:	2b09      	cmp	r3, #9
 8008662:	d94b      	bls.n	80086fc <_svfiprintf_r+0x17c>
 8008664:	b1b0      	cbz	r0, 8008694 <_svfiprintf_r+0x114>
 8008666:	9207      	str	r2, [sp, #28]
 8008668:	e014      	b.n	8008694 <_svfiprintf_r+0x114>
 800866a:	eba0 0308 	sub.w	r3, r0, r8
 800866e:	fa09 f303 	lsl.w	r3, r9, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	46a2      	mov	sl, r4
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	e7d2      	b.n	8008620 <_svfiprintf_r+0xa0>
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	1d19      	adds	r1, r3, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	9103      	str	r1, [sp, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfbb      	ittet	lt
 8008686:	425b      	neglt	r3, r3
 8008688:	f042 0202 	orrlt.w	r2, r2, #2
 800868c:	9307      	strge	r3, [sp, #28]
 800868e:	9307      	strlt	r3, [sp, #28]
 8008690:	bfb8      	it	lt
 8008692:	9204      	strlt	r2, [sp, #16]
 8008694:	7823      	ldrb	r3, [r4, #0]
 8008696:	2b2e      	cmp	r3, #46	@ 0x2e
 8008698:	d10a      	bne.n	80086b0 <_svfiprintf_r+0x130>
 800869a:	7863      	ldrb	r3, [r4, #1]
 800869c:	2b2a      	cmp	r3, #42	@ 0x2a
 800869e:	d132      	bne.n	8008706 <_svfiprintf_r+0x186>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3402      	adds	r4, #2
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9203      	str	r2, [sp, #12]
 80086aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008768 <_svfiprintf_r+0x1e8>
 80086b4:	2203      	movs	r2, #3
 80086b6:	4650      	mov	r0, sl
 80086b8:	7821      	ldrb	r1, [r4, #0]
 80086ba:	f000 fbb9 	bl	8008e30 <memchr>
 80086be:	b138      	cbz	r0, 80086d0 <_svfiprintf_r+0x150>
 80086c0:	2240      	movs	r2, #64	@ 0x40
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	eba0 000a 	sub.w	r0, r0, sl
 80086c8:	4082      	lsls	r2, r0
 80086ca:	4313      	orrs	r3, r2
 80086cc:	3401      	adds	r4, #1
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d4:	2206      	movs	r2, #6
 80086d6:	4825      	ldr	r0, [pc, #148]	@ (800876c <_svfiprintf_r+0x1ec>)
 80086d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086dc:	f000 fba8 	bl	8008e30 <memchr>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d036      	beq.n	8008752 <_svfiprintf_r+0x1d2>
 80086e4:	4b22      	ldr	r3, [pc, #136]	@ (8008770 <_svfiprintf_r+0x1f0>)
 80086e6:	bb1b      	cbnz	r3, 8008730 <_svfiprintf_r+0x1b0>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	3307      	adds	r3, #7
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	3308      	adds	r3, #8
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	4433      	add	r3, r6
 80086f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fa:	e76a      	b.n	80085d2 <_svfiprintf_r+0x52>
 80086fc:	460c      	mov	r4, r1
 80086fe:	2001      	movs	r0, #1
 8008700:	fb0c 3202 	mla	r2, ip, r2, r3
 8008704:	e7a8      	b.n	8008658 <_svfiprintf_r+0xd8>
 8008706:	2300      	movs	r3, #0
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4619      	mov	r1, r3
 800870e:	3401      	adds	r4, #1
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	4620      	mov	r0, r4
 8008714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008718:	3a30      	subs	r2, #48	@ 0x30
 800871a:	2a09      	cmp	r2, #9
 800871c:	d903      	bls.n	8008726 <_svfiprintf_r+0x1a6>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c6      	beq.n	80086b0 <_svfiprintf_r+0x130>
 8008722:	9105      	str	r1, [sp, #20]
 8008724:	e7c4      	b.n	80086b0 <_svfiprintf_r+0x130>
 8008726:	4604      	mov	r4, r0
 8008728:	2301      	movs	r3, #1
 800872a:	fb0c 2101 	mla	r1, ip, r1, r2
 800872e:	e7f0      	b.n	8008712 <_svfiprintf_r+0x192>
 8008730:	ab03      	add	r3, sp, #12
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	462a      	mov	r2, r5
 8008736:	4638      	mov	r0, r7
 8008738:	4b0e      	ldr	r3, [pc, #56]	@ (8008774 <_svfiprintf_r+0x1f4>)
 800873a:	a904      	add	r1, sp, #16
 800873c:	f3af 8000 	nop.w
 8008740:	1c42      	adds	r2, r0, #1
 8008742:	4606      	mov	r6, r0
 8008744:	d1d6      	bne.n	80086f4 <_svfiprintf_r+0x174>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	065b      	lsls	r3, r3, #25
 800874a:	f53f af2d 	bmi.w	80085a8 <_svfiprintf_r+0x28>
 800874e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008750:	e72c      	b.n	80085ac <_svfiprintf_r+0x2c>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4638      	mov	r0, r7
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <_svfiprintf_r+0x1f4>)
 800875c:	a904      	add	r1, sp, #16
 800875e:	f000 f87d 	bl	800885c <_printf_i>
 8008762:	e7ed      	b.n	8008740 <_svfiprintf_r+0x1c0>
 8008764:	0800a831 	.word	0x0800a831
 8008768:	0800a837 	.word	0x0800a837
 800876c:	0800a83b 	.word	0x0800a83b
 8008770:	00000000 	.word	0x00000000
 8008774:	080084c9 	.word	0x080084c9

08008778 <_printf_common>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	4698      	mov	r8, r3
 8008780:	688a      	ldr	r2, [r1, #8]
 8008782:	690b      	ldr	r3, [r1, #16]
 8008784:	4607      	mov	r7, r0
 8008786:	4293      	cmp	r3, r2
 8008788:	bfb8      	it	lt
 800878a:	4613      	movlt	r3, r2
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008792:	460c      	mov	r4, r1
 8008794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008798:	b10a      	cbz	r2, 800879e <_printf_common+0x26>
 800879a:	3301      	adds	r3, #1
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	0699      	lsls	r1, r3, #26
 80087a2:	bf42      	ittt	mi
 80087a4:	6833      	ldrmi	r3, [r6, #0]
 80087a6:	3302      	addmi	r3, #2
 80087a8:	6033      	strmi	r3, [r6, #0]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	f015 0506 	ands.w	r5, r5, #6
 80087b0:	d106      	bne.n	80087c0 <_printf_common+0x48>
 80087b2:	f104 0a19 	add.w	sl, r4, #25
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	6832      	ldr	r2, [r6, #0]
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	42ab      	cmp	r3, r5
 80087be:	dc2b      	bgt.n	8008818 <_printf_common+0xa0>
 80087c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	3b00      	subs	r3, #0
 80087c8:	bf18      	it	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	0692      	lsls	r2, r2, #26
 80087ce:	d430      	bmi.n	8008832 <_printf_common+0xba>
 80087d0:	4641      	mov	r1, r8
 80087d2:	4638      	mov	r0, r7
 80087d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d8:	47c8      	blx	r9
 80087da:	3001      	adds	r0, #1
 80087dc:	d023      	beq.n	8008826 <_printf_common+0xae>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6922      	ldr	r2, [r4, #16]
 80087e2:	f003 0306 	and.w	r3, r3, #6
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	bf14      	ite	ne
 80087ea:	2500      	movne	r5, #0
 80087ec:	6833      	ldreq	r3, [r6, #0]
 80087ee:	f04f 0600 	mov.w	r6, #0
 80087f2:	bf08      	it	eq
 80087f4:	68e5      	ldreq	r5, [r4, #12]
 80087f6:	f104 041a 	add.w	r4, r4, #26
 80087fa:	bf08      	it	eq
 80087fc:	1aed      	subeq	r5, r5, r3
 80087fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008802:	bf08      	it	eq
 8008804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008808:	4293      	cmp	r3, r2
 800880a:	bfc4      	itt	gt
 800880c:	1a9b      	subgt	r3, r3, r2
 800880e:	18ed      	addgt	r5, r5, r3
 8008810:	42b5      	cmp	r5, r6
 8008812:	d11a      	bne.n	800884a <_printf_common+0xd2>
 8008814:	2000      	movs	r0, #0
 8008816:	e008      	b.n	800882a <_printf_common+0xb2>
 8008818:	2301      	movs	r3, #1
 800881a:	4652      	mov	r2, sl
 800881c:	4641      	mov	r1, r8
 800881e:	4638      	mov	r0, r7
 8008820:	47c8      	blx	r9
 8008822:	3001      	adds	r0, #1
 8008824:	d103      	bne.n	800882e <_printf_common+0xb6>
 8008826:	f04f 30ff 	mov.w	r0, #4294967295
 800882a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882e:	3501      	adds	r5, #1
 8008830:	e7c1      	b.n	80087b6 <_printf_common+0x3e>
 8008832:	2030      	movs	r0, #48	@ 0x30
 8008834:	18e1      	adds	r1, r4, r3
 8008836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008840:	4422      	add	r2, r4
 8008842:	3302      	adds	r3, #2
 8008844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008848:	e7c2      	b.n	80087d0 <_printf_common+0x58>
 800884a:	2301      	movs	r3, #1
 800884c:	4622      	mov	r2, r4
 800884e:	4641      	mov	r1, r8
 8008850:	4638      	mov	r0, r7
 8008852:	47c8      	blx	r9
 8008854:	3001      	adds	r0, #1
 8008856:	d0e6      	beq.n	8008826 <_printf_common+0xae>
 8008858:	3601      	adds	r6, #1
 800885a:	e7d9      	b.n	8008810 <_printf_common+0x98>

0800885c <_printf_i>:
 800885c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	7e0f      	ldrb	r7, [r1, #24]
 8008862:	4691      	mov	r9, r2
 8008864:	2f78      	cmp	r7, #120	@ 0x78
 8008866:	4680      	mov	r8, r0
 8008868:	460c      	mov	r4, r1
 800886a:	469a      	mov	sl, r3
 800886c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800886e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008872:	d807      	bhi.n	8008884 <_printf_i+0x28>
 8008874:	2f62      	cmp	r7, #98	@ 0x62
 8008876:	d80a      	bhi.n	800888e <_printf_i+0x32>
 8008878:	2f00      	cmp	r7, #0
 800887a:	f000 80d3 	beq.w	8008a24 <_printf_i+0x1c8>
 800887e:	2f58      	cmp	r7, #88	@ 0x58
 8008880:	f000 80ba 	beq.w	80089f8 <_printf_i+0x19c>
 8008884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800888c:	e03a      	b.n	8008904 <_printf_i+0xa8>
 800888e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008892:	2b15      	cmp	r3, #21
 8008894:	d8f6      	bhi.n	8008884 <_printf_i+0x28>
 8008896:	a101      	add	r1, pc, #4	@ (adr r1, 800889c <_printf_i+0x40>)
 8008898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800889c:	080088f5 	.word	0x080088f5
 80088a0:	08008909 	.word	0x08008909
 80088a4:	08008885 	.word	0x08008885
 80088a8:	08008885 	.word	0x08008885
 80088ac:	08008885 	.word	0x08008885
 80088b0:	08008885 	.word	0x08008885
 80088b4:	08008909 	.word	0x08008909
 80088b8:	08008885 	.word	0x08008885
 80088bc:	08008885 	.word	0x08008885
 80088c0:	08008885 	.word	0x08008885
 80088c4:	08008885 	.word	0x08008885
 80088c8:	08008a0b 	.word	0x08008a0b
 80088cc:	08008933 	.word	0x08008933
 80088d0:	080089c5 	.word	0x080089c5
 80088d4:	08008885 	.word	0x08008885
 80088d8:	08008885 	.word	0x08008885
 80088dc:	08008a2d 	.word	0x08008a2d
 80088e0:	08008885 	.word	0x08008885
 80088e4:	08008933 	.word	0x08008933
 80088e8:	08008885 	.word	0x08008885
 80088ec:	08008885 	.word	0x08008885
 80088f0:	080089cd 	.word	0x080089cd
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	1d1a      	adds	r2, r3, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6032      	str	r2, [r6, #0]
 80088fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008904:	2301      	movs	r3, #1
 8008906:	e09e      	b.n	8008a46 <_printf_i+0x1ea>
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	1d19      	adds	r1, r3, #4
 800890e:	6031      	str	r1, [r6, #0]
 8008910:	0606      	lsls	r6, r0, #24
 8008912:	d501      	bpl.n	8008918 <_printf_i+0xbc>
 8008914:	681d      	ldr	r5, [r3, #0]
 8008916:	e003      	b.n	8008920 <_printf_i+0xc4>
 8008918:	0645      	lsls	r5, r0, #25
 800891a:	d5fb      	bpl.n	8008914 <_printf_i+0xb8>
 800891c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008920:	2d00      	cmp	r5, #0
 8008922:	da03      	bge.n	800892c <_printf_i+0xd0>
 8008924:	232d      	movs	r3, #45	@ 0x2d
 8008926:	426d      	negs	r5, r5
 8008928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892c:	230a      	movs	r3, #10
 800892e:	4859      	ldr	r0, [pc, #356]	@ (8008a94 <_printf_i+0x238>)
 8008930:	e011      	b.n	8008956 <_printf_i+0xfa>
 8008932:	6821      	ldr	r1, [r4, #0]
 8008934:	6833      	ldr	r3, [r6, #0]
 8008936:	0608      	lsls	r0, r1, #24
 8008938:	f853 5b04 	ldr.w	r5, [r3], #4
 800893c:	d402      	bmi.n	8008944 <_printf_i+0xe8>
 800893e:	0649      	lsls	r1, r1, #25
 8008940:	bf48      	it	mi
 8008942:	b2ad      	uxthmi	r5, r5
 8008944:	2f6f      	cmp	r7, #111	@ 0x6f
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	bf14      	ite	ne
 800894a:	230a      	movne	r3, #10
 800894c:	2308      	moveq	r3, #8
 800894e:	4851      	ldr	r0, [pc, #324]	@ (8008a94 <_printf_i+0x238>)
 8008950:	2100      	movs	r1, #0
 8008952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008956:	6866      	ldr	r6, [r4, #4]
 8008958:	2e00      	cmp	r6, #0
 800895a:	bfa8      	it	ge
 800895c:	6821      	ldrge	r1, [r4, #0]
 800895e:	60a6      	str	r6, [r4, #8]
 8008960:	bfa4      	itt	ge
 8008962:	f021 0104 	bicge.w	r1, r1, #4
 8008966:	6021      	strge	r1, [r4, #0]
 8008968:	b90d      	cbnz	r5, 800896e <_printf_i+0x112>
 800896a:	2e00      	cmp	r6, #0
 800896c:	d04b      	beq.n	8008a06 <_printf_i+0x1aa>
 800896e:	4616      	mov	r6, r2
 8008970:	fbb5 f1f3 	udiv	r1, r5, r3
 8008974:	fb03 5711 	mls	r7, r3, r1, r5
 8008978:	5dc7      	ldrb	r7, [r0, r7]
 800897a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800897e:	462f      	mov	r7, r5
 8008980:	42bb      	cmp	r3, r7
 8008982:	460d      	mov	r5, r1
 8008984:	d9f4      	bls.n	8008970 <_printf_i+0x114>
 8008986:	2b08      	cmp	r3, #8
 8008988:	d10b      	bne.n	80089a2 <_printf_i+0x146>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	07df      	lsls	r7, r3, #31
 800898e:	d508      	bpl.n	80089a2 <_printf_i+0x146>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	6861      	ldr	r1, [r4, #4]
 8008994:	4299      	cmp	r1, r3
 8008996:	bfde      	ittt	le
 8008998:	2330      	movle	r3, #48	@ 0x30
 800899a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800899e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089a2:	1b92      	subs	r2, r2, r6
 80089a4:	6122      	str	r2, [r4, #16]
 80089a6:	464b      	mov	r3, r9
 80089a8:	4621      	mov	r1, r4
 80089aa:	4640      	mov	r0, r8
 80089ac:	f8cd a000 	str.w	sl, [sp]
 80089b0:	aa03      	add	r2, sp, #12
 80089b2:	f7ff fee1 	bl	8008778 <_printf_common>
 80089b6:	3001      	adds	r0, #1
 80089b8:	d14a      	bne.n	8008a50 <_printf_i+0x1f4>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	b004      	add	sp, #16
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	f043 0320 	orr.w	r3, r3, #32
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	2778      	movs	r7, #120	@ 0x78
 80089ce:	4832      	ldr	r0, [pc, #200]	@ (8008a98 <_printf_i+0x23c>)
 80089d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	6831      	ldr	r1, [r6, #0]
 80089d8:	061f      	lsls	r7, r3, #24
 80089da:	f851 5b04 	ldr.w	r5, [r1], #4
 80089de:	d402      	bmi.n	80089e6 <_printf_i+0x18a>
 80089e0:	065f      	lsls	r7, r3, #25
 80089e2:	bf48      	it	mi
 80089e4:	b2ad      	uxthmi	r5, r5
 80089e6:	6031      	str	r1, [r6, #0]
 80089e8:	07d9      	lsls	r1, r3, #31
 80089ea:	bf44      	itt	mi
 80089ec:	f043 0320 	orrmi.w	r3, r3, #32
 80089f0:	6023      	strmi	r3, [r4, #0]
 80089f2:	b11d      	cbz	r5, 80089fc <_printf_i+0x1a0>
 80089f4:	2310      	movs	r3, #16
 80089f6:	e7ab      	b.n	8008950 <_printf_i+0xf4>
 80089f8:	4826      	ldr	r0, [pc, #152]	@ (8008a94 <_printf_i+0x238>)
 80089fa:	e7e9      	b.n	80089d0 <_printf_i+0x174>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f023 0320 	bic.w	r3, r3, #32
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e7f6      	b.n	80089f4 <_printf_i+0x198>
 8008a06:	4616      	mov	r6, r2
 8008a08:	e7bd      	b.n	8008986 <_printf_i+0x12a>
 8008a0a:	6833      	ldr	r3, [r6, #0]
 8008a0c:	6825      	ldr	r5, [r4, #0]
 8008a0e:	1d18      	adds	r0, r3, #4
 8008a10:	6961      	ldr	r1, [r4, #20]
 8008a12:	6030      	str	r0, [r6, #0]
 8008a14:	062e      	lsls	r6, r5, #24
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	d501      	bpl.n	8008a1e <_printf_i+0x1c2>
 8008a1a:	6019      	str	r1, [r3, #0]
 8008a1c:	e002      	b.n	8008a24 <_printf_i+0x1c8>
 8008a1e:	0668      	lsls	r0, r5, #25
 8008a20:	d5fb      	bpl.n	8008a1a <_printf_i+0x1be>
 8008a22:	8019      	strh	r1, [r3, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	4616      	mov	r6, r2
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	e7bc      	b.n	80089a6 <_printf_i+0x14a>
 8008a2c:	6833      	ldr	r3, [r6, #0]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	1d1a      	adds	r2, r3, #4
 8008a32:	6032      	str	r2, [r6, #0]
 8008a34:	681e      	ldr	r6, [r3, #0]
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f000 f9f9 	bl	8008e30 <memchr>
 8008a3e:	b108      	cbz	r0, 8008a44 <_printf_i+0x1e8>
 8008a40:	1b80      	subs	r0, r0, r6
 8008a42:	6060      	str	r0, [r4, #4]
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a4e:	e7aa      	b.n	80089a6 <_printf_i+0x14a>
 8008a50:	4632      	mov	r2, r6
 8008a52:	4649      	mov	r1, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	47d0      	blx	sl
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d0ad      	beq.n	80089ba <_printf_i+0x15e>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	079b      	lsls	r3, r3, #30
 8008a62:	d413      	bmi.n	8008a8c <_printf_i+0x230>
 8008a64:	68e0      	ldr	r0, [r4, #12]
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	4298      	cmp	r0, r3
 8008a6a:	bfb8      	it	lt
 8008a6c:	4618      	movlt	r0, r3
 8008a6e:	e7a6      	b.n	80089be <_printf_i+0x162>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4632      	mov	r2, r6
 8008a74:	4649      	mov	r1, r9
 8008a76:	4640      	mov	r0, r8
 8008a78:	47d0      	blx	sl
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d09d      	beq.n	80089ba <_printf_i+0x15e>
 8008a7e:	3501      	adds	r5, #1
 8008a80:	68e3      	ldr	r3, [r4, #12]
 8008a82:	9903      	ldr	r1, [sp, #12]
 8008a84:	1a5b      	subs	r3, r3, r1
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	dcf2      	bgt.n	8008a70 <_printf_i+0x214>
 8008a8a:	e7eb      	b.n	8008a64 <_printf_i+0x208>
 8008a8c:	2500      	movs	r5, #0
 8008a8e:	f104 0619 	add.w	r6, r4, #25
 8008a92:	e7f5      	b.n	8008a80 <_printf_i+0x224>
 8008a94:	0800a842 	.word	0x0800a842
 8008a98:	0800a853 	.word	0x0800a853

08008a9c <__sflush_r>:
 8008a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	0716      	lsls	r6, r2, #28
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	d454      	bmi.n	8008b54 <__sflush_r+0xb8>
 8008aaa:	684b      	ldr	r3, [r1, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc02      	bgt.n	8008ab6 <__sflush_r+0x1a>
 8008ab0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dd48      	ble.n	8008b48 <__sflush_r+0xac>
 8008ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ab8:	2e00      	cmp	r6, #0
 8008aba:	d045      	beq.n	8008b48 <__sflush_r+0xac>
 8008abc:	2300      	movs	r3, #0
 8008abe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ac2:	682f      	ldr	r7, [r5, #0]
 8008ac4:	6a21      	ldr	r1, [r4, #32]
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	d030      	beq.n	8008b2c <__sflush_r+0x90>
 8008aca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	0759      	lsls	r1, r3, #29
 8008ad0:	d505      	bpl.n	8008ade <__sflush_r+0x42>
 8008ad2:	6863      	ldr	r3, [r4, #4]
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ad8:	b10b      	cbz	r3, 8008ade <__sflush_r+0x42>
 8008ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008adc:	1ad2      	subs	r2, r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	47b0      	blx	r6
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	d106      	bne.n	8008afc <__sflush_r+0x60>
 8008aee:	6829      	ldr	r1, [r5, #0]
 8008af0:	291d      	cmp	r1, #29
 8008af2:	d82b      	bhi.n	8008b4c <__sflush_r+0xb0>
 8008af4:	4a28      	ldr	r2, [pc, #160]	@ (8008b98 <__sflush_r+0xfc>)
 8008af6:	410a      	asrs	r2, r1
 8008af8:	07d6      	lsls	r6, r2, #31
 8008afa:	d427      	bmi.n	8008b4c <__sflush_r+0xb0>
 8008afc:	2200      	movs	r2, #0
 8008afe:	6062      	str	r2, [r4, #4]
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	04d9      	lsls	r1, r3, #19
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	d504      	bpl.n	8008b12 <__sflush_r+0x76>
 8008b08:	1c42      	adds	r2, r0, #1
 8008b0a:	d101      	bne.n	8008b10 <__sflush_r+0x74>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b903      	cbnz	r3, 8008b12 <__sflush_r+0x76>
 8008b10:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b14:	602f      	str	r7, [r5, #0]
 8008b16:	b1b9      	cbz	r1, 8008b48 <__sflush_r+0xac>
 8008b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d002      	beq.n	8008b26 <__sflush_r+0x8a>
 8008b20:	4628      	mov	r0, r5
 8008b22:	f7ff fb09 	bl	8008138 <_free_r>
 8008b26:	2300      	movs	r3, #0
 8008b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b2a:	e00d      	b.n	8008b48 <__sflush_r+0xac>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b0      	blx	r6
 8008b32:	4602      	mov	r2, r0
 8008b34:	1c50      	adds	r0, r2, #1
 8008b36:	d1c9      	bne.n	8008acc <__sflush_r+0x30>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c6      	beq.n	8008acc <__sflush_r+0x30>
 8008b3e:	2b1d      	cmp	r3, #29
 8008b40:	d001      	beq.n	8008b46 <__sflush_r+0xaa>
 8008b42:	2b16      	cmp	r3, #22
 8008b44:	d11d      	bne.n	8008b82 <__sflush_r+0xe6>
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e021      	b.n	8008b90 <__sflush_r+0xf4>
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b50:	b21b      	sxth	r3, r3
 8008b52:	e01a      	b.n	8008b8a <__sflush_r+0xee>
 8008b54:	690f      	ldr	r7, [r1, #16]
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0f6      	beq.n	8008b48 <__sflush_r+0xac>
 8008b5a:	0793      	lsls	r3, r2, #30
 8008b5c:	bf18      	it	ne
 8008b5e:	2300      	movne	r3, #0
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	bf08      	it	eq
 8008b64:	694b      	ldreq	r3, [r1, #20]
 8008b66:	1bf6      	subs	r6, r6, r7
 8008b68:	600f      	str	r7, [r1, #0]
 8008b6a:	608b      	str	r3, [r1, #8]
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	ddeb      	ble.n	8008b48 <__sflush_r+0xac>
 8008b70:	4633      	mov	r3, r6
 8008b72:	463a      	mov	r2, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	6a21      	ldr	r1, [r4, #32]
 8008b78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b7c:	47e0      	blx	ip
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	dc07      	bgt.n	8008b92 <__sflush_r+0xf6>
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b92:	4407      	add	r7, r0
 8008b94:	1a36      	subs	r6, r6, r0
 8008b96:	e7e9      	b.n	8008b6c <__sflush_r+0xd0>
 8008b98:	dfbffffe 	.word	0xdfbffffe

08008b9c <_fflush_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	690b      	ldr	r3, [r1, #16]
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	b913      	cbnz	r3, 8008bac <_fflush_r+0x10>
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	4628      	mov	r0, r5
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	b118      	cbz	r0, 8008bb6 <_fflush_r+0x1a>
 8008bae:	6a03      	ldr	r3, [r0, #32]
 8008bb0:	b90b      	cbnz	r3, 8008bb6 <_fflush_r+0x1a>
 8008bb2:	f7fe f82b 	bl	8006c0c <__sinit>
 8008bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f3      	beq.n	8008ba6 <_fflush_r+0xa>
 8008bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bc0:	07d0      	lsls	r0, r2, #31
 8008bc2:	d404      	bmi.n	8008bce <_fflush_r+0x32>
 8008bc4:	0599      	lsls	r1, r3, #22
 8008bc6:	d402      	bmi.n	8008bce <_fflush_r+0x32>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bca:	f7ff fa87 	bl	80080dc <__retarget_lock_acquire_recursive>
 8008bce:	4628      	mov	r0, r5
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	f7ff ff63 	bl	8008a9c <__sflush_r>
 8008bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bd8:	4605      	mov	r5, r0
 8008bda:	07da      	lsls	r2, r3, #31
 8008bdc:	d4e4      	bmi.n	8008ba8 <_fflush_r+0xc>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	059b      	lsls	r3, r3, #22
 8008be2:	d4e1      	bmi.n	8008ba8 <_fflush_r+0xc>
 8008be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be6:	f7ff fa7b 	bl	80080e0 <__retarget_lock_release_recursive>
 8008bea:	e7dd      	b.n	8008ba8 <_fflush_r+0xc>

08008bec <fiprintf>:
 8008bec:	b40e      	push	{r1, r2, r3}
 8008bee:	b503      	push	{r0, r1, lr}
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	4805      	ldr	r0, [pc, #20]	@ (8008c0c <fiprintf+0x20>)
 8008bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f000 fb67 	bl	80092d0 <_vfiprintf_r>
 8008c02:	b002      	add	sp, #8
 8008c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c08:	b003      	add	sp, #12
 8008c0a:	4770      	bx	lr
 8008c0c:	2000003c 	.word	0x2000003c

08008c10 <siscanf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008c16:	b530      	push	{r4, r5, lr}
 8008c18:	b09c      	sub	sp, #112	@ 0x70
 8008c1a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008c1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008c20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008c24:	9002      	str	r0, [sp, #8]
 8008c26:	9006      	str	r0, [sp, #24]
 8008c28:	f7f7 fa9a 	bl	8000160 <strlen>
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <siscanf+0x4c>)
 8008c2e:	9003      	str	r0, [sp, #12]
 8008c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c32:	2300      	movs	r3, #0
 8008c34:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c36:	9314      	str	r3, [sp, #80]	@ 0x50
 8008c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c3c:	9007      	str	r0, [sp, #28]
 8008c3e:	4808      	ldr	r0, [pc, #32]	@ (8008c60 <siscanf+0x50>)
 8008c40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c44:	462a      	mov	r2, r5
 8008c46:	4623      	mov	r3, r4
 8008c48:	a902      	add	r1, sp, #8
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	9401      	str	r4, [sp, #4]
 8008c4e:	f000 f9a5 	bl	8008f9c <__ssvfiscanf_r>
 8008c52:	b01c      	add	sp, #112	@ 0x70
 8008c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c58:	b003      	add	sp, #12
 8008c5a:	4770      	bx	lr
 8008c5c:	08006d03 	.word	0x08006d03
 8008c60:	2000003c 	.word	0x2000003c

08008c64 <memmove>:
 8008c64:	4288      	cmp	r0, r1
 8008c66:	b510      	push	{r4, lr}
 8008c68:	eb01 0402 	add.w	r4, r1, r2
 8008c6c:	d902      	bls.n	8008c74 <memmove+0x10>
 8008c6e:	4284      	cmp	r4, r0
 8008c70:	4623      	mov	r3, r4
 8008c72:	d807      	bhi.n	8008c84 <memmove+0x20>
 8008c74:	1e43      	subs	r3, r0, #1
 8008c76:	42a1      	cmp	r1, r4
 8008c78:	d008      	beq.n	8008c8c <memmove+0x28>
 8008c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c82:	e7f8      	b.n	8008c76 <memmove+0x12>
 8008c84:	4601      	mov	r1, r0
 8008c86:	4402      	add	r2, r0
 8008c88:	428a      	cmp	r2, r1
 8008c8a:	d100      	bne.n	8008c8e <memmove+0x2a>
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c96:	e7f7      	b.n	8008c88 <memmove+0x24>

08008c98 <strncmp>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	b16a      	cbz	r2, 8008cb8 <strncmp+0x20>
 8008c9c:	3901      	subs	r1, #1
 8008c9e:	1884      	adds	r4, r0, r2
 8008ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d103      	bne.n	8008cb4 <strncmp+0x1c>
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d001      	beq.n	8008cb4 <strncmp+0x1c>
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d1f5      	bne.n	8008ca0 <strncmp+0x8>
 8008cb4:	1ad0      	subs	r0, r2, r3
 8008cb6:	bd10      	pop	{r4, pc}
 8008cb8:	4610      	mov	r0, r2
 8008cba:	e7fc      	b.n	8008cb6 <strncmp+0x1e>

08008cbc <__gettzinfo>:
 8008cbc:	4800      	ldr	r0, [pc, #0]	@ (8008cc0 <__gettzinfo+0x4>)
 8008cbe:	4770      	bx	lr
 8008cc0:	20000090 	.word	0x20000090

08008cc4 <gmtime_r>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	2300      	movs	r3, #0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	e9d0 0100 	ldrd	r0, r1, [r0]
 8008cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8008e00 <gmtime_r+0x13c>)
 8008cd2:	f7f7 fa4d 	bl	8000170 <__aeabi_ldivmod>
 8008cd6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	bfbc      	itt	lt
 8008cde:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8008ce2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8008ce6:	fbb2 f3f1 	udiv	r3, r2, r1
 8008cea:	fb01 2213 	mls	r2, r1, r3, r2
 8008cee:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8008cf2:	60a3      	str	r3, [r4, #8]
 8008cf4:	fbb2 f3f1 	udiv	r3, r2, r1
 8008cf8:	fb01 2213 	mls	r2, r1, r3, r2
 8008cfc:	6022      	str	r2, [r4, #0]
 8008cfe:	f04f 0207 	mov.w	r2, #7
 8008d02:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8008d06:	bfac      	ite	ge
 8008d08:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8008d0c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	1cc3      	adds	r3, r0, #3
 8008d14:	fb93 f2f2 	sdiv	r2, r3, r2
 8008d18:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	bf48      	it	mi
 8008d20:	3307      	addmi	r3, #7
 8008d22:	2800      	cmp	r0, #0
 8008d24:	4937      	ldr	r1, [pc, #220]	@ (8008e04 <gmtime_r+0x140>)
 8008d26:	61a3      	str	r3, [r4, #24]
 8008d28:	bfbd      	ittte	lt
 8008d2a:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8008d2e:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8008d32:	fb93 f1f1 	sdivlt	r1, r3, r1
 8008d36:	fb90 f1f1 	sdivge	r1, r0, r1
 8008d3a:	4b33      	ldr	r3, [pc, #204]	@ (8008e08 <gmtime_r+0x144>)
 8008d3c:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8008d40:	fb03 0001 	mla	r0, r3, r1, r0
 8008d44:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8008d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d4c:	fbb0 f2fc 	udiv	r2, r0, ip
 8008d50:	4403      	add	r3, r0
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	4a2d      	ldr	r2, [pc, #180]	@ (8008e0c <gmtime_r+0x148>)
 8008d56:	f240 176d 	movw	r7, #365	@ 0x16d
 8008d5a:	fbb0 f2f2 	udiv	r2, r0, r2
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	fbb3 f2f7 	udiv	r2, r3, r7
 8008d64:	2664      	movs	r6, #100	@ 0x64
 8008d66:	fbb3 f3fc 	udiv	r3, r3, ip
 8008d6a:	fbb2 f5f6 	udiv	r5, r2, r6
 8008d6e:	1aeb      	subs	r3, r5, r3
 8008d70:	4403      	add	r3, r0
 8008d72:	2099      	movs	r0, #153	@ 0x99
 8008d74:	fb07 3312 	mls	r3, r7, r2, r3
 8008d78:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8008d7c:	3702      	adds	r7, #2
 8008d7e:	fbb7 fcf0 	udiv	ip, r7, r0
 8008d82:	f04f 0805 	mov.w	r8, #5
 8008d86:	fb00 f00c 	mul.w	r0, r0, ip
 8008d8a:	3002      	adds	r0, #2
 8008d8c:	fbb0 f0f8 	udiv	r0, r0, r8
 8008d90:	f103 0e01 	add.w	lr, r3, #1
 8008d94:	ebae 0000 	sub.w	r0, lr, r0
 8008d98:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8008d9c:	4577      	cmp	r7, lr
 8008d9e:	bf8c      	ite	hi
 8008da0:	f06f 0709 	mvnhi.w	r7, #9
 8008da4:	2702      	movls	r7, #2
 8008da6:	4467      	add	r7, ip
 8008da8:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8008dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db0:	2f01      	cmp	r7, #1
 8008db2:	bf98      	it	ls
 8008db4:	3101      	addls	r1, #1
 8008db6:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8008dba:	d30c      	bcc.n	8008dd6 <gmtime_r+0x112>
 8008dbc:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008dc0:	61e3      	str	r3, [r4, #28]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8008dc8:	60e0      	str	r0, [r4, #12]
 8008dca:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	6223      	str	r3, [r4, #32]
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd6:	f012 0f03 	tst.w	r2, #3
 8008dda:	d102      	bne.n	8008de2 <gmtime_r+0x11e>
 8008ddc:	fb06 2515 	mls	r5, r6, r5, r2
 8008de0:	b95d      	cbnz	r5, 8008dfa <gmtime_r+0x136>
 8008de2:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8008de6:	fbb2 f6f5 	udiv	r6, r2, r5
 8008dea:	fb05 2216 	mls	r2, r5, r6, r2
 8008dee:	fab2 f282 	clz	r2, r2
 8008df2:	0952      	lsrs	r2, r2, #5
 8008df4:	333b      	adds	r3, #59	@ 0x3b
 8008df6:	4413      	add	r3, r2
 8008df8:	e7e2      	b.n	8008dc0 <gmtime_r+0xfc>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7fa      	b.n	8008df4 <gmtime_r+0x130>
 8008dfe:	bf00      	nop
 8008e00:	00015180 	.word	0x00015180
 8008e04:	00023ab1 	.word	0x00023ab1
 8008e08:	fffdc54f 	.word	0xfffdc54f
 8008e0c:	00023ab0 	.word	0x00023ab0

08008e10 <_sbrk_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	2300      	movs	r3, #0
 8008e14:	4d05      	ldr	r5, [pc, #20]	@ (8008e2c <_sbrk_r+0x1c>)
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7f8 fb5e 	bl	80014dc <_sbrk>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_sbrk_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_sbrk_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20001534 	.word	0x20001534

08008e30 <memchr>:
 8008e30:	4603      	mov	r3, r0
 8008e32:	b510      	push	{r4, lr}
 8008e34:	b2c9      	uxtb	r1, r1
 8008e36:	4402      	add	r2, r0
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	d101      	bne.n	8008e42 <memchr+0x12>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e003      	b.n	8008e4a <memchr+0x1a>
 8008e42:	7804      	ldrb	r4, [r0, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	428c      	cmp	r4, r1
 8008e48:	d1f6      	bne.n	8008e38 <memchr+0x8>
 8008e4a:	bd10      	pop	{r4, pc}

08008e4c <memcpy>:
 8008e4c:	440a      	add	r2, r1
 8008e4e:	4291      	cmp	r1, r2
 8008e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e54:	d100      	bne.n	8008e58 <memcpy+0xc>
 8008e56:	4770      	bx	lr
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e64:	d1f9      	bne.n	8008e5a <memcpy+0xe>
 8008e66:	bd10      	pop	{r4, pc}

08008e68 <abort>:
 8008e68:	2006      	movs	r0, #6
 8008e6a:	b508      	push	{r3, lr}
 8008e6c:	f000 fdc2 	bl	80099f4 <raise>
 8008e70:	2001      	movs	r0, #1
 8008e72:	f7f8 fabe 	bl	80013f2 <_exit>
	...

08008e78 <__env_lock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	@ (8008e80 <__env_lock+0x8>)
 8008e7a:	f7ff b92f 	b.w	80080dc <__retarget_lock_acquire_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20001539 	.word	0x20001539

08008e84 <__env_unlock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	@ (8008e8c <__env_unlock+0x8>)
 8008e86:	f7ff b92b 	b.w	80080e0 <__retarget_lock_release_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	20001539 	.word	0x20001539

08008e90 <_realloc_r>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	4680      	mov	r8, r0
 8008e96:	4615      	mov	r5, r2
 8008e98:	460c      	mov	r4, r1
 8008e9a:	b921      	cbnz	r1, 8008ea6 <_realloc_r+0x16>
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea2:	f7ff ba0b 	b.w	80082bc <_malloc_r>
 8008ea6:	b92a      	cbnz	r2, 8008eb4 <_realloc_r+0x24>
 8008ea8:	f7ff f946 	bl	8008138 <_free_r>
 8008eac:	2400      	movs	r4, #0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb4:	f000 fdba 	bl	8009a2c <_malloc_usable_size_r>
 8008eb8:	4285      	cmp	r5, r0
 8008eba:	4606      	mov	r6, r0
 8008ebc:	d802      	bhi.n	8008ec4 <_realloc_r+0x34>
 8008ebe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ec2:	d8f4      	bhi.n	8008eae <_realloc_r+0x1e>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f7ff f9f8 	bl	80082bc <_malloc_r>
 8008ecc:	4607      	mov	r7, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d0ec      	beq.n	8008eac <_realloc_r+0x1c>
 8008ed2:	42b5      	cmp	r5, r6
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	bf28      	it	cs
 8008eda:	4632      	movcs	r2, r6
 8008edc:	f7ff ffb6 	bl	8008e4c <memcpy>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff f928 	bl	8008138 <_free_r>
 8008ee8:	463c      	mov	r4, r7
 8008eea:	e7e0      	b.n	8008eae <_realloc_r+0x1e>

08008eec <_sungetc_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	1c4b      	adds	r3, r1, #1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	d103      	bne.n	8008efc <_sungetc_r+0x10>
 8008ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ef8:	4628      	mov	r0, r5
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	8993      	ldrh	r3, [r2, #12]
 8008efe:	b2cd      	uxtb	r5, r1
 8008f00:	f023 0320 	bic.w	r3, r3, #32
 8008f04:	8193      	strh	r3, [r2, #12]
 8008f06:	6853      	ldr	r3, [r2, #4]
 8008f08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f0a:	b18a      	cbz	r2, 8008f30 <_sungetc_r+0x44>
 8008f0c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	dd08      	ble.n	8008f24 <_sungetc_r+0x38>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	1e5a      	subs	r2, r3, #1
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	e7e9      	b.n	8008ef8 <_sungetc_r+0xc>
 8008f24:	4621      	mov	r1, r4
 8008f26:	f000 fc70 	bl	800980a <__submore>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d0f1      	beq.n	8008f12 <_sungetc_r+0x26>
 8008f2e:	e7e1      	b.n	8008ef4 <_sungetc_r+0x8>
 8008f30:	6921      	ldr	r1, [r4, #16]
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	b141      	cbz	r1, 8008f48 <_sungetc_r+0x5c>
 8008f36:	4291      	cmp	r1, r2
 8008f38:	d206      	bcs.n	8008f48 <_sungetc_r+0x5c>
 8008f3a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008f3e:	42a9      	cmp	r1, r5
 8008f40:	d102      	bne.n	8008f48 <_sungetc_r+0x5c>
 8008f42:	3a01      	subs	r2, #1
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	e7ea      	b.n	8008f1e <_sungetc_r+0x32>
 8008f48:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f52:	2303      	movs	r3, #3
 8008f54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f56:	4623      	mov	r3, r4
 8008f58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e7de      	b.n	8008f20 <_sungetc_r+0x34>

08008f62 <__ssrefill_r>:
 8008f62:	b510      	push	{r4, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008f68:	b169      	cbz	r1, 8008f86 <__ssrefill_r+0x24>
 8008f6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	d001      	beq.n	8008f76 <__ssrefill_r+0x14>
 8008f72:	f7ff f8e1 	bl	8008138 <_free_r>
 8008f76:	2000      	movs	r0, #0
 8008f78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f7a:	6360      	str	r0, [r4, #52]	@ 0x34
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	b113      	cbz	r3, 8008f86 <__ssrefill_r+0x24>
 8008f80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f043 0320 	orr.w	r3, r3, #32
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	e7f3      	b.n	8008f84 <__ssrefill_r+0x22>

08008f9c <__ssvfiscanf_r>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008faa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008fae:	49aa      	ldr	r1, [pc, #680]	@ (8009258 <__ssvfiscanf_r+0x2bc>)
 8008fb0:	f10d 0804 	add.w	r8, sp, #4
 8008fb4:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008fb6:	49a9      	ldr	r1, [pc, #676]	@ (800925c <__ssvfiscanf_r+0x2c0>)
 8008fb8:	4fa9      	ldr	r7, [pc, #676]	@ (8009260 <__ssvfiscanf_r+0x2c4>)
 8008fba:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008fbe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	7813      	ldrb	r3, [r2, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8159 	beq.w	800927c <__ssvfiscanf_r+0x2e0>
 8008fca:	5cf9      	ldrb	r1, [r7, r3]
 8008fcc:	1c55      	adds	r5, r2, #1
 8008fce:	f011 0108 	ands.w	r1, r1, #8
 8008fd2:	d019      	beq.n	8009008 <__ssvfiscanf_r+0x6c>
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd0f      	ble.n	8008ffa <__ssvfiscanf_r+0x5e>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	781a      	ldrb	r2, [r3, #0]
 8008fde:	5cba      	ldrb	r2, [r7, r2]
 8008fe0:	0712      	lsls	r2, r2, #28
 8008fe2:	d401      	bmi.n	8008fe8 <__ssvfiscanf_r+0x4c>
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	e7ec      	b.n	8008fc2 <__ssvfiscanf_r+0x26>
 8008fe8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008fea:	3301      	adds	r3, #1
 8008fec:	3201      	adds	r2, #1
 8008fee:	9245      	str	r2, [sp, #276]	@ 0x114
 8008ff0:	6862      	ldr	r2, [r4, #4]
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	3a01      	subs	r2, #1
 8008ff6:	6062      	str	r2, [r4, #4]
 8008ff8:	e7ec      	b.n	8008fd4 <__ssvfiscanf_r+0x38>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009000:	4798      	blx	r3
 8009002:	2800      	cmp	r0, #0
 8009004:	d0e9      	beq.n	8008fda <__ssvfiscanf_r+0x3e>
 8009006:	e7ed      	b.n	8008fe4 <__ssvfiscanf_r+0x48>
 8009008:	2b25      	cmp	r3, #37	@ 0x25
 800900a:	d012      	beq.n	8009032 <__ssvfiscanf_r+0x96>
 800900c:	4699      	mov	r9, r3
 800900e:	6863      	ldr	r3, [r4, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f340 8094 	ble.w	800913e <__ssvfiscanf_r+0x1a2>
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	7813      	ldrb	r3, [r2, #0]
 800901a:	454b      	cmp	r3, r9
 800901c:	f040 812e 	bne.w	800927c <__ssvfiscanf_r+0x2e0>
 8009020:	6863      	ldr	r3, [r4, #4]
 8009022:	3201      	adds	r2, #1
 8009024:	3b01      	subs	r3, #1
 8009026:	6063      	str	r3, [r4, #4]
 8009028:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	9345      	str	r3, [sp, #276]	@ 0x114
 8009030:	e7d8      	b.n	8008fe4 <__ssvfiscanf_r+0x48>
 8009032:	9141      	str	r1, [sp, #260]	@ 0x104
 8009034:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009036:	7853      	ldrb	r3, [r2, #1]
 8009038:	2b2a      	cmp	r3, #42	@ 0x2a
 800903a:	bf04      	itt	eq
 800903c:	2310      	moveq	r3, #16
 800903e:	1c95      	addeq	r5, r2, #2
 8009040:	f04f 020a 	mov.w	r2, #10
 8009044:	bf08      	it	eq
 8009046:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009048:	46a9      	mov	r9, r5
 800904a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800904e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009052:	2b09      	cmp	r3, #9
 8009054:	d91e      	bls.n	8009094 <__ssvfiscanf_r+0xf8>
 8009056:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8009264 <__ssvfiscanf_r+0x2c8>
 800905a:	2203      	movs	r2, #3
 800905c:	4650      	mov	r0, sl
 800905e:	f7ff fee7 	bl	8008e30 <memchr>
 8009062:	b138      	cbz	r0, 8009074 <__ssvfiscanf_r+0xd8>
 8009064:	2301      	movs	r3, #1
 8009066:	464d      	mov	r5, r9
 8009068:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800906a:	eba0 000a 	sub.w	r0, r0, sl
 800906e:	4083      	lsls	r3, r0
 8009070:	4313      	orrs	r3, r2
 8009072:	9341      	str	r3, [sp, #260]	@ 0x104
 8009074:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009078:	2b78      	cmp	r3, #120	@ 0x78
 800907a:	d806      	bhi.n	800908a <__ssvfiscanf_r+0xee>
 800907c:	2b57      	cmp	r3, #87	@ 0x57
 800907e:	d810      	bhi.n	80090a2 <__ssvfiscanf_r+0x106>
 8009080:	2b25      	cmp	r3, #37	@ 0x25
 8009082:	d0c3      	beq.n	800900c <__ssvfiscanf_r+0x70>
 8009084:	d856      	bhi.n	8009134 <__ssvfiscanf_r+0x198>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d064      	beq.n	8009154 <__ssvfiscanf_r+0x1b8>
 800908a:	2303      	movs	r3, #3
 800908c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800908e:	230a      	movs	r3, #10
 8009090:	9342      	str	r3, [sp, #264]	@ 0x108
 8009092:	e077      	b.n	8009184 <__ssvfiscanf_r+0x1e8>
 8009094:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009096:	464d      	mov	r5, r9
 8009098:	fb02 1103 	mla	r1, r2, r3, r1
 800909c:	3930      	subs	r1, #48	@ 0x30
 800909e:	9143      	str	r1, [sp, #268]	@ 0x10c
 80090a0:	e7d2      	b.n	8009048 <__ssvfiscanf_r+0xac>
 80090a2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80090a6:	2a20      	cmp	r2, #32
 80090a8:	d8ef      	bhi.n	800908a <__ssvfiscanf_r+0xee>
 80090aa:	a101      	add	r1, pc, #4	@ (adr r1, 80090b0 <__ssvfiscanf_r+0x114>)
 80090ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090b0:	08009163 	.word	0x08009163
 80090b4:	0800908b 	.word	0x0800908b
 80090b8:	0800908b 	.word	0x0800908b
 80090bc:	080091bd 	.word	0x080091bd
 80090c0:	0800908b 	.word	0x0800908b
 80090c4:	0800908b 	.word	0x0800908b
 80090c8:	0800908b 	.word	0x0800908b
 80090cc:	0800908b 	.word	0x0800908b
 80090d0:	0800908b 	.word	0x0800908b
 80090d4:	0800908b 	.word	0x0800908b
 80090d8:	0800908b 	.word	0x0800908b
 80090dc:	080091d3 	.word	0x080091d3
 80090e0:	080091b9 	.word	0x080091b9
 80090e4:	0800913b 	.word	0x0800913b
 80090e8:	0800913b 	.word	0x0800913b
 80090ec:	0800913b 	.word	0x0800913b
 80090f0:	0800908b 	.word	0x0800908b
 80090f4:	08009175 	.word	0x08009175
 80090f8:	0800908b 	.word	0x0800908b
 80090fc:	0800908b 	.word	0x0800908b
 8009100:	0800908b 	.word	0x0800908b
 8009104:	0800908b 	.word	0x0800908b
 8009108:	080091e3 	.word	0x080091e3
 800910c:	0800917d 	.word	0x0800917d
 8009110:	0800915b 	.word	0x0800915b
 8009114:	0800908b 	.word	0x0800908b
 8009118:	0800908b 	.word	0x0800908b
 800911c:	080091df 	.word	0x080091df
 8009120:	0800908b 	.word	0x0800908b
 8009124:	080091b9 	.word	0x080091b9
 8009128:	0800908b 	.word	0x0800908b
 800912c:	0800908b 	.word	0x0800908b
 8009130:	08009163 	.word	0x08009163
 8009134:	3b45      	subs	r3, #69	@ 0x45
 8009136:	2b02      	cmp	r3, #2
 8009138:	d8a7      	bhi.n	800908a <__ssvfiscanf_r+0xee>
 800913a:	2305      	movs	r3, #5
 800913c:	e021      	b.n	8009182 <__ssvfiscanf_r+0x1e6>
 800913e:	4621      	mov	r1, r4
 8009140:	4630      	mov	r0, r6
 8009142:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009144:	4798      	blx	r3
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f af65 	beq.w	8009016 <__ssvfiscanf_r+0x7a>
 800914c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800914e:	2800      	cmp	r0, #0
 8009150:	f040 808c 	bne.w	800926c <__ssvfiscanf_r+0x2d0>
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e08c      	b.n	8009274 <__ssvfiscanf_r+0x2d8>
 800915a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800915c:	f042 0220 	orr.w	r2, r2, #32
 8009160:	9241      	str	r2, [sp, #260]	@ 0x104
 8009162:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009168:	9241      	str	r2, [sp, #260]	@ 0x104
 800916a:	2210      	movs	r2, #16
 800916c:	2b6e      	cmp	r3, #110	@ 0x6e
 800916e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009170:	d902      	bls.n	8009178 <__ssvfiscanf_r+0x1dc>
 8009172:	e005      	b.n	8009180 <__ssvfiscanf_r+0x1e4>
 8009174:	2300      	movs	r3, #0
 8009176:	9342      	str	r3, [sp, #264]	@ 0x108
 8009178:	2303      	movs	r3, #3
 800917a:	e002      	b.n	8009182 <__ssvfiscanf_r+0x1e6>
 800917c:	2308      	movs	r3, #8
 800917e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009180:	2304      	movs	r3, #4
 8009182:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd39      	ble.n	80091fe <__ssvfiscanf_r+0x262>
 800918a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800918c:	0659      	lsls	r1, r3, #25
 800918e:	d404      	bmi.n	800919a <__ssvfiscanf_r+0x1fe>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	5cba      	ldrb	r2, [r7, r2]
 8009196:	0712      	lsls	r2, r2, #28
 8009198:	d438      	bmi.n	800920c <__ssvfiscanf_r+0x270>
 800919a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800919c:	2b02      	cmp	r3, #2
 800919e:	dc47      	bgt.n	8009230 <__ssvfiscanf_r+0x294>
 80091a0:	466b      	mov	r3, sp
 80091a2:	4622      	mov	r2, r4
 80091a4:	4630      	mov	r0, r6
 80091a6:	a941      	add	r1, sp, #260	@ 0x104
 80091a8:	f000 f9aa 	bl	8009500 <_scanf_chars>
 80091ac:	2801      	cmp	r0, #1
 80091ae:	d065      	beq.n	800927c <__ssvfiscanf_r+0x2e0>
 80091b0:	2802      	cmp	r0, #2
 80091b2:	f47f af17 	bne.w	8008fe4 <__ssvfiscanf_r+0x48>
 80091b6:	e7c9      	b.n	800914c <__ssvfiscanf_r+0x1b0>
 80091b8:	220a      	movs	r2, #10
 80091ba:	e7d7      	b.n	800916c <__ssvfiscanf_r+0x1d0>
 80091bc:	4629      	mov	r1, r5
 80091be:	4640      	mov	r0, r8
 80091c0:	f000 faea 	bl	8009798 <__sccl>
 80091c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80091c6:	4605      	mov	r5, r0
 80091c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091cc:	9341      	str	r3, [sp, #260]	@ 0x104
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7d7      	b.n	8009182 <__ssvfiscanf_r+0x1e6>
 80091d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80091d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091d8:	9341      	str	r3, [sp, #260]	@ 0x104
 80091da:	2300      	movs	r3, #0
 80091dc:	e7d1      	b.n	8009182 <__ssvfiscanf_r+0x1e6>
 80091de:	2302      	movs	r3, #2
 80091e0:	e7cf      	b.n	8009182 <__ssvfiscanf_r+0x1e6>
 80091e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80091e4:	06c3      	lsls	r3, r0, #27
 80091e6:	f53f aefd 	bmi.w	8008fe4 <__ssvfiscanf_r+0x48>
 80091ea:	9b00      	ldr	r3, [sp, #0]
 80091ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80091ee:	1d19      	adds	r1, r3, #4
 80091f0:	9100      	str	r1, [sp, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	07c0      	lsls	r0, r0, #31
 80091f6:	bf4c      	ite	mi
 80091f8:	801a      	strhmi	r2, [r3, #0]
 80091fa:	601a      	strpl	r2, [r3, #0]
 80091fc:	e6f2      	b.n	8008fe4 <__ssvfiscanf_r+0x48>
 80091fe:	4621      	mov	r1, r4
 8009200:	4630      	mov	r0, r6
 8009202:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009204:	4798      	blx	r3
 8009206:	2800      	cmp	r0, #0
 8009208:	d0bf      	beq.n	800918a <__ssvfiscanf_r+0x1ee>
 800920a:	e79f      	b.n	800914c <__ssvfiscanf_r+0x1b0>
 800920c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800920e:	3201      	adds	r2, #1
 8009210:	9245      	str	r2, [sp, #276]	@ 0x114
 8009212:	6862      	ldr	r2, [r4, #4]
 8009214:	3a01      	subs	r2, #1
 8009216:	2a00      	cmp	r2, #0
 8009218:	6062      	str	r2, [r4, #4]
 800921a:	dd02      	ble.n	8009222 <__ssvfiscanf_r+0x286>
 800921c:	3301      	adds	r3, #1
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	e7b6      	b.n	8009190 <__ssvfiscanf_r+0x1f4>
 8009222:	4621      	mov	r1, r4
 8009224:	4630      	mov	r0, r6
 8009226:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009228:	4798      	blx	r3
 800922a:	2800      	cmp	r0, #0
 800922c:	d0b0      	beq.n	8009190 <__ssvfiscanf_r+0x1f4>
 800922e:	e78d      	b.n	800914c <__ssvfiscanf_r+0x1b0>
 8009230:	2b04      	cmp	r3, #4
 8009232:	dc06      	bgt.n	8009242 <__ssvfiscanf_r+0x2a6>
 8009234:	466b      	mov	r3, sp
 8009236:	4622      	mov	r2, r4
 8009238:	4630      	mov	r0, r6
 800923a:	a941      	add	r1, sp, #260	@ 0x104
 800923c:	f000 f9ba 	bl	80095b4 <_scanf_i>
 8009240:	e7b4      	b.n	80091ac <__ssvfiscanf_r+0x210>
 8009242:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <__ssvfiscanf_r+0x2cc>)
 8009244:	2b00      	cmp	r3, #0
 8009246:	f43f aecd 	beq.w	8008fe4 <__ssvfiscanf_r+0x48>
 800924a:	466b      	mov	r3, sp
 800924c:	4622      	mov	r2, r4
 800924e:	4630      	mov	r0, r6
 8009250:	a941      	add	r1, sp, #260	@ 0x104
 8009252:	f3af 8000 	nop.w
 8009256:	e7a9      	b.n	80091ac <__ssvfiscanf_r+0x210>
 8009258:	08008eed 	.word	0x08008eed
 800925c:	08008f63 	.word	0x08008f63
 8009260:	0800a731 	.word	0x0800a731
 8009264:	0800a837 	.word	0x0800a837
 8009268:	00000000 	.word	0x00000000
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	065b      	lsls	r3, r3, #25
 8009270:	f53f af70 	bmi.w	8009154 <__ssvfiscanf_r+0x1b8>
 8009274:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800927e:	e7f9      	b.n	8009274 <__ssvfiscanf_r+0x2d8>

08009280 <__sfputc_r>:
 8009280:	6893      	ldr	r3, [r2, #8]
 8009282:	b410      	push	{r4}
 8009284:	3b01      	subs	r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	6093      	str	r3, [r2, #8]
 800928a:	da07      	bge.n	800929c <__sfputc_r+0x1c>
 800928c:	6994      	ldr	r4, [r2, #24]
 800928e:	42a3      	cmp	r3, r4
 8009290:	db01      	blt.n	8009296 <__sfputc_r+0x16>
 8009292:	290a      	cmp	r1, #10
 8009294:	d102      	bne.n	800929c <__sfputc_r+0x1c>
 8009296:	bc10      	pop	{r4}
 8009298:	f000 baef 	b.w	800987a <__swbuf_r>
 800929c:	6813      	ldr	r3, [r2, #0]
 800929e:	1c58      	adds	r0, r3, #1
 80092a0:	6010      	str	r0, [r2, #0]
 80092a2:	7019      	strb	r1, [r3, #0]
 80092a4:	4608      	mov	r0, r1
 80092a6:	bc10      	pop	{r4}
 80092a8:	4770      	bx	lr

080092aa <__sfputs_r>:
 80092aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	4614      	mov	r4, r2
 80092b2:	18d5      	adds	r5, r2, r3
 80092b4:	42ac      	cmp	r4, r5
 80092b6:	d101      	bne.n	80092bc <__sfputs_r+0x12>
 80092b8:	2000      	movs	r0, #0
 80092ba:	e007      	b.n	80092cc <__sfputs_r+0x22>
 80092bc:	463a      	mov	r2, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c4:	f7ff ffdc 	bl	8009280 <__sfputc_r>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d1f3      	bne.n	80092b4 <__sfputs_r+0xa>
 80092cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092d0 <_vfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	460d      	mov	r5, r1
 80092d6:	4614      	mov	r4, r2
 80092d8:	4698      	mov	r8, r3
 80092da:	4606      	mov	r6, r0
 80092dc:	b09d      	sub	sp, #116	@ 0x74
 80092de:	b118      	cbz	r0, 80092e8 <_vfiprintf_r+0x18>
 80092e0:	6a03      	ldr	r3, [r0, #32]
 80092e2:	b90b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x18>
 80092e4:	f7fd fc92 	bl	8006c0c <__sinit>
 80092e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092ea:	07d9      	lsls	r1, r3, #31
 80092ec:	d405      	bmi.n	80092fa <_vfiprintf_r+0x2a>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d402      	bmi.n	80092fa <_vfiprintf_r+0x2a>
 80092f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f6:	f7fe fef1 	bl	80080dc <__retarget_lock_acquire_recursive>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	071b      	lsls	r3, r3, #28
 80092fe:	d501      	bpl.n	8009304 <_vfiprintf_r+0x34>
 8009300:	692b      	ldr	r3, [r5, #16]
 8009302:	b99b      	cbnz	r3, 800932c <_vfiprintf_r+0x5c>
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f000 faf6 	bl	80098f8 <__swsetup_r>
 800930c:	b170      	cbz	r0, 800932c <_vfiprintf_r+0x5c>
 800930e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009310:	07dc      	lsls	r4, r3, #31
 8009312:	d504      	bpl.n	800931e <_vfiprintf_r+0x4e>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	b01d      	add	sp, #116	@ 0x74
 800931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	0598      	lsls	r0, r3, #22
 8009322:	d4f7      	bmi.n	8009314 <_vfiprintf_r+0x44>
 8009324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009326:	f7fe fedb 	bl	80080e0 <__retarget_lock_release_recursive>
 800932a:	e7f3      	b.n	8009314 <_vfiprintf_r+0x44>
 800932c:	2300      	movs	r3, #0
 800932e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009330:	2320      	movs	r3, #32
 8009332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009336:	2330      	movs	r3, #48	@ 0x30
 8009338:	f04f 0901 	mov.w	r9, #1
 800933c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009340:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80094ec <_vfiprintf_r+0x21c>
 8009344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009348:	4623      	mov	r3, r4
 800934a:	469a      	mov	sl, r3
 800934c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009350:	b10a      	cbz	r2, 8009356 <_vfiprintf_r+0x86>
 8009352:	2a25      	cmp	r2, #37	@ 0x25
 8009354:	d1f9      	bne.n	800934a <_vfiprintf_r+0x7a>
 8009356:	ebba 0b04 	subs.w	fp, sl, r4
 800935a:	d00b      	beq.n	8009374 <_vfiprintf_r+0xa4>
 800935c:	465b      	mov	r3, fp
 800935e:	4622      	mov	r2, r4
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ffa1 	bl	80092aa <__sfputs_r>
 8009368:	3001      	adds	r0, #1
 800936a:	f000 80a7 	beq.w	80094bc <_vfiprintf_r+0x1ec>
 800936e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009370:	445a      	add	r2, fp
 8009372:	9209      	str	r2, [sp, #36]	@ 0x24
 8009374:	f89a 3000 	ldrb.w	r3, [sl]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 809f 	beq.w	80094bc <_vfiprintf_r+0x1ec>
 800937e:	2300      	movs	r3, #0
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009388:	f10a 0a01 	add.w	sl, sl, #1
 800938c:	9304      	str	r3, [sp, #16]
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009394:	931a      	str	r3, [sp, #104]	@ 0x68
 8009396:	4654      	mov	r4, sl
 8009398:	2205      	movs	r2, #5
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4853      	ldr	r0, [pc, #332]	@ (80094ec <_vfiprintf_r+0x21c>)
 80093a0:	f7ff fd46 	bl	8008e30 <memchr>
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	b9d8      	cbnz	r0, 80093e0 <_vfiprintf_r+0x110>
 80093a8:	06d1      	lsls	r1, r2, #27
 80093aa:	bf44      	itt	mi
 80093ac:	2320      	movmi	r3, #32
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b2:	0713      	lsls	r3, r2, #28
 80093b4:	bf44      	itt	mi
 80093b6:	232b      	movmi	r3, #43	@ 0x2b
 80093b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093bc:	f89a 3000 	ldrb.w	r3, [sl]
 80093c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c2:	d015      	beq.n	80093f0 <_vfiprintf_r+0x120>
 80093c4:	4654      	mov	r4, sl
 80093c6:	2000      	movs	r0, #0
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	4621      	mov	r1, r4
 80093d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d4:	3b30      	subs	r3, #48	@ 0x30
 80093d6:	2b09      	cmp	r3, #9
 80093d8:	d94b      	bls.n	8009472 <_vfiprintf_r+0x1a2>
 80093da:	b1b0      	cbz	r0, 800940a <_vfiprintf_r+0x13a>
 80093dc:	9207      	str	r2, [sp, #28]
 80093de:	e014      	b.n	800940a <_vfiprintf_r+0x13a>
 80093e0:	eba0 0308 	sub.w	r3, r0, r8
 80093e4:	fa09 f303 	lsl.w	r3, r9, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	46a2      	mov	sl, r4
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	e7d2      	b.n	8009396 <_vfiprintf_r+0xc6>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	1d19      	adds	r1, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbb      	ittet	lt
 80093fc:	425b      	neglt	r3, r3
 80093fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009402:	9307      	strge	r3, [sp, #28]
 8009404:	9307      	strlt	r3, [sp, #28]
 8009406:	bfb8      	it	lt
 8009408:	9204      	strlt	r2, [sp, #16]
 800940a:	7823      	ldrb	r3, [r4, #0]
 800940c:	2b2e      	cmp	r3, #46	@ 0x2e
 800940e:	d10a      	bne.n	8009426 <_vfiprintf_r+0x156>
 8009410:	7863      	ldrb	r3, [r4, #1]
 8009412:	2b2a      	cmp	r3, #42	@ 0x2a
 8009414:	d132      	bne.n	800947c <_vfiprintf_r+0x1ac>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	3402      	adds	r4, #2
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	9203      	str	r2, [sp, #12]
 8009420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80094f0 <_vfiprintf_r+0x220>
 800942a:	2203      	movs	r2, #3
 800942c:	4650      	mov	r0, sl
 800942e:	7821      	ldrb	r1, [r4, #0]
 8009430:	f7ff fcfe 	bl	8008e30 <memchr>
 8009434:	b138      	cbz	r0, 8009446 <_vfiprintf_r+0x176>
 8009436:	2240      	movs	r2, #64	@ 0x40
 8009438:	9b04      	ldr	r3, [sp, #16]
 800943a:	eba0 000a 	sub.w	r0, r0, sl
 800943e:	4082      	lsls	r2, r0
 8009440:	4313      	orrs	r3, r2
 8009442:	3401      	adds	r4, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944a:	2206      	movs	r2, #6
 800944c:	4829      	ldr	r0, [pc, #164]	@ (80094f4 <_vfiprintf_r+0x224>)
 800944e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009452:	f7ff fced 	bl	8008e30 <memchr>
 8009456:	2800      	cmp	r0, #0
 8009458:	d03f      	beq.n	80094da <_vfiprintf_r+0x20a>
 800945a:	4b27      	ldr	r3, [pc, #156]	@ (80094f8 <_vfiprintf_r+0x228>)
 800945c:	bb1b      	cbnz	r3, 80094a6 <_vfiprintf_r+0x1d6>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	3307      	adds	r3, #7
 8009462:	f023 0307 	bic.w	r3, r3, #7
 8009466:	3308      	adds	r3, #8
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946c:	443b      	add	r3, r7
 800946e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009470:	e76a      	b.n	8009348 <_vfiprintf_r+0x78>
 8009472:	460c      	mov	r4, r1
 8009474:	2001      	movs	r0, #1
 8009476:	fb0c 3202 	mla	r2, ip, r2, r3
 800947a:	e7a8      	b.n	80093ce <_vfiprintf_r+0xfe>
 800947c:	2300      	movs	r3, #0
 800947e:	f04f 0c0a 	mov.w	ip, #10
 8009482:	4619      	mov	r1, r3
 8009484:	3401      	adds	r4, #1
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	4620      	mov	r0, r4
 800948a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800948e:	3a30      	subs	r2, #48	@ 0x30
 8009490:	2a09      	cmp	r2, #9
 8009492:	d903      	bls.n	800949c <_vfiprintf_r+0x1cc>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0c6      	beq.n	8009426 <_vfiprintf_r+0x156>
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	e7c4      	b.n	8009426 <_vfiprintf_r+0x156>
 800949c:	4604      	mov	r4, r0
 800949e:	2301      	movs	r3, #1
 80094a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a4:	e7f0      	b.n	8009488 <_vfiprintf_r+0x1b8>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	4b13      	ldr	r3, [pc, #76]	@ (80094fc <_vfiprintf_r+0x22c>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	f3af 8000 	nop.w
 80094b6:	4607      	mov	r7, r0
 80094b8:	1c78      	adds	r0, r7, #1
 80094ba:	d1d6      	bne.n	800946a <_vfiprintf_r+0x19a>
 80094bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	d405      	bmi.n	80094ce <_vfiprintf_r+0x1fe>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	059a      	lsls	r2, r3, #22
 80094c6:	d402      	bmi.n	80094ce <_vfiprintf_r+0x1fe>
 80094c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ca:	f7fe fe09 	bl	80080e0 <__retarget_lock_release_recursive>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	065b      	lsls	r3, r3, #25
 80094d2:	f53f af1f 	bmi.w	8009314 <_vfiprintf_r+0x44>
 80094d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094d8:	e71e      	b.n	8009318 <_vfiprintf_r+0x48>
 80094da:	ab03      	add	r3, sp, #12
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	462a      	mov	r2, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <_vfiprintf_r+0x22c>)
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	f7ff f9b9 	bl	800885c <_printf_i>
 80094ea:	e7e4      	b.n	80094b6 <_vfiprintf_r+0x1e6>
 80094ec:	0800a831 	.word	0x0800a831
 80094f0:	0800a837 	.word	0x0800a837
 80094f4:	0800a83b 	.word	0x0800a83b
 80094f8:	00000000 	.word	0x00000000
 80094fc:	080092ab 	.word	0x080092ab

08009500 <_scanf_chars>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	4615      	mov	r5, r2
 8009506:	688a      	ldr	r2, [r1, #8]
 8009508:	4680      	mov	r8, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b932      	cbnz	r2, 800951c <_scanf_chars+0x1c>
 800950e:	698a      	ldr	r2, [r1, #24]
 8009510:	2a00      	cmp	r2, #0
 8009512:	bf14      	ite	ne
 8009514:	f04f 32ff 	movne.w	r2, #4294967295
 8009518:	2201      	moveq	r2, #1
 800951a:	608a      	str	r2, [r1, #8]
 800951c:	2700      	movs	r7, #0
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80095b0 <_scanf_chars+0xb0>
 8009524:	06d1      	lsls	r1, r2, #27
 8009526:	bf5f      	itttt	pl
 8009528:	681a      	ldrpl	r2, [r3, #0]
 800952a:	1d11      	addpl	r1, r2, #4
 800952c:	6019      	strpl	r1, [r3, #0]
 800952e:	6816      	ldrpl	r6, [r2, #0]
 8009530:	69a0      	ldr	r0, [r4, #24]
 8009532:	b188      	cbz	r0, 8009558 <_scanf_chars+0x58>
 8009534:	2801      	cmp	r0, #1
 8009536:	d107      	bne.n	8009548 <_scanf_chars+0x48>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	6963      	ldr	r3, [r4, #20]
 800953e:	5c9b      	ldrb	r3, [r3, r2]
 8009540:	b953      	cbnz	r3, 8009558 <_scanf_chars+0x58>
 8009542:	2f00      	cmp	r7, #0
 8009544:	d031      	beq.n	80095aa <_scanf_chars+0xaa>
 8009546:	e022      	b.n	800958e <_scanf_chars+0x8e>
 8009548:	2802      	cmp	r0, #2
 800954a:	d120      	bne.n	800958e <_scanf_chars+0x8e>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009554:	071b      	lsls	r3, r3, #28
 8009556:	d41a      	bmi.n	800958e <_scanf_chars+0x8e>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	3701      	adds	r7, #1
 800955c:	06da      	lsls	r2, r3, #27
 800955e:	bf5e      	ittt	pl
 8009560:	682b      	ldrpl	r3, [r5, #0]
 8009562:	781b      	ldrbpl	r3, [r3, #0]
 8009564:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009568:	682a      	ldr	r2, [r5, #0]
 800956a:	686b      	ldr	r3, [r5, #4]
 800956c:	3201      	adds	r2, #1
 800956e:	602a      	str	r2, [r5, #0]
 8009570:	68a2      	ldr	r2, [r4, #8]
 8009572:	3b01      	subs	r3, #1
 8009574:	3a01      	subs	r2, #1
 8009576:	606b      	str	r3, [r5, #4]
 8009578:	60a2      	str	r2, [r4, #8]
 800957a:	b142      	cbz	r2, 800958e <_scanf_chars+0x8e>
 800957c:	2b00      	cmp	r3, #0
 800957e:	dcd7      	bgt.n	8009530 <_scanf_chars+0x30>
 8009580:	4629      	mov	r1, r5
 8009582:	4640      	mov	r0, r8
 8009584:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009588:	4798      	blx	r3
 800958a:	2800      	cmp	r0, #0
 800958c:	d0d0      	beq.n	8009530 <_scanf_chars+0x30>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	f013 0310 	ands.w	r3, r3, #16
 8009594:	d105      	bne.n	80095a2 <_scanf_chars+0xa2>
 8009596:	68e2      	ldr	r2, [r4, #12]
 8009598:	3201      	adds	r2, #1
 800959a:	60e2      	str	r2, [r4, #12]
 800959c:	69a2      	ldr	r2, [r4, #24]
 800959e:	b102      	cbz	r2, 80095a2 <_scanf_chars+0xa2>
 80095a0:	7033      	strb	r3, [r6, #0]
 80095a2:	2000      	movs	r0, #0
 80095a4:	6923      	ldr	r3, [r4, #16]
 80095a6:	443b      	add	r3, r7
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ae:	bf00      	nop
 80095b0:	0800a731 	.word	0x0800a731

080095b4 <_scanf_i>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	460c      	mov	r4, r1
 80095ba:	4698      	mov	r8, r3
 80095bc:	4b72      	ldr	r3, [pc, #456]	@ (8009788 <_scanf_i+0x1d4>)
 80095be:	b087      	sub	sp, #28
 80095c0:	4682      	mov	sl, r0
 80095c2:	4616      	mov	r6, r2
 80095c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095c8:	ab03      	add	r3, sp, #12
 80095ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80095ce:	4b6f      	ldr	r3, [pc, #444]	@ (800978c <_scanf_i+0x1d8>)
 80095d0:	69a1      	ldr	r1, [r4, #24]
 80095d2:	4a6f      	ldr	r2, [pc, #444]	@ (8009790 <_scanf_i+0x1dc>)
 80095d4:	4627      	mov	r7, r4
 80095d6:	2903      	cmp	r1, #3
 80095d8:	bf08      	it	eq
 80095da:	461a      	moveq	r2, r3
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	9201      	str	r2, [sp, #4]
 80095e0:	1e5a      	subs	r2, r3, #1
 80095e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80095e6:	bf81      	itttt	hi
 80095e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80095ec:	eb03 0905 	addhi.w	r9, r3, r5
 80095f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80095f4:	60a3      	strhi	r3, [r4, #8]
 80095f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80095fa:	bf98      	it	ls
 80095fc:	f04f 0900 	movls.w	r9, #0
 8009600:	463d      	mov	r5, r7
 8009602:	f04f 0b00 	mov.w	fp, #0
 8009606:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	6831      	ldr	r1, [r6, #0]
 800960e:	ab03      	add	r3, sp, #12
 8009610:	2202      	movs	r2, #2
 8009612:	7809      	ldrb	r1, [r1, #0]
 8009614:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009618:	f7ff fc0a 	bl	8008e30 <memchr>
 800961c:	b328      	cbz	r0, 800966a <_scanf_i+0xb6>
 800961e:	f1bb 0f01 	cmp.w	fp, #1
 8009622:	d159      	bne.n	80096d8 <_scanf_i+0x124>
 8009624:	6862      	ldr	r2, [r4, #4]
 8009626:	b92a      	cbnz	r2, 8009634 <_scanf_i+0x80>
 8009628:	2108      	movs	r1, #8
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	6061      	str	r1, [r4, #4]
 800962e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009632:	6022      	str	r2, [r4, #0]
 8009634:	6822      	ldr	r2, [r4, #0]
 8009636:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800963a:	6022      	str	r2, [r4, #0]
 800963c:	68a2      	ldr	r2, [r4, #8]
 800963e:	1e51      	subs	r1, r2, #1
 8009640:	60a1      	str	r1, [r4, #8]
 8009642:	b192      	cbz	r2, 800966a <_scanf_i+0xb6>
 8009644:	6832      	ldr	r2, [r6, #0]
 8009646:	1c51      	adds	r1, r2, #1
 8009648:	6031      	str	r1, [r6, #0]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	f805 2b01 	strb.w	r2, [r5], #1
 8009650:	6872      	ldr	r2, [r6, #4]
 8009652:	3a01      	subs	r2, #1
 8009654:	2a00      	cmp	r2, #0
 8009656:	6072      	str	r2, [r6, #4]
 8009658:	dc07      	bgt.n	800966a <_scanf_i+0xb6>
 800965a:	4631      	mov	r1, r6
 800965c:	4650      	mov	r0, sl
 800965e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009662:	4790      	blx	r2
 8009664:	2800      	cmp	r0, #0
 8009666:	f040 8085 	bne.w	8009774 <_scanf_i+0x1c0>
 800966a:	f10b 0b01 	add.w	fp, fp, #1
 800966e:	f1bb 0f03 	cmp.w	fp, #3
 8009672:	d1cb      	bne.n	800960c <_scanf_i+0x58>
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	b90b      	cbnz	r3, 800967c <_scanf_i+0xc8>
 8009678:	230a      	movs	r3, #10
 800967a:	6063      	str	r3, [r4, #4]
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	4945      	ldr	r1, [pc, #276]	@ (8009794 <_scanf_i+0x1e0>)
 8009680:	6960      	ldr	r0, [r4, #20]
 8009682:	1ac9      	subs	r1, r1, r3
 8009684:	f000 f888 	bl	8009798 <__sccl>
 8009688:	f04f 0b00 	mov.w	fp, #0
 800968c:	68a3      	ldr	r3, [r4, #8]
 800968e:	6822      	ldr	r2, [r4, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d03d      	beq.n	8009710 <_scanf_i+0x15c>
 8009694:	6831      	ldr	r1, [r6, #0]
 8009696:	6960      	ldr	r0, [r4, #20]
 8009698:	f891 c000 	ldrb.w	ip, [r1]
 800969c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d035      	beq.n	8009710 <_scanf_i+0x15c>
 80096a4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80096a8:	d124      	bne.n	80096f4 <_scanf_i+0x140>
 80096aa:	0510      	lsls	r0, r2, #20
 80096ac:	d522      	bpl.n	80096f4 <_scanf_i+0x140>
 80096ae:	f10b 0b01 	add.w	fp, fp, #1
 80096b2:	f1b9 0f00 	cmp.w	r9, #0
 80096b6:	d003      	beq.n	80096c0 <_scanf_i+0x10c>
 80096b8:	3301      	adds	r3, #1
 80096ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	6873      	ldr	r3, [r6, #4]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	6073      	str	r3, [r6, #4]
 80096c8:	dd1b      	ble.n	8009702 <_scanf_i+0x14e>
 80096ca:	6833      	ldr	r3, [r6, #0]
 80096cc:	3301      	adds	r3, #1
 80096ce:	6033      	str	r3, [r6, #0]
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	e7d9      	b.n	800968c <_scanf_i+0xd8>
 80096d8:	f1bb 0f02 	cmp.w	fp, #2
 80096dc:	d1ae      	bne.n	800963c <_scanf_i+0x88>
 80096de:	6822      	ldr	r2, [r4, #0]
 80096e0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80096e4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80096e8:	d1bf      	bne.n	800966a <_scanf_i+0xb6>
 80096ea:	2110      	movs	r1, #16
 80096ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096f0:	6061      	str	r1, [r4, #4]
 80096f2:	e7a2      	b.n	800963a <_scanf_i+0x86>
 80096f4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80096f8:	6022      	str	r2, [r4, #0]
 80096fa:	780b      	ldrb	r3, [r1, #0]
 80096fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009700:	e7de      	b.n	80096c0 <_scanf_i+0x10c>
 8009702:	4631      	mov	r1, r6
 8009704:	4650      	mov	r0, sl
 8009706:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800970a:	4798      	blx	r3
 800970c:	2800      	cmp	r0, #0
 800970e:	d0df      	beq.n	80096d0 <_scanf_i+0x11c>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	05d9      	lsls	r1, r3, #23
 8009714:	d50d      	bpl.n	8009732 <_scanf_i+0x17e>
 8009716:	42bd      	cmp	r5, r7
 8009718:	d909      	bls.n	800972e <_scanf_i+0x17a>
 800971a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800971e:	4632      	mov	r2, r6
 8009720:	4650      	mov	r0, sl
 8009722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009726:	f105 39ff 	add.w	r9, r5, #4294967295
 800972a:	4798      	blx	r3
 800972c:	464d      	mov	r5, r9
 800972e:	42bd      	cmp	r5, r7
 8009730:	d028      	beq.n	8009784 <_scanf_i+0x1d0>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	f012 0210 	ands.w	r2, r2, #16
 8009738:	d113      	bne.n	8009762 <_scanf_i+0x1ae>
 800973a:	702a      	strb	r2, [r5, #0]
 800973c:	4639      	mov	r1, r7
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	4650      	mov	r0, sl
 8009742:	9e01      	ldr	r6, [sp, #4]
 8009744:	47b0      	blx	r6
 8009746:	f8d8 3000 	ldr.w	r3, [r8]
 800974a:	6821      	ldr	r1, [r4, #0]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	f8c8 2000 	str.w	r2, [r8]
 8009752:	f011 0f20 	tst.w	r1, #32
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	d00f      	beq.n	800977a <_scanf_i+0x1c6>
 800975a:	6018      	str	r0, [r3, #0]
 800975c:	68e3      	ldr	r3, [r4, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60e3      	str	r3, [r4, #12]
 8009762:	2000      	movs	r0, #0
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	1bed      	subs	r5, r5, r7
 8009768:	445d      	add	r5, fp
 800976a:	442b      	add	r3, r5
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	b007      	add	sp, #28
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	f04f 0b00 	mov.w	fp, #0
 8009778:	e7ca      	b.n	8009710 <_scanf_i+0x15c>
 800977a:	07ca      	lsls	r2, r1, #31
 800977c:	bf4c      	ite	mi
 800977e:	8018      	strhmi	r0, [r3, #0]
 8009780:	6018      	strpl	r0, [r3, #0]
 8009782:	e7eb      	b.n	800975c <_scanf_i+0x1a8>
 8009784:	2001      	movs	r0, #1
 8009786:	e7f2      	b.n	800976e <_scanf_i+0x1ba>
 8009788:	08009dc8 	.word	0x08009dc8
 800978c:	08009b31 	.word	0x08009b31
 8009790:	080084b1 	.word	0x080084b1
 8009794:	0800a874 	.word	0x0800a874

08009798 <__sccl>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	780b      	ldrb	r3, [r1, #0]
 800979c:	4604      	mov	r4, r0
 800979e:	2b5e      	cmp	r3, #94	@ 0x5e
 80097a0:	bf0b      	itete	eq
 80097a2:	784b      	ldrbeq	r3, [r1, #1]
 80097a4:	1c4a      	addne	r2, r1, #1
 80097a6:	1c8a      	addeq	r2, r1, #2
 80097a8:	2100      	movne	r1, #0
 80097aa:	bf08      	it	eq
 80097ac:	2101      	moveq	r1, #1
 80097ae:	3801      	subs	r0, #1
 80097b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80097b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80097b8:	42a8      	cmp	r0, r5
 80097ba:	d1fb      	bne.n	80097b4 <__sccl+0x1c>
 80097bc:	b90b      	cbnz	r3, 80097c2 <__sccl+0x2a>
 80097be:	1e50      	subs	r0, r2, #1
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
 80097c2:	f081 0101 	eor.w	r1, r1, #1
 80097c6:	4610      	mov	r0, r2
 80097c8:	54e1      	strb	r1, [r4, r3]
 80097ca:	4602      	mov	r2, r0
 80097cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80097d2:	d005      	beq.n	80097e0 <__sccl+0x48>
 80097d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80097d6:	d016      	beq.n	8009806 <__sccl+0x6e>
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d0f1      	beq.n	80097c0 <__sccl+0x28>
 80097dc:	462b      	mov	r3, r5
 80097de:	e7f2      	b.n	80097c6 <__sccl+0x2e>
 80097e0:	7846      	ldrb	r6, [r0, #1]
 80097e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80097e4:	d0fa      	beq.n	80097dc <__sccl+0x44>
 80097e6:	42b3      	cmp	r3, r6
 80097e8:	dcf8      	bgt.n	80097dc <__sccl+0x44>
 80097ea:	461a      	mov	r2, r3
 80097ec:	3002      	adds	r0, #2
 80097ee:	3201      	adds	r2, #1
 80097f0:	4296      	cmp	r6, r2
 80097f2:	54a1      	strb	r1, [r4, r2]
 80097f4:	dcfb      	bgt.n	80097ee <__sccl+0x56>
 80097f6:	1af2      	subs	r2, r6, r3
 80097f8:	3a01      	subs	r2, #1
 80097fa:	42b3      	cmp	r3, r6
 80097fc:	bfa8      	it	ge
 80097fe:	2200      	movge	r2, #0
 8009800:	1c5d      	adds	r5, r3, #1
 8009802:	18ab      	adds	r3, r5, r2
 8009804:	e7e1      	b.n	80097ca <__sccl+0x32>
 8009806:	4610      	mov	r0, r2
 8009808:	e7da      	b.n	80097c0 <__sccl+0x28>

0800980a <__submore>:
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	460c      	mov	r4, r1
 8009810:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009816:	4299      	cmp	r1, r3
 8009818:	d11b      	bne.n	8009852 <__submore+0x48>
 800981a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800981e:	f7fe fd4d 	bl	80082bc <_malloc_r>
 8009822:	b918      	cbnz	r0, 800982c <__submore+0x22>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009830:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009832:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009836:	6360      	str	r0, [r4, #52]	@ 0x34
 8009838:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800983c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009840:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009844:	7043      	strb	r3, [r0, #1]
 8009846:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800984a:	7003      	strb	r3, [r0, #0]
 800984c:	6020      	str	r0, [r4, #0]
 800984e:	2000      	movs	r0, #0
 8009850:	e7ea      	b.n	8009828 <__submore+0x1e>
 8009852:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009854:	0077      	lsls	r7, r6, #1
 8009856:	463a      	mov	r2, r7
 8009858:	f7ff fb1a 	bl	8008e90 <_realloc_r>
 800985c:	4605      	mov	r5, r0
 800985e:	2800      	cmp	r0, #0
 8009860:	d0e0      	beq.n	8009824 <__submore+0x1a>
 8009862:	eb00 0806 	add.w	r8, r0, r6
 8009866:	4601      	mov	r1, r0
 8009868:	4632      	mov	r2, r6
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff faee 	bl	8008e4c <memcpy>
 8009870:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009874:	f8c4 8000 	str.w	r8, [r4]
 8009878:	e7e9      	b.n	800984e <__submore+0x44>

0800987a <__swbuf_r>:
 800987a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987c:	460e      	mov	r6, r1
 800987e:	4614      	mov	r4, r2
 8009880:	4605      	mov	r5, r0
 8009882:	b118      	cbz	r0, 800988c <__swbuf_r+0x12>
 8009884:	6a03      	ldr	r3, [r0, #32]
 8009886:	b90b      	cbnz	r3, 800988c <__swbuf_r+0x12>
 8009888:	f7fd f9c0 	bl	8006c0c <__sinit>
 800988c:	69a3      	ldr	r3, [r4, #24]
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	071a      	lsls	r2, r3, #28
 8009894:	d501      	bpl.n	800989a <__swbuf_r+0x20>
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	b943      	cbnz	r3, 80098ac <__swbuf_r+0x32>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f82b 	bl	80098f8 <__swsetup_r>
 80098a2:	b118      	cbz	r0, 80098ac <__swbuf_r+0x32>
 80098a4:	f04f 37ff 	mov.w	r7, #4294967295
 80098a8:	4638      	mov	r0, r7
 80098aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	6922      	ldr	r2, [r4, #16]
 80098b0:	b2f6      	uxtb	r6, r6
 80098b2:	1a98      	subs	r0, r3, r2
 80098b4:	6963      	ldr	r3, [r4, #20]
 80098b6:	4637      	mov	r7, r6
 80098b8:	4283      	cmp	r3, r0
 80098ba:	dc05      	bgt.n	80098c8 <__swbuf_r+0x4e>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f7ff f96c 	bl	8008b9c <_fflush_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1ed      	bne.n	80098a4 <__swbuf_r+0x2a>
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	6022      	str	r2, [r4, #0]
 80098d4:	701e      	strb	r6, [r3, #0]
 80098d6:	6962      	ldr	r2, [r4, #20]
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	429a      	cmp	r2, r3
 80098dc:	d004      	beq.n	80098e8 <__swbuf_r+0x6e>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	07db      	lsls	r3, r3, #31
 80098e2:	d5e1      	bpl.n	80098a8 <__swbuf_r+0x2e>
 80098e4:	2e0a      	cmp	r6, #10
 80098e6:	d1df      	bne.n	80098a8 <__swbuf_r+0x2e>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7ff f956 	bl	8008b9c <_fflush_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d0d9      	beq.n	80098a8 <__swbuf_r+0x2e>
 80098f4:	e7d6      	b.n	80098a4 <__swbuf_r+0x2a>
	...

080098f8 <__swsetup_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4b29      	ldr	r3, [pc, #164]	@ (80099a0 <__swsetup_r+0xa8>)
 80098fc:	4605      	mov	r5, r0
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	460c      	mov	r4, r1
 8009902:	b118      	cbz	r0, 800990c <__swsetup_r+0x14>
 8009904:	6a03      	ldr	r3, [r0, #32]
 8009906:	b90b      	cbnz	r3, 800990c <__swsetup_r+0x14>
 8009908:	f7fd f980 	bl	8006c0c <__sinit>
 800990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009910:	0719      	lsls	r1, r3, #28
 8009912:	d422      	bmi.n	800995a <__swsetup_r+0x62>
 8009914:	06da      	lsls	r2, r3, #27
 8009916:	d407      	bmi.n	8009928 <__swsetup_r+0x30>
 8009918:	2209      	movs	r2, #9
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e033      	b.n	8009990 <__swsetup_r+0x98>
 8009928:	0758      	lsls	r0, r3, #29
 800992a:	d512      	bpl.n	8009952 <__swsetup_r+0x5a>
 800992c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800992e:	b141      	cbz	r1, 8009942 <__swsetup_r+0x4a>
 8009930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <__swsetup_r+0x46>
 8009938:	4628      	mov	r0, r5
 800993a:	f7fe fbfd 	bl	8008138 <_free_r>
 800993e:	2300      	movs	r3, #0
 8009940:	6363      	str	r3, [r4, #52]	@ 0x34
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	2300      	movs	r3, #0
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f043 0308 	orr.w	r3, r3, #8
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	b94b      	cbnz	r3, 8009972 <__swsetup_r+0x7a>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009968:	d003      	beq.n	8009972 <__swsetup_r+0x7a>
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f000 f906 	bl	8009b7e <__smakebuf_r>
 8009972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009976:	f013 0201 	ands.w	r2, r3, #1
 800997a:	d00a      	beq.n	8009992 <__swsetup_r+0x9a>
 800997c:	2200      	movs	r2, #0
 800997e:	60a2      	str	r2, [r4, #8]
 8009980:	6962      	ldr	r2, [r4, #20]
 8009982:	4252      	negs	r2, r2
 8009984:	61a2      	str	r2, [r4, #24]
 8009986:	6922      	ldr	r2, [r4, #16]
 8009988:	b942      	cbnz	r2, 800999c <__swsetup_r+0xa4>
 800998a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800998e:	d1c5      	bne.n	800991c <__swsetup_r+0x24>
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	0799      	lsls	r1, r3, #30
 8009994:	bf58      	it	pl
 8009996:	6962      	ldrpl	r2, [r4, #20]
 8009998:	60a2      	str	r2, [r4, #8]
 800999a:	e7f4      	b.n	8009986 <__swsetup_r+0x8e>
 800999c:	2000      	movs	r0, #0
 800999e:	e7f7      	b.n	8009990 <__swsetup_r+0x98>
 80099a0:	2000003c 	.word	0x2000003c

080099a4 <_raise_r>:
 80099a4:	291f      	cmp	r1, #31
 80099a6:	b538      	push	{r3, r4, r5, lr}
 80099a8:	4605      	mov	r5, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	d904      	bls.n	80099b8 <_raise_r+0x14>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099ba:	b112      	cbz	r2, 80099c2 <_raise_r+0x1e>
 80099bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099c0:	b94b      	cbnz	r3, 80099d6 <_raise_r+0x32>
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f830 	bl	8009a28 <_getpid_r>
 80099c8:	4622      	mov	r2, r4
 80099ca:	4601      	mov	r1, r0
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d2:	f000 b817 	b.w	8009a04 <_kill_r>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d00a      	beq.n	80099f0 <_raise_r+0x4c>
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	d103      	bne.n	80099e6 <_raise_r+0x42>
 80099de:	2316      	movs	r3, #22
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	2001      	movs	r0, #1
 80099e4:	e7e7      	b.n	80099b6 <_raise_r+0x12>
 80099e6:	2100      	movs	r1, #0
 80099e8:	4620      	mov	r0, r4
 80099ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099ee:	4798      	blx	r3
 80099f0:	2000      	movs	r0, #0
 80099f2:	e7e0      	b.n	80099b6 <_raise_r+0x12>

080099f4 <raise>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	@ (8009a00 <raise+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f7ff bfd3 	b.w	80099a4 <_raise_r>
 80099fe:	bf00      	nop
 8009a00:	2000003c 	.word	0x2000003c

08009a04 <_kill_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d06      	ldr	r5, [pc, #24]	@ (8009a24 <_kill_r+0x20>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	f7f7 fcde 	bl	80013d2 <_kill>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d102      	bne.n	8009a20 <_kill_r+0x1c>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	b103      	cbz	r3, 8009a20 <_kill_r+0x1c>
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	20001534 	.word	0x20001534

08009a28 <_getpid_r>:
 8009a28:	f7f7 bccc 	b.w	80013c4 <_getpid>

08009a2c <_malloc_usable_size_r>:
 8009a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a30:	1f18      	subs	r0, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bfbc      	itt	lt
 8009a36:	580b      	ldrlt	r3, [r1, r0]
 8009a38:	18c0      	addlt	r0, r0, r3
 8009a3a:	4770      	bx	lr

08009a3c <_strtol_l.constprop.0>:
 8009a3c:	2b24      	cmp	r3, #36	@ 0x24
 8009a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a42:	4686      	mov	lr, r0
 8009a44:	4690      	mov	r8, r2
 8009a46:	d801      	bhi.n	8009a4c <_strtol_l.constprop.0+0x10>
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d106      	bne.n	8009a5a <_strtol_l.constprop.0+0x1e>
 8009a4c:	f7fe fb1a 	bl	8008084 <__errno>
 8009a50:	2316      	movs	r3, #22
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	2000      	movs	r0, #0
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	4833      	ldr	r0, [pc, #204]	@ (8009b2c <_strtol_l.constprop.0+0xf0>)
 8009a5e:	462a      	mov	r2, r5
 8009a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a64:	5d06      	ldrb	r6, [r0, r4]
 8009a66:	f016 0608 	ands.w	r6, r6, #8
 8009a6a:	d1f8      	bne.n	8009a5e <_strtol_l.constprop.0+0x22>
 8009a6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a6e:	d12d      	bne.n	8009acc <_strtol_l.constprop.0+0x90>
 8009a70:	2601      	movs	r6, #1
 8009a72:	782c      	ldrb	r4, [r5, #0]
 8009a74:	1c95      	adds	r5, r2, #2
 8009a76:	f033 0210 	bics.w	r2, r3, #16
 8009a7a:	d109      	bne.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009a7c:	2c30      	cmp	r4, #48	@ 0x30
 8009a7e:	d12a      	bne.n	8009ad6 <_strtol_l.constprop.0+0x9a>
 8009a80:	782a      	ldrb	r2, [r5, #0]
 8009a82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a86:	2a58      	cmp	r2, #88	@ 0x58
 8009a88:	d125      	bne.n	8009ad6 <_strtol_l.constprop.0+0x9a>
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	786c      	ldrb	r4, [r5, #1]
 8009a8e:	3502      	adds	r5, #2
 8009a90:	2200      	movs	r2, #0
 8009a92:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009aa8:	2f09      	cmp	r7, #9
 8009aaa:	d81b      	bhi.n	8009ae4 <_strtol_l.constprop.0+0xa8>
 8009aac:	463c      	mov	r4, r7
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	dd27      	ble.n	8009b02 <_strtol_l.constprop.0+0xc6>
 8009ab2:	1c57      	adds	r7, r2, #1
 8009ab4:	d007      	beq.n	8009ac6 <_strtol_l.constprop.0+0x8a>
 8009ab6:	4581      	cmp	r9, r0
 8009ab8:	d320      	bcc.n	8009afc <_strtol_l.constprop.0+0xc0>
 8009aba:	d101      	bne.n	8009ac0 <_strtol_l.constprop.0+0x84>
 8009abc:	45a2      	cmp	sl, r4
 8009abe:	db1d      	blt.n	8009afc <_strtol_l.constprop.0+0xc0>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8009ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aca:	e7eb      	b.n	8009aa4 <_strtol_l.constprop.0+0x68>
 8009acc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ace:	bf04      	itt	eq
 8009ad0:	782c      	ldrbeq	r4, [r5, #0]
 8009ad2:	1c95      	addeq	r5, r2, #2
 8009ad4:	e7cf      	b.n	8009a76 <_strtol_l.constprop.0+0x3a>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1da      	bne.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009ada:	2c30      	cmp	r4, #48	@ 0x30
 8009adc:	bf0c      	ite	eq
 8009ade:	2308      	moveq	r3, #8
 8009ae0:	230a      	movne	r3, #10
 8009ae2:	e7d5      	b.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009ae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ae8:	2f19      	cmp	r7, #25
 8009aea:	d801      	bhi.n	8009af0 <_strtol_l.constprop.0+0xb4>
 8009aec:	3c37      	subs	r4, #55	@ 0x37
 8009aee:	e7de      	b.n	8009aae <_strtol_l.constprop.0+0x72>
 8009af0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009af4:	2f19      	cmp	r7, #25
 8009af6:	d804      	bhi.n	8009b02 <_strtol_l.constprop.0+0xc6>
 8009af8:	3c57      	subs	r4, #87	@ 0x57
 8009afa:	e7d8      	b.n	8009aae <_strtol_l.constprop.0+0x72>
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e7e1      	b.n	8009ac6 <_strtol_l.constprop.0+0x8a>
 8009b02:	1c53      	adds	r3, r2, #1
 8009b04:	d108      	bne.n	8009b18 <_strtol_l.constprop.0+0xdc>
 8009b06:	2322      	movs	r3, #34	@ 0x22
 8009b08:	4660      	mov	r0, ip
 8009b0a:	f8ce 3000 	str.w	r3, [lr]
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	d0a0      	beq.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b14:	1e69      	subs	r1, r5, #1
 8009b16:	e006      	b.n	8009b26 <_strtol_l.constprop.0+0xea>
 8009b18:	b106      	cbz	r6, 8009b1c <_strtol_l.constprop.0+0xe0>
 8009b1a:	4240      	negs	r0, r0
 8009b1c:	f1b8 0f00 	cmp.w	r8, #0
 8009b20:	d099      	beq.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	d1f6      	bne.n	8009b14 <_strtol_l.constprop.0+0xd8>
 8009b26:	f8c8 1000 	str.w	r1, [r8]
 8009b2a:	e794      	b.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b2c:	0800a731 	.word	0x0800a731

08009b30 <_strtol_r>:
 8009b30:	f7ff bf84 	b.w	8009a3c <_strtol_l.constprop.0>

08009b34 <__swhatbuf_r>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	460c      	mov	r4, r1
 8009b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3c:	4615      	mov	r5, r2
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	461e      	mov	r6, r3
 8009b42:	b096      	sub	sp, #88	@ 0x58
 8009b44:	da0c      	bge.n	8009b60 <__swhatbuf_r+0x2c>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	2100      	movs	r1, #0
 8009b4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b4e:	bf14      	ite	ne
 8009b50:	2340      	movne	r3, #64	@ 0x40
 8009b52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b56:	2000      	movs	r0, #0
 8009b58:	6031      	str	r1, [r6, #0]
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	b016      	add	sp, #88	@ 0x58
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	466a      	mov	r2, sp
 8009b62:	f000 f849 	bl	8009bf8 <_fstat_r>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	dbed      	blt.n	8009b46 <__swhatbuf_r+0x12>
 8009b6a:	9901      	ldr	r1, [sp, #4]
 8009b6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b74:	4259      	negs	r1, r3
 8009b76:	4159      	adcs	r1, r3
 8009b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b7c:	e7eb      	b.n	8009b56 <__swhatbuf_r+0x22>

08009b7e <__smakebuf_r>:
 8009b7e:	898b      	ldrh	r3, [r1, #12]
 8009b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b82:	079d      	lsls	r5, r3, #30
 8009b84:	4606      	mov	r6, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	d507      	bpl.n	8009b9a <__smakebuf_r+0x1c>
 8009b8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	2301      	movs	r3, #1
 8009b94:	6163      	str	r3, [r4, #20]
 8009b96:	b003      	add	sp, #12
 8009b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9a:	466a      	mov	r2, sp
 8009b9c:	ab01      	add	r3, sp, #4
 8009b9e:	f7ff ffc9 	bl	8009b34 <__swhatbuf_r>
 8009ba2:	9f00      	ldr	r7, [sp, #0]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7fe fb87 	bl	80082bc <_malloc_r>
 8009bae:	b948      	cbnz	r0, 8009bc4 <__smakebuf_r+0x46>
 8009bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d4ee      	bmi.n	8009b96 <__smakebuf_r+0x18>
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	e7e2      	b.n	8009b8a <__smakebuf_r+0xc>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	b15b      	cbz	r3, 8009bee <__smakebuf_r+0x70>
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bdc:	f000 f81e 	bl	8009c1c <_isatty_r>
 8009be0:	b128      	cbz	r0, 8009bee <__smakebuf_r+0x70>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f023 0303 	bic.w	r3, r3, #3
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	431d      	orrs	r5, r3
 8009bf2:	81a5      	strh	r5, [r4, #12]
 8009bf4:	e7cf      	b.n	8009b96 <__smakebuf_r+0x18>
	...

08009bf8 <_fstat_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_fstat_r+0x20>)
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	f7f7 fc43 	bl	8001490 <_fstat>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d102      	bne.n	8009c14 <_fstat_r+0x1c>
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	b103      	cbz	r3, 8009c14 <_fstat_r+0x1c>
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	20001534 	.word	0x20001534

08009c1c <_isatty_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4d05      	ldr	r5, [pc, #20]	@ (8009c38 <_isatty_r+0x1c>)
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f7 fc41 	bl	80014ae <_isatty>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_isatty_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_isatty_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20001534 	.word	0x20001534

08009c3c <_gettimeofday>:
 8009c3c:	2258      	movs	r2, #88	@ 0x58
 8009c3e:	4b02      	ldr	r3, [pc, #8]	@ (8009c48 <_gettimeofday+0xc>)
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	4770      	bx	lr
 8009c48:	20001534 	.word	0x20001534

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
