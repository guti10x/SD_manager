
Sd_manager_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f14  08007f14  00009080  2**0
                  CONTENTS
  4 .ARM          00000000  08007f14  08007f14  00009080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f14  08007f14  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f14  08007f14  00008f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007f1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000080  08007f9c  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  08007f9c  000094b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b00  00000000  00000000  000090a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  00012ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00014f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cf  00000000  00000000  00015a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f74  00000000  00000000  000161df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee7e  00000000  00000000  0002f153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c51  00000000  00000000  0003dfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000c2c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c5d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080077ec 	.word	0x080077ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080077ec 	.word	0x080077ec

0800014c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4803      	ldr	r0, [pc, #12]	@ (8000164 <SELECT+0x18>)
 8000156:	f001 fb5d 	bl	8001814 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800015a:	2001      	movs	r0, #1
 800015c:	f001 f8ce 	bl	80012fc <HAL_Delay>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40010800 	.word	0x40010800

08000168 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4803      	ldr	r0, [pc, #12]	@ (8000180 <DESELECT+0x18>)
 8000172:	f001 fb4f 	bl	8001814 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000176:	2001      	movs	r0, #1
 8000178:	f001 f8c0 	bl	80012fc <HAL_Delay>
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800018e:	bf00      	nop
 8000190:	4b08      	ldr	r3, [pc, #32]	@ (80001b4 <SPI_TxByte+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0302 	and.w	r3, r3, #2
 800019a:	2b02      	cmp	r3, #2
 800019c:	d1f8      	bne.n	8000190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	2364      	movs	r3, #100	@ 0x64
 80001a2:	2201      	movs	r2, #1
 80001a4:	4803      	ldr	r0, [pc, #12]	@ (80001b4 <SPI_TxByte+0x30>)
 80001a6:	f001 ffc9 	bl	800213c <HAL_SPI_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	200010d8 	.word	0x200010d8

080001b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c4:	bf00      	nop
 80001c6:	4b08      	ldr	r3, [pc, #32]	@ (80001e8 <SPI_TxBuffer+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f003 0302 	and.w	r3, r3, #2
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d1f8      	bne.n	80001c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001d4:	887a      	ldrh	r2, [r7, #2]
 80001d6:	2364      	movs	r3, #100	@ 0x64
 80001d8:	6879      	ldr	r1, [r7, #4]
 80001da:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <SPI_TxBuffer+0x30>)
 80001dc:	f001 ffae 	bl	800213c <HAL_SPI_Transmit>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200010d8 	.word	0x200010d8

080001ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80001f2:	23ff      	movs	r3, #255	@ 0xff
 80001f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001f6:	bf00      	nop
 80001f8:	4b09      	ldr	r3, [pc, #36]	@ (8000220 <SPI_RxByte+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b02      	cmp	r3, #2
 8000204:	d1f8      	bne.n	80001f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000206:	1dba      	adds	r2, r7, #6
 8000208:	1df9      	adds	r1, r7, #7
 800020a:	2364      	movs	r3, #100	@ 0x64
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <SPI_RxByte+0x34>)
 8000212:	f002 f8d6 	bl	80023c2 <HAL_SPI_TransmitReceive>

	return data;
 8000216:	79bb      	ldrb	r3, [r7, #6]
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200010d8 	.word	0x200010d8

08000224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800022c:	f7ff ffde 	bl	80001ec <SPI_RxByte>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	701a      	strb	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000246:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <SD_ReadyWait+0x30>)
 8000248:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800024c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800024e:	f7ff ffcd 	bl	80001ec <SPI_RxByte>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2bff      	cmp	r3, #255	@ 0xff
 800025a:	d003      	beq.n	8000264 <SD_ReadyWait+0x24>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <SD_ReadyWait+0x30>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f4      	bne.n	800024e <SD_ReadyWait+0xe>

	return res;
 8000264:	79fb      	ldrb	r3, [r7, #7]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000009e 	.word	0x2000009e

08000274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800027a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800027e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000280:	f7ff ff72 	bl	8000168 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e005      	b.n	8000296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800028a:	20ff      	movs	r0, #255	@ 0xff
 800028c:	f7ff ff7a 	bl	8000184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b09      	cmp	r3, #9
 800029a:	ddf6      	ble.n	800028a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800029c:	f7ff ff56 	bl	800014c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002a0:	2340      	movs	r3, #64	@ 0x40
 80002a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002b4:	2395      	movs	r3, #149	@ 0x95
 80002b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002b8:	463b      	mov	r3, r7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff7b 	bl	80001b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002c2:	e002      	b.n	80002ca <SD_PowerOn+0x56>
	{
		cnt--;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002ca:	f7ff ff8f 	bl	80001ec <SPI_RxByte>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d002      	beq.n	80002da <SD_PowerOn+0x66>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f4      	bne.n	80002c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002da:	f7ff ff45 	bl	8000168 <DESELECT>
	SPI_TxByte(0XFF);
 80002de:	20ff      	movs	r0, #255	@ 0xff
 80002e0:	f7ff ff50 	bl	8000184 <SPI_TxByte>

	PowerFlag = 1;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <SD_PowerOn+0x80>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200000a1 	.word	0x200000a1

080002f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80002fc:	4b03      	ldr	r3, [pc, #12]	@ (800030c <SD_PowerOff+0x14>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000a1 	.word	0x200000a1

08000310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000314:	4b02      	ldr	r3, [pc, #8]	@ (8000320 <SD_CheckPower+0x10>)
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	200000a1 	.word	0x200000a1

08000324 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800032e:	4b13      	ldr	r3, [pc, #76]	@ (800037c <SD_RxDataBlock+0x58>)
 8000330:	22c8      	movs	r2, #200	@ 0xc8
 8000332:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000334:	f7ff ff5a 	bl	80001ec <SPI_RxByte>
 8000338:	4603      	mov	r3, r0
 800033a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bff      	cmp	r3, #255	@ 0xff
 8000340:	d103      	bne.n	800034a <SD_RxDataBlock+0x26>
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <SD_RxDataBlock+0x58>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f4      	bne.n	8000334 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2bfe      	cmp	r3, #254	@ 0xfe
 800034e:	d001      	beq.n	8000354 <SD_RxDataBlock+0x30>
 8000350:	2300      	movs	r3, #0
 8000352:	e00f      	b.n	8000374 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff62 	bl	8000224 <SPI_RxBytePtr>
	} while(len--);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	603a      	str	r2, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f4      	bne.n	8000354 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800036a:	f7ff ff3f 	bl	80001ec <SPI_RxByte>
	SPI_RxByte();
 800036e:	f7ff ff3d 	bl	80001ec <SPI_RxByte>

	return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000009c 	.word	0x2000009c

08000380 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000390:	f7ff ff56 	bl	8000240 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	@ 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
 800039a:	2300      	movs	r3, #0
 800039c:	e02f      	b.n	80003fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff feef 	bl	8000184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	@ 0xfd
 80003aa:	d020      	beq.n	80003ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff01 	bl	80001b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003b6:	f7ff ff19 	bl	80001ec <SPI_RxByte>
		SPI_RxByte();
 80003ba:	f7ff ff17 	bl	80001ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003be:	e00b      	b.n	80003d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003c0:	f7ff ff14 	bl	80001ec <SPI_RxByte>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	f003 031f 	and.w	r3, r3, #31
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d006      	beq.n	80003e0 <SD_TxDataBlock+0x60>
			i++;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	3301      	adds	r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	2b40      	cmp	r3, #64	@ 0x40
 80003dc:	d9f0      	bls.n	80003c0 <SD_TxDataBlock+0x40>
 80003de:	e000      	b.n	80003e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003e2:	bf00      	nop
 80003e4:	f7ff ff02 	bl	80001ec <SPI_RxByte>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0fa      	beq.n	80003e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 031f 	and.w	r3, r3, #31
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d101      	bne.n	80003fc <SD_TxDataBlock+0x7c>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	6039      	str	r1, [r7, #0]
 8000410:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000412:	f7ff ff15 	bl	8000240 <SD_ReadyWait>
 8000416:	4603      	mov	r3, r0
 8000418:	2bff      	cmp	r3, #255	@ 0xff
 800041a:	d001      	beq.n	8000420 <SD_SendCmd+0x1a>
 800041c:	23ff      	movs	r3, #255	@ 0xff
 800041e:	e042      	b.n	80004a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff feae 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	0e1b      	lsrs	r3, r3, #24
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fea8 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fea2 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe9c 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe97 	bl	8000184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b40      	cmp	r3, #64	@ 0x40
 800045a:	d102      	bne.n	8000462 <SD_SendCmd+0x5c>
 800045c:	2395      	movs	r3, #149	@ 0x95
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	e007      	b.n	8000472 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b48      	cmp	r3, #72	@ 0x48
 8000466:	d102      	bne.n	800046e <SD_SendCmd+0x68>
 8000468:	2387      	movs	r3, #135	@ 0x87
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e001      	b.n	8000472 <SD_SendCmd+0x6c>
	else crc = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe85 	bl	8000184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b4c      	cmp	r3, #76	@ 0x4c
 800047e:	d101      	bne.n	8000484 <SD_SendCmd+0x7e>
 8000480:	f7ff feb4 	bl	80001ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000484:	230a      	movs	r3, #10
 8000486:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000488:	f7ff feb0 	bl	80001ec <SPI_RxByte>
 800048c:	4603      	mov	r3, r0
 800048e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <SD_SendCmd+0x9e>
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	3b01      	subs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1f1      	bne.n	8000488 <SD_SendCmd+0x82>

	return res;
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SD_disk_initialize+0x14>
 80004c0:	2301      	movs	r3, #1
 80004c2:	e0d1      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004c4:	4b6a      	ldr	r3, [pc, #424]	@ (8000670 <SD_disk_initialize+0x1c0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <SD_disk_initialize+0x2a>
 80004d2:	4b67      	ldr	r3, [pc, #412]	@ (8000670 <SD_disk_initialize+0x1c0>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	e0c6      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004da:	f7ff fecb 	bl	8000274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004de:	f7ff fe35 	bl	800014c <SELECT>

	/* check disk type */
	type = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004e6:	2100      	movs	r1, #0
 80004e8:	2040      	movs	r0, #64	@ 0x40
 80004ea:	f7ff ff8c 	bl	8000406 <SD_SendCmd>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 80a1 	bne.w	8000638 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80004f6:	4b5f      	ldr	r3, [pc, #380]	@ (8000674 <SD_disk_initialize+0x1c4>)
 80004f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80004fe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000502:	2048      	movs	r0, #72	@ 0x48
 8000504:	f7ff ff7f 	bl	8000406 <SD_SendCmd>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d155      	bne.n	80005ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e00c      	b.n	800052e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000514:	7bfc      	ldrb	r4, [r7, #15]
 8000516:	f7ff fe69 	bl	80001ec <SPI_RxByte>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f104 0310 	add.w	r3, r4, #16
 8000522:	443b      	add	r3, r7
 8000524:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	3301      	adds	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9ef      	bls.n	8000514 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000534:	7abb      	ldrb	r3, [r7, #10]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d17e      	bne.n	8000638 <SD_disk_initialize+0x188>
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	2baa      	cmp	r3, #170	@ 0xaa
 800053e:	d17b      	bne.n	8000638 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000540:	2100      	movs	r1, #0
 8000542:	2077      	movs	r0, #119	@ 0x77
 8000544:	f7ff ff5f 	bl	8000406 <SD_SendCmd>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d807      	bhi.n	800055e <SD_disk_initialize+0xae>
 800054e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000552:	2069      	movs	r0, #105	@ 0x69
 8000554:	f7ff ff57 	bl	8000406 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800055e:	4b45      	ldr	r3, [pc, #276]	@ (8000674 <SD_disk_initialize+0x1c4>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1ec      	bne.n	8000540 <SD_disk_initialize+0x90>
 8000566:	e000      	b.n	800056a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000568:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <SD_disk_initialize+0x1c4>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d062      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000572:	2100      	movs	r1, #0
 8000574:	207a      	movs	r0, #122	@ 0x7a
 8000576:	f7ff ff46 	bl	8000406 <SD_SendCmd>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d15b      	bne.n	8000638 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e00c      	b.n	80005a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000586:	7bfc      	ldrb	r4, [r7, #15]
 8000588:	f7ff fe30 	bl	80001ec <SPI_RxByte>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	f104 0310 	add.w	r3, r4, #16
 8000594:	443b      	add	r3, r7
 8000596:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d9ef      	bls.n	8000586 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005a6:	7a3b      	ldrb	r3, [r7, #8]
 80005a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SD_disk_initialize+0x104>
 80005b0:	230c      	movs	r3, #12
 80005b2:	e000      	b.n	80005b6 <SD_disk_initialize+0x106>
 80005b4:	2304      	movs	r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	e03e      	b.n	8000638 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ba:	2100      	movs	r1, #0
 80005bc:	2077      	movs	r0, #119	@ 0x77
 80005be:	f7ff ff22 	bl	8000406 <SD_SendCmd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d808      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005c8:	2100      	movs	r1, #0
 80005ca:	2069      	movs	r0, #105	@ 0x69
 80005cc:	f7ff ff1b 	bl	8000406 <SD_SendCmd>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d801      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e000      	b.n	80005dc <SD_disk_initialize+0x12c>
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d10e      	bne.n	8000602 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005e4:	2100      	movs	r1, #0
 80005e6:	2077      	movs	r0, #119	@ 0x77
 80005e8:	f7ff ff0d 	bl	8000406 <SD_SendCmd>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d80e      	bhi.n	8000610 <SD_disk_initialize+0x160>
 80005f2:	2100      	movs	r1, #0
 80005f4:	2069      	movs	r0, #105	@ 0x69
 80005f6:	f7ff ff06 	bl	8000406 <SD_SendCmd>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <SD_disk_initialize+0x160>
 8000600:	e00c      	b.n	800061c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000602:	2100      	movs	r1, #0
 8000604:	2041      	movs	r0, #65	@ 0x41
 8000606:	f7ff fefe 	bl	8000406 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <SD_disk_initialize+0x1c4>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e2      	bne.n	80005de <SD_disk_initialize+0x12e>
 8000618:	e000      	b.n	800061c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800061a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <SD_disk_initialize+0x1c4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <SD_disk_initialize+0x184>
 8000624:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000628:	2050      	movs	r0, #80	@ 0x50
 800062a:	f7ff feec 	bl	8000406 <SD_SendCmd>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <SD_disk_initialize+0x1c8>)
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800063e:	f7ff fd93 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000642:	f7ff fdd3 	bl	80001ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SD_disk_initialize+0x1c0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SD_disk_initialize+0x1c0>)
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e001      	b.n	8000662 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800065e:	f7ff fe4b 	bl	80002f8 <SD_PowerOff>
	}

	return Stat;
 8000662:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <SD_disk_initialize+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	2000009c 	.word	0x2000009c
 8000678:	200000a0 	.word	0x200000a0

0800067c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SD_disk_status+0x14>
 800068c:	2301      	movs	r3, #1
 800068e:	e002      	b.n	8000696 <SD_disk_status+0x1a>
	return Stat;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <SD_disk_status+0x24>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000

080006a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <SD_disk_read+0x1c>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SD_disk_read+0x20>
 80006c0:	2304      	movs	r3, #4
 80006c2:	e051      	b.n	8000768 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <SD_disk_read+0xcc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SD_disk_read+0x32>
 80006d2:	2303      	movs	r3, #3
 80006d4:	e048      	b.n	8000768 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <SD_disk_read+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <SD_disk_read+0x44>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	025b      	lsls	r3, r3, #9
 80006e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80006e8:	f7ff fd30 	bl	800014c <SELECT>

	if (count == 1)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d111      	bne.n	8000716 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2051      	movs	r0, #81	@ 0x51
 80006f6:	f7ff fe86 	bl	8000406 <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d129      	bne.n	8000754 <SD_disk_read+0xb0>
 8000700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f7ff fe0d 	bl	8000324 <SD_RxDataBlock>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d021      	beq.n	8000754 <SD_disk_read+0xb0>
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e01e      	b.n	8000754 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2052      	movs	r0, #82	@ 0x52
 800071a:	f7ff fe74 	bl	8000406 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d117      	bne.n	8000754 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdfb 	bl	8000324 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00a      	beq.n	800074a <SD_disk_read+0xa6>
				buff += 512;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800073a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1ed      	bne.n	8000724 <SD_disk_read+0x80>
 8000748:	e000      	b.n	800074c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800074a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	204c      	movs	r0, #76	@ 0x4c
 8000750:	f7ff fe59 	bl	8000406 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000754:	f7ff fd08 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000758:	f7ff fd48 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	200000a0 	.word	0x200000a0

08000778 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <SD_disk_write+0x1c>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <SD_disk_write+0x20>
 8000794:	2304      	movs	r3, #4
 8000796:	e06b      	b.n	8000870 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <SD_disk_write+0x100>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SD_disk_write+0x32>
 80007a6:	2303      	movs	r3, #3
 80007a8:	e062      	b.n	8000870 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <SD_disk_write+0x100>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SD_disk_write+0x44>
 80007b8:	2302      	movs	r3, #2
 80007ba:	e059      	b.n	8000870 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <SD_disk_write+0x104>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <SD_disk_write+0x56>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80007ce:	f7ff fcbd 	bl	800014c <SELECT>

	if (count == 1)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	2058      	movs	r0, #88	@ 0x58
 80007dc:	f7ff fe13 	bl	8000406 <SD_SendCmd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13a      	bne.n	800085c <SD_disk_write+0xe4>
 80007e6:	21fe      	movs	r1, #254	@ 0xfe
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f7ff fdc9 	bl	8000380 <SD_TxDataBlock>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d033      	beq.n	800085c <SD_disk_write+0xe4>
			count = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	e030      	b.n	800085c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <SD_disk_write+0x104>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2077      	movs	r0, #119	@ 0x77
 800080a:	f7ff fdfc 	bl	8000406 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	2057      	movs	r0, #87	@ 0x57
 8000812:	f7ff fdf8 	bl	8000406 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2059      	movs	r0, #89	@ 0x59
 800081a:	f7ff fdf4 	bl	8000406 <SD_SendCmd>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11b      	bne.n	800085c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000824:	21fc      	movs	r1, #252	@ 0xfc
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f7ff fdaa 	bl	8000380 <SD_TxDataBlock>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <SD_disk_write+0xd0>
				buff += 512;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000838:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ee      	bne.n	8000824 <SD_disk_write+0xac>
 8000846:	e000      	b.n	800084a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000848:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800084a:	21fd      	movs	r1, #253	@ 0xfd
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd97 	bl	8000380 <SD_TxDataBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SD_disk_write+0xe4>
			{
				count = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800085c:	f7ff fc84 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000860:	f7ff fcc4 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	200000a0 	.word	0x200000a0

08000880 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	@ 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	603a      	str	r2, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	460b      	mov	r3, r1
 800088e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SD_disk_ioctl+0x1e>
 800089a:	2304      	movs	r3, #4
 800089c:	e113      	b.n	8000ac6 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d124      	bne.n	80008f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d012      	beq.n	80008d8 <SD_disk_ioctl+0x58>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dc1a      	bgt.n	80008ec <SD_disk_ioctl+0x6c>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <SD_disk_ioctl+0x40>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d006      	beq.n	80008cc <SD_disk_ioctl+0x4c>
 80008be:	e015      	b.n	80008ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008c0:	f7ff fd1a 	bl	80002f8 <SD_PowerOff>
			res = RES_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80008ca:	e0fa      	b.n	8000ac2 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80008cc:	f7ff fcd2 	bl	8000274 <SD_PowerOn>
			res = RES_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80008d6:	e0f4      	b.n	8000ac2 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	1c5c      	adds	r4, r3, #1
 80008dc:	f7ff fd18 	bl	8000310 <SD_CheckPower>
 80008e0:	4603      	mov	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80008ea:	e0ea      	b.n	8000ac2 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80008ec:	2304      	movs	r3, #4
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80008f2:	e0e6      	b.n	8000ac2 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008f4:	4b76      	ldr	r3, [pc, #472]	@ (8000ad0 <SD_disk_ioctl+0x250>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SD_disk_ioctl+0x86>
 8000902:	2303      	movs	r3, #3
 8000904:	e0df      	b.n	8000ac6 <SD_disk_ioctl+0x246>

		SELECT();
 8000906:	f7ff fc21 	bl	800014c <SELECT>

		switch (ctrl)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b0d      	cmp	r3, #13
 800090e:	f200 80c9 	bhi.w	8000aa4 <SD_disk_ioctl+0x224>
 8000912:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <SD_disk_ioctl+0x98>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a0f 	.word	0x08000a0f
 800091c:	08000951 	.word	0x08000951
 8000920:	080009ff 	.word	0x080009ff
 8000924:	08000aa5 	.word	0x08000aa5
 8000928:	08000aa5 	.word	0x08000aa5
 800092c:	08000aa5 	.word	0x08000aa5
 8000930:	08000aa5 	.word	0x08000aa5
 8000934:	08000aa5 	.word	0x08000aa5
 8000938:	08000aa5 	.word	0x08000aa5
 800093c:	08000aa5 	.word	0x08000aa5
 8000940:	08000aa5 	.word	0x08000aa5
 8000944:	08000a21 	.word	0x08000a21
 8000948:	08000a45 	.word	0x08000a45
 800094c:	08000a69 	.word	0x08000a69
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000950:	2100      	movs	r1, #0
 8000952:	2049      	movs	r0, #73	@ 0x49
 8000954:	f7ff fd57 	bl	8000406 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f040 80a6 	bne.w	8000aac <SD_disk_ioctl+0x22c>
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2110      	movs	r1, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcdc 	bl	8000324 <SD_RxDataBlock>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 809c 	beq.w	8000aac <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	099b      	lsrs	r3, r3, #6
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10d      	bne.n	800099a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	461a      	mov	r2, r3
 8000982:	7d3b      	ldrb	r3, [r7, #20]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b29b      	uxth	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000990:	8bfb      	ldrh	r3, [r7, #30]
 8000992:	029a      	lsls	r2, r3, #10
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e02d      	b.n	80009f6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800099a:	7c7b      	ldrb	r3, [r7, #17]
 800099c:	f003 030f 	and.w	r3, r3, #15
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	7dbb      	ldrb	r3, [r7, #22]
 80009a4:	09db      	lsrs	r3, r3, #7
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4413      	add	r3, r2
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	7d7b      	ldrb	r3, [r7, #21]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0306 	and.w	r3, r3, #6
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	3302      	adds	r3, #2
 80009be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009c2:	7d3b      	ldrb	r3, [r7, #20]
 80009c4:	099b      	lsrs	r3, r3, #6
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4413      	add	r3, r2
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	7cbb      	ldrb	r3, [r7, #18]
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009e8:	8bfa      	ldrh	r2, [r7, #30]
 80009ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009ee:	3b09      	subs	r3, #9
 80009f0:	409a      	lsls	r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80009fc:	e056      	b.n	8000aac <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000a0c:	e055      	b.n	8000aba <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a0e:	f7ff fc17 	bl	8000240 <SD_ReadyWait>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2bff      	cmp	r3, #255	@ 0xff
 8000a16:	d14b      	bne.n	8000ab0 <SD_disk_ioctl+0x230>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000a1e:	e047      	b.n	8000ab0 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2049      	movs	r0, #73	@ 0x49
 8000a24:	f7ff fcef 	bl	8000406 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d142      	bne.n	8000ab4 <SD_disk_ioctl+0x234>
 8000a2e:	2110      	movs	r1, #16
 8000a30:	6a38      	ldr	r0, [r7, #32]
 8000a32:	f7ff fc77 	bl	8000324 <SD_RxDataBlock>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d03b      	beq.n	8000ab4 <SD_disk_ioctl+0x234>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000a42:	e037      	b.n	8000ab4 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a44:	2100      	movs	r1, #0
 8000a46:	204a      	movs	r0, #74	@ 0x4a
 8000a48:	f7ff fcdd 	bl	8000406 <SD_SendCmd>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d132      	bne.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a52:	2110      	movs	r1, #16
 8000a54:	6a38      	ldr	r0, [r7, #32]
 8000a56:	f7ff fc65 	bl	8000324 <SD_RxDataBlock>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d02b      	beq.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000a66:	e027      	b.n	8000ab8 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	207a      	movs	r0, #122	@ 0x7a
 8000a6c:	f7ff fccb 	bl	8000406 <SD_SendCmd>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d116      	bne.n	8000aa4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000a7c:	e00b      	b.n	8000a96 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000a7e:	6a3c      	ldr	r4, [r7, #32]
 8000a80:	1c63      	adds	r3, r4, #1
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	f7ff fbb2 	bl	80001ec <SPI_RxByte>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a90:	3301      	adds	r3, #1
 8000a92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000a96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9ef      	bls.n	8000a7e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000aaa:	e006      	b.n	8000aba <SD_disk_ioctl+0x23a>
			break;
 8000aac:	bf00      	nop
 8000aae:	e004      	b.n	8000aba <SD_disk_ioctl+0x23a>
			break;
 8000ab0:	bf00      	nop
 8000ab2:	e002      	b.n	8000aba <SD_disk_ioctl+0x23a>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e000      	b.n	8000aba <SD_disk_ioctl+0x23a>
			break;
 8000ab8:	bf00      	nop
		}

		DESELECT();
 8000aba:	f7ff fb55 	bl	8000168 <DESELECT>
		SPI_RxByte();
 8000abe:	f7ff fb95 	bl	80001ec <SPI_RxByte>
	}

	return res;
 8000ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	372c      	adds	r7, #44	@ 0x2c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f000 fbae 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f89a 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f000 f90a 	bl	8000cf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae4:	f000 f8d2 	bl	8000c8c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ae8:	f001 fec2 	bl	8002870 <MX_FATFS_Init>
  //f_puts("Dato1,Dato2,Dato3\n", &fil);
  //f_close(&fil);


  // Montar el sistema de archivos
  if (f_mount(&fs, "", 0) != FR_OK) {
 8000aec:	2200      	movs	r2, #0
 8000aee:	4939      	ldr	r1, [pc, #228]	@ (8000bd4 <main+0x100>)
 8000af0:	4839      	ldr	r0, [pc, #228]	@ (8000bd8 <main+0x104>)
 8000af2:	f004 fb91 	bl	8005218 <f_mount>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <main+0x2c>
      // Manejar el error de montaje del sistema de archivos
      Error_Handler();
 8000afc:	f000 f950 	bl	8000da0 <Error_Handler>
  }

  save_sd(0,"MCU initialized", "timestamp");
 8000b00:	4a36      	ldr	r2, [pc, #216]	@ (8000bdc <main+0x108>)
 8000b02:	4937      	ldr	r1, [pc, #220]	@ (8000be0 <main+0x10c>)
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f951 	bl	8000dac <save_sd>


  if (verificarSd("data.csv") == 1) {
 8000b0a:	4836      	ldr	r0, [pc, #216]	@ (8000be4 <main+0x110>)
 8000b0c:	f000 f9c6 	bl	8000e9c <verificarSd>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d103      	bne.n	8000b1e <main+0x4a>
	  printf("OK: Se pudo acceder a data.csv\n");
 8000b16:	4834      	ldr	r0, [pc, #208]	@ (8000be8 <main+0x114>)
 8000b18:	f005 ff50 	bl	80069bc <puts>
 8000b1c:	e002      	b.n	8000b24 <main+0x50>
  } else {
	  // Manejar el error: archivo no disponible
	  printf("KO: No se pudo acceder a data.csv\n");
 8000b1e:	4833      	ldr	r0, [pc, #204]	@ (8000bec <main+0x118>)
 8000b20:	f005 ff4c 	bl	80069bc <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 /* Toggle the LED */
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b28:	4831      	ldr	r0, [pc, #196]	@ (8000bf0 <main+0x11c>)
 8000b2a:	f000 fe8b 	bl	8001844 <HAL_GPIO_TogglePin>
	 HAL_Delay(200);
 8000b2e:	20c8      	movs	r0, #200	@ 0xc8
 8000b30:	f000 fbe4 	bl	80012fc <HAL_Delay>

	 switch (case_index) {
 8000b34:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <main+0x120>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b06      	cmp	r3, #6
 8000b3a:	d83b      	bhi.n	8000bb4 <main+0xe0>
 8000b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b44 <main+0x70>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b61 	.word	0x08000b61
 8000b48:	08000b6d 	.word	0x08000b6d
 8000b4c:	08000b79 	.word	0x08000b79
 8000b50:	08000b85 	.word	0x08000b85
 8000b54:	08000b91 	.word	0x08000b91
 8000b58:	08000b9d 	.word	0x08000b9d
 8000b5c:	08000ba9 	.word	0x08000ba9
	 	  case 0:
	 		  //ID_Engine_temp
	 		  save_sd(1, "Engine_temp_Value", "timestamp");
 8000b60:	4a1e      	ldr	r2, [pc, #120]	@ (8000bdc <main+0x108>)
 8000b62:	4925      	ldr	r1, [pc, #148]	@ (8000bf8 <main+0x124>)
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 f921 	bl	8000dac <save_sd>
	 		  break;
 8000b6a:	e026      	b.n	8000bba <main+0xe6>
	 	  case 1:
	 		  //Battery_volt
	 		  save_sd(2, "Valor_Battery_volt_Value", "timestamp");
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <main+0x108>)
 8000b6e:	4923      	ldr	r1, [pc, #140]	@ (8000bfc <main+0x128>)
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 f91b 	bl	8000dac <save_sd>
	 		  break;
 8000b76:	e020      	b.n	8000bba <main+0xe6>
	 	  case 2:
	 		  //Speed
	 		  save_sd(3, "Valor_Speed_Value", "timestamp");
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <main+0x108>)
 8000b7a:	4921      	ldr	r1, [pc, #132]	@ (8000c00 <main+0x12c>)
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f915 	bl	8000dac <save_sd>
	 		  break;
 8000b82:	e01a      	b.n	8000bba <main+0xe6>
	 	  case 3:
	 		  //Gear
	 		  save_sd(4, "Valor_Gear_Value", "timestamp");
 8000b84:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <main+0x108>)
 8000b86:	491f      	ldr	r1, [pc, #124]	@ (8000c04 <main+0x130>)
 8000b88:	2004      	movs	r0, #4
 8000b8a:	f000 f90f 	bl	8000dac <save_sd>
	 		  break;
 8000b8e:	e014      	b.n	8000bba <main+0xe6>
	 	  case 4:
	 		  //RPMs
	 		  save_sd(5, "Valor_RPM_Value", "timestamp");
 8000b90:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <main+0x108>)
 8000b92:	491d      	ldr	r1, [pc, #116]	@ (8000c08 <main+0x134>)
 8000b94:	2005      	movs	r0, #5
 8000b96:	f000 f909 	bl	8000dac <save_sd>
	 		  break;
 8000b9a:	e00e      	b.n	8000bba <main+0xe6>
	 	  case 5:
	 		  //Brake_pedal
	 		  save_sd(6, "Valor_Brake_pedal_Value", "timestamp" );
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <main+0x108>)
 8000b9e:	491b      	ldr	r1, [pc, #108]	@ (8000c0c <main+0x138>)
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f000 f903 	bl	8000dac <save_sd>
	 		  break;
 8000ba6:	e008      	b.n	8000bba <main+0xe6>
	 	  case 6:
	 		  //Accel_pedal
	 		  save_sd(7,"Valor_Accel_pedal_Value", "timestamp");
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <main+0x108>)
 8000baa:	4919      	ldr	r1, [pc, #100]	@ (8000c10 <main+0x13c>)
 8000bac:	2007      	movs	r0, #7
 8000bae:	f000 f8fd 	bl	8000dac <save_sd>
	 		  break;
 8000bb2:	e002      	b.n	8000bba <main+0xe6>
	 	  default:
	 		  // Manejar el caso por defecto si case_index está fuera de rango
	 		  Error_Handler();
 8000bb4:	f000 f8f4 	bl	8000da0 <Error_Handler>
	 		  break;
 8000bb8:	bf00      	nop
	   }
	case_index++;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <main+0x120>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <main+0x120>)
 8000bc2:	6013      	str	r3, [r2, #0]
	if (case_index == 7) {
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <main+0x120>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b07      	cmp	r3, #7
 8000bca:	d1ab      	bne.n	8000b24 <main+0x50>
	    case_index = 0;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <main+0x120>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bd2:	e7a7      	b.n	8000b24 <main+0x50>
 8000bd4:	08007804 	.word	0x08007804
 8000bd8:	200000a8 	.word	0x200000a8
 8000bdc:	08007808 	.word	0x08007808
 8000be0:	08007814 	.word	0x08007814
 8000be4:	08007824 	.word	0x08007824
 8000be8:	08007830 	.word	0x08007830
 8000bec:	08007850 	.word	0x08007850
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	200000a4 	.word	0x200000a4
 8000bf8:	08007874 	.word	0x08007874
 8000bfc:	08007888 	.word	0x08007888
 8000c00:	080078a4 	.word	0x080078a4
 8000c04:	080078b8 	.word	0x080078b8
 8000c08:	080078cc 	.word	0x080078cc
 8000c0c:	080078dc 	.word	0x080078dc
 8000c10:	080078f4 	.word	0x080078f4

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	@ 0x40
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2228      	movs	r2, #40	@ 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f005 ffde 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fe14 	bl	8001878 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c56:	f000 f8a3 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f882 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f88f 	bl	8000da0 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3740      	adds	r7, #64	@ 0x40
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000c92:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <MX_SPI1_Init+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cd8:	220a      	movs	r2, #10
 8000cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_SPI1_Init+0x64>)
 8000cde:	f001 f9a9 	bl	8002034 <HAL_SPI_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce8:	f000 f85a 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200010d8 	.word	0x200010d8
 8000cf4:	40013000 	.word	0x40013000

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_GPIO_Init+0x9c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d42:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <MX_GPIO_Init+0xa0>)
 8000d44:	f000 fd66 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <MX_GPIO_Init+0xa4>)
 8000d4e:	f000 fd61 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_GPIO_Init+0xa0>)
 8000d6c:	f000 fbce 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d70:	2310      	movs	r3, #16
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_GPIO_Init+0xa4>)
 8000d88:	f000 fbc0 	bl	800150c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <Error_Handler+0x8>

08000dac <save_sd>:
 *
 * @param id El identificador que se va a guardar.
 * @param value El valor que se va a guardar.
 * @param timestamp La marca de tiempo asociada a los datos.
 */
void save_sd(int id, const char* value, const char* timestamp) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8000db2:	b082      	sub	sp, #8
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dbe:	6018      	str	r0, [r3, #0]
 8000dc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dc4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000dc8:	6019      	str	r1, [r3, #0]
 8000dca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000dd2:	601a      	str	r2, [r3, #0]
    FIL fil;  // Variable para guardar fivhero
    char buffer[256]; // Variable para guardar fila a insertar

    // Abrir el archivo
    if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) {
 8000dd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dd8:	3b0c      	subs	r3, #12
 8000dda:	2212      	movs	r2, #18
 8000ddc:	492d      	ldr	r1, [pc, #180]	@ (8000e94 <save_sd+0xe8>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fa64 	bl	80052ac <f_open>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <save_sd+0x44>
        // Manejar el error de apertura o creación del archivo
        Error_Handler();
 8000dea:	f7ff ffd9 	bl	8000da0 <Error_Handler>

        return;
 8000dee:	e04c      	b.n	8000e8a <save_sd+0xde>
    }

    // Posicionarse al final del archivo para añadir datos
    if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 8000df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000df4:	f8d3 2fe0 	ldr.w	r2, [r3, #4064]	@ 0xfe0
 8000df8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dfc:	3b0c      	subs	r3, #12
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 f899 	bl	8005f38 <f_lseek>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <save_sd+0x72>
        // Manejar error
        f_close(&fil) ;
 8000e0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e10:	3b0c      	subs	r3, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 f865 	bl	8005ee2 <f_close>
        Error_Handler();
 8000e18:	f7ff ffc2 	bl	8000da0 <Error_Handler>
        return;
 8000e1c:	e035      	b.n	8000e8a <save_sd+0xde>
    }

    // Escribir el id, value y timestamp
    snprintf(buffer, sizeof(buffer), "%d, %s, %s\n", id, value, timestamp);
 8000e1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e22:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e26:	f107 0020 	add.w	r0, r7, #32
 8000e2a:	380c      	subs	r0, #12
 8000e2c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000e30:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000e3c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <save_sd+0xec>)
 8000e48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4c:	f005 fdbe 	bl	80069cc <sniprintf>
    if (f_puts(buffer, &fil) == EOF) {
 8000e50:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e54:	3a0c      	subs	r2, #12
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	3b0c      	subs	r3, #12
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fb98 	bl	8006594 <f_puts>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6a:	d108      	bne.n	8000e7e <save_sd+0xd2>
        // Manejar error escritura
        f_close(&fil);
 8000e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e70:	3b0c      	subs	r3, #12
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 f835 	bl	8005ee2 <f_close>
        Error_Handler();
 8000e78:	f7ff ff92 	bl	8000da0 <Error_Handler>
        return;
 8000e7c:	e005      	b.n	8000e8a <save_sd+0xde>
    }

    // Cerrar el archivo
    f_close(&fil);
 8000e7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e82:	3b0c      	subs	r3, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 f82c 	bl	8005ee2 <f_close>
}
 8000e8a:	f507 578a 	add.w	r7, r7, #4416	@ 0x1140
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	0800790c 	.word	0x0800790c
 8000e98:	08007918 	.word	0x08007918

08000e9c <verificarSd>:
 * Esta función intenta abrir un archivo en modo de escritura y verifica si el archivo se puede escribir.
 *
 * @param filename nombre del archivo a verificar.
 * @return int Devuelve 1 si el archivo puede ser abierto y escrito correctamente, de lo contrario devuelve 0.
 */
int verificarSd(const char* filename) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eaa:	f843 0c34 	str.w	r0, [r3, #-52]
    FIL fil;
    FRESULT res;

    // Intentar abrir el archivo en modo de escritura
    res = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8000eae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	3b10      	subs	r3, #16
 8000eba:	2212      	movs	r2, #18
 8000ebc:	f851 1c34 	ldr.w	r1, [r1, #-52]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f9f3 	bl	80052ac <f_open>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000ecc:	f102 0217 	add.w	r2, r2, #23
 8000ed0:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 8000ed2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000ed6:	f103 0317 	add.w	r3, r3, #23
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <verificarSd+0x48>
        return 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e016      	b.n	8000f12 <verificarSd+0x76>
    }

    // Verificar si el archivo está abierto y se puede escribir
    if ((fil.flag & FA_WRITE) == 0) {
 8000ee4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ee8:	f893 3fd6 	ldrb.w	r3, [r3, #4054]	@ 0xfd6
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d107      	bne.n	8000f04 <verificarSd+0x68>
        f_close(&fil);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	3b10      	subs	r3, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 fff1 	bl	8005ee2 <f_close>
        return 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e006      	b.n	8000f12 <verificarSd+0x76>
    }

    // Cerrar el archivo y devolver 1 (todo ok)
    f_close(&fil);
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	3b10      	subs	r3, #16
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 ffe9 	bl	8005ee2 <f_close>
    return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <HAL_MspInit+0x5c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_MspInit+0x60>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_MspInit+0x60>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000

08000f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d12f      	bne.n	8001004 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000faa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fd4:	23a0      	movs	r3, #160	@ 0xa0
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <HAL_SPI_MspInit+0x90>)
 8000fe8:	f000 fa90 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_SPI_MspInit+0x90>)
 8001000:	f000 fa84 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013000 	.word	0x40013000
 8001010:	40021000 	.word	0x40021000
 8001014:	40010800 	.word	0x40010800

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <SysTick_Handler+0x34>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <SysTick_Handler+0x18>
	  Timer1--;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <SysTick_Handler+0x34>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <SysTick_Handler+0x34>)
 800107a:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <SysTick_Handler+0x38>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <SysTick_Handler+0x2c>
	  Timer2--;
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Handler+0x38>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	3b01      	subs	r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <SysTick_Handler+0x38>)
 800108e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f918 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000009c 	.word	0x2000009c
 800109c:	2000009e 	.word	0x2000009e

080010a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
  }

  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
  }
  return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001138:	605a      	str	r2, [r3, #4]
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f005 fd6c 	bl	8006c80 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20005000 	.word	0x20005000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20001130 	.word	0x20001130
 80011dc:	200014b8 	.word	0x200014b8

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff fff8 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011f2:	490c      	ldr	r1, [pc, #48]	@ (8001224 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001208:	4c09      	ldr	r4, [pc, #36]	@ (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f005 fd39 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fc5b 	bl	8000ad4 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001228:	08007f1c 	.word	0x08007f1c
  ldr r2, =_sbss
 800122c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001230:	200014b8 	.word	0x200014b8

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f92b 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fe64 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f935 	bl	80014f2 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f90b 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	20001134 	.word	0x20001134

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20001134 	.word	0x20001134

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000000c 	.word	0x2000000c

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff49 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff5e 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffb0 	bl	8001460 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b08b      	sub	sp, #44	@ 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e169      	b.n	80017f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001520:	2201      	movs	r2, #1
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8158 	bne.w	80017ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a9a      	ldr	r2, [pc, #616]	@ (80017ac <HAL_GPIO_Init+0x2a0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d05e      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001548:	4a98      	ldr	r2, [pc, #608]	@ (80017ac <HAL_GPIO_Init+0x2a0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d875      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800154e:	4a98      	ldr	r2, [pc, #608]	@ (80017b0 <HAL_GPIO_Init+0x2a4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d058      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001554:	4a96      	ldr	r2, [pc, #600]	@ (80017b0 <HAL_GPIO_Init+0x2a4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d86f      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800155a:	4a96      	ldr	r2, [pc, #600]	@ (80017b4 <HAL_GPIO_Init+0x2a8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d052      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001560:	4a94      	ldr	r2, [pc, #592]	@ (80017b4 <HAL_GPIO_Init+0x2a8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d869      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001566:	4a94      	ldr	r2, [pc, #592]	@ (80017b8 <HAL_GPIO_Init+0x2ac>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04c      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 800156c:	4a92      	ldr	r2, [pc, #584]	@ (80017b8 <HAL_GPIO_Init+0x2ac>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d863      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001572:	4a92      	ldr	r2, [pc, #584]	@ (80017bc <HAL_GPIO_Init+0x2b0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d046      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001578:	4a90      	ldr	r2, [pc, #576]	@ (80017bc <HAL_GPIO_Init+0x2b0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d85d      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d82a      	bhi.n	80015d8 <HAL_GPIO_Init+0xcc>
 8001582:	2b12      	cmp	r3, #18
 8001584:	d859      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001586:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <HAL_GPIO_Init+0x80>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	08001607 	.word	0x08001607
 8001590:	080015e1 	.word	0x080015e1
 8001594:	080015f3 	.word	0x080015f3
 8001598:	08001635 	.word	0x08001635
 800159c:	0800163b 	.word	0x0800163b
 80015a0:	0800163b 	.word	0x0800163b
 80015a4:	0800163b 	.word	0x0800163b
 80015a8:	0800163b 	.word	0x0800163b
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	0800163b 	.word	0x0800163b
 80015b4:	0800163b 	.word	0x0800163b
 80015b8:	0800163b 	.word	0x0800163b
 80015bc:	0800163b 	.word	0x0800163b
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	0800163b 	.word	0x0800163b
 80015c8:	0800163b 	.word	0x0800163b
 80015cc:	0800163b 	.word	0x0800163b
 80015d0:	080015e9 	.word	0x080015e9
 80015d4:	080015fd 	.word	0x080015fd
 80015d8:	4a79      	ldr	r2, [pc, #484]	@ (80017c0 <HAL_GPIO_Init+0x2b4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015de:	e02c      	b.n	800163a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e029      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	3304      	adds	r3, #4
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e024      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	3308      	adds	r3, #8
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e01f      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e01a      	b.n	800163c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160e:	2304      	movs	r3, #4
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e013      	b.n	800163c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800161c:	2308      	movs	r3, #8
 800161e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	611a      	str	r2, [r3, #16]
          break;
 8001626:	e009      	b.n	800163c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001628:	2308      	movs	r3, #8
 800162a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	615a      	str	r2, [r3, #20]
          break;
 8001632:	e003      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x130>
          break;
 800163a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	@ 0xff
 8001640:	d801      	bhi.n	8001646 <HAL_GPIO_Init+0x13a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e001      	b.n	800164a <HAL_GPIO_Init+0x13e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	@ 0xff
 8001650:	d802      	bhi.n	8001658 <HAL_GPIO_Init+0x14c>
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x152>
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	3b08      	subs	r3, #8
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	210f      	movs	r1, #15
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	6a39      	ldr	r1, [r7, #32]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80b1 	beq.w	80017ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800168c:	4b4d      	ldr	r3, [pc, #308]	@ (80017c4 <HAL_GPIO_Init+0x2b8>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a4c      	ldr	r2, [pc, #304]	@ (80017c4 <HAL_GPIO_Init+0x2b8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b4a      	ldr	r3, [pc, #296]	@ (80017c4 <HAL_GPIO_Init+0x2b8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a4:	4a48      	ldr	r2, [pc, #288]	@ (80017c8 <HAL_GPIO_Init+0x2bc>)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a40      	ldr	r2, [pc, #256]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x1ec>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3f      	ldr	r2, [pc, #252]	@ (80017d0 <HAL_GPIO_Init+0x2c4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1e8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3e      	ldr	r2, [pc, #248]	@ (80017d4 <HAL_GPIO_Init+0x2c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1e4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3d      	ldr	r2, [pc, #244]	@ (80017d8 <HAL_GPIO_Init+0x2cc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016e8:	2303      	movs	r3, #3
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016ec:	2304      	movs	r3, #4
 80016ee:	e004      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f8:	2300      	movs	r3, #0
 80016fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016fc:	f002 0203 	and.w	r2, r2, #3
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4093      	lsls	r3, r2
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800170a:	492f      	ldr	r1, [pc, #188]	@ (80017c8 <HAL_GPIO_Init+0x2bc>)
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001724:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	492c      	ldr	r1, [pc, #176]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4928      	ldr	r1, [pc, #160]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174c:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	4922      	ldr	r1, [pc, #136]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	491e      	ldr	r1, [pc, #120]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4918      	ldr	r1, [pc, #96]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4914      	ldr	r1, [pc, #80]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d021      	beq.n	80017e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	490e      	ldr	r1, [pc, #56]	@ (80017dc <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e021      	b.n	80017ee <HAL_GPIO_Init+0x2e2>
 80017aa:	bf00      	nop
 80017ac:	10320000 	.word	0x10320000
 80017b0:	10310000 	.word	0x10310000
 80017b4:	10220000 	.word	0x10220000
 80017b8:	10210000 	.word	0x10210000
 80017bc:	10120000 	.word	0x10120000
 80017c0:	10110000 	.word	0x10110000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40011000 	.word	0x40011000
 80017d8:	40011400 	.word	0x40011400
 80017dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_GPIO_Init+0x304>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4909      	ldr	r1, [pc, #36]	@ (8001810 <HAL_GPIO_Init+0x304>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f ae8e 	bne.w	8001520 <HAL_GPIO_Init+0x14>
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	372c      	adds	r7, #44	@ 0x2c
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43d9      	mvns	r1, r3
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	400b      	ands	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
	...

08001878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e272      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001898:	4b92      	ldr	r3, [pc, #584]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d00c      	beq.n	80018be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d112      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
 80018b0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b89      	ldr	r3, [pc, #548]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x12c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e24c      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x76>
 80018e0:	4b80      	ldr	r3, [pc, #512]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b78      	ldr	r3, [pc, #480]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a77      	ldr	r2, [pc, #476]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xbc>
 800191a:	4b72      	ldr	r3, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a71      	ldr	r2, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001934:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a67      	ldr	r2, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fcc8 	bl	80012e8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fcc4 	bl	80012e8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e200      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe4>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fcb4 	bl	80012e8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fcb0 	bl	80012e8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1ec      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x10c>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
 80019ca:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c0      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4939      	ldr	r1, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fc69 	bl	80012e8 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fc65 	bl	80012e8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4927      	ldr	r1, [pc, #156]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc48 	bl	80012e8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc44 	bl	80012e8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e180      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03a      	beq.n	8001afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fc28 	bl	80012e8 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc24 	bl	80012e8 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e160      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fa9c 	bl	8001ff8 <RCC_Delay>
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fc0e 	bl	80012e8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	e00f      	b.n	8001af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc0a 	bl	80012e8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e146      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	42420000 	.word	0x42420000
 8001aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	4b92      	ldr	r3, [pc, #584]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e9      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80a6 	beq.w	8001c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b88      	ldr	r3, [pc, #544]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a87      	ldr	r2, [pc, #540]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b85      	ldr	r3, [pc, #532]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b82      	ldr	r3, [pc, #520]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7e      	ldr	r2, [pc, #504]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fbcb 	bl	80012e8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fbc7 	bl	80012e8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e103      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x312>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6e      	ldr	r2, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e02d      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x334>
 8001b92:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a69      	ldr	r2, [pc, #420]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	e01c      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10c      	bne.n	8001bce <HAL_RCC_OscConfig+0x356>
 8001bb4:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bce:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b58      	ldr	r3, [pc, #352]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d015      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb7b 	bl	80012e8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fb77 	bl	80012e8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0b1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ee      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x37e>
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fb65 	bl	80012e8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fb61 	bl	80012e8 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e09b      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ee      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d061      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d146      	bne.n	8001d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fb35 	bl	80012e8 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fb31 	bl	80012e8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e06d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001caa:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4921      	ldr	r1, [pc, #132]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a19      	ldr	r1, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	491b      	ldr	r1, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fb05 	bl	80012e8 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff fb01 	bl	80012e8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e03d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
 8001d00:	e035      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff faee 	bl	80012e8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff faea 	bl	80012e8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e026      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x498>
 8001d2e:	e01e      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e019      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x500>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4965      	ldr	r1, [pc, #404]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff fa3c 	bl	80012e8 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff fa38 	bl	80012e8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4922      	ldr	r1, [pc, #136]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_RCC_ClockConfig+0x1cc>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f99a 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	0800796c 	.word	0x0800796c
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7e:	e027      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e027      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0c5b      	lsrs	r3, r3, #17
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e004      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	0800797c 	.word	0x0800797c
 8001ff0:	0800798c 	.word	0x0800798c
 8001ff4:	003d0900 	.word	0x003d0900

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000004 	.word	0x20000004
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e076      	b.n	8002134 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002056:	d009      	beq.n	800206c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
 800205e:	e005      	b.n	800206c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe ff7c 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	0c1a      	lsrs	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f002 0204 	and.w	r2, r2, #4
 8002112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_SPI_Transmit+0x22>
 800215a:	2302      	movs	r3, #2
 800215c:	e12d      	b.n	80023ba <HAL_SPI_Transmit+0x27e>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002166:	f7ff f8bf 	bl	80012e8 <HAL_GetTick>
 800216a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d002      	beq.n	8002182 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002180:	e116      	b.n	80023b0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_Transmit+0x52>
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002192:	e10d      	b.n	80023b0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	88fa      	ldrh	r2, [r7, #6]
 80021b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021da:	d10f      	bne.n	80021fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002206:	2b40      	cmp	r3, #64	@ 0x40
 8002208:	d007      	beq.n	800221a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002222:	d14f      	bne.n	80022c4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_SPI_Transmit+0xf6>
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d142      	bne.n	80022b8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002256:	e02f      	b.n	80022b8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d112      	bne.n	800228c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	86da      	strh	r2, [r3, #54]	@ 0x36
 800228a:	e015      	b.n	80022b8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800228c:	f7ff f82c 	bl	80012e8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d803      	bhi.n	80022a4 <HAL_SPI_Transmit+0x168>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d102      	bne.n	80022aa <HAL_SPI_Transmit+0x16e>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80022b6:	e07b      	b.n	80023b0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ca      	bne.n	8002258 <HAL_SPI_Transmit+0x11c>
 80022c2:	e050      	b.n	8002366 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Transmit+0x196>
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d144      	bne.n	800235c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022f8:	e030      	b.n	800235c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d113      	bne.n	8002330 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800232e:	e015      	b.n	800235c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002330:	f7fe ffda 	bl	80012e8 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d803      	bhi.n	8002348 <HAL_SPI_Transmit+0x20c>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d102      	bne.n	800234e <HAL_SPI_Transmit+0x212>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800235a:	e029      	b.n	80023b0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1c9      	bne.n	80022fa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa62 	bl	8002834 <SPI_EndRxTxTransaction>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	77fb      	strb	r3, [r7, #31]
 80023a6:	e003      	b.n	80023b0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80023b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08c      	sub	sp, #48	@ 0x30
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x26>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e198      	b.n	800271a <HAL_SPI_TransmitReceive+0x358>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f0:	f7fe ff7a 	bl	80012e8 <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800240a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800240e:	2b01      	cmp	r3, #1
 8002410:	d00f      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x70>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002418:	d107      	bne.n	800242a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_SPI_TransmitReceive+0x68>
 8002422:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002426:	2b04      	cmp	r3, #4
 8002428:	d003      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002430:	e16d      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x82>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x82>
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800244a:	e160      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b04      	cmp	r3, #4
 8002456:	d003      	beq.n	8002460 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2205      	movs	r2, #5
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	887a      	ldrh	r2, [r7, #2]
 8002482:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d007      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024bc:	d17c      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_SPI_TransmitReceive+0x10a>
 80024c6:	8b7b      	ldrh	r3, [r7, #26]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d16a      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	1c9a      	adds	r2, r3, #2
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f0:	e057      	b.n	80025a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d11b      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x176>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_SPI_TransmitReceive+0x176>
 800250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d113      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d119      	bne.n	800257a <HAL_SPI_TransmitReceive+0x1b8>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d014      	beq.n	800257a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	b292      	uxth	r2, r2
 800255c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002562:	1c9a      	adds	r2, r3, #2
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002576:	2301      	movs	r3, #1
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800257a:	f7fe feb5 	bl	80012e8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002586:	429a      	cmp	r2, r3
 8002588:	d80b      	bhi.n	80025a2 <HAL_SPI_TransmitReceive+0x1e0>
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80025a0:	e0b5      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1a2      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x130>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d19d      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x130>
 80025b6:	e080      	b.n	80026ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x204>
 80025c0:	8b7b      	ldrh	r3, [r7, #26]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d16f      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ec:	e05b      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d11c      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x274>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x274>
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d114      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d119      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x2b6>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d014      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002674:	2301      	movs	r3, #1
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002678:	f7fe fe36 	bl	80012e8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002684:	429a      	cmp	r2, r3
 8002686:	d803      	bhi.n	8002690 <HAL_SPI_TransmitReceive+0x2ce>
 8002688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d102      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x2d4>
 8002690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80026a4:	e033      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d19e      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x22c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d199      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f8b8 	bl	8002834 <SPI_EndRxTxTransaction>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80026d6:	e01a      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002704:	e003      	b.n	800270e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002716:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	@ 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002734:	f7fe fdd8 	bl	80012e8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002744:	f7fe fdd0 	bl	80012e8 <HAL_GetTick>
 8002748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800274a:	4b39      	ldr	r3, [pc, #228]	@ (8002830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	0d1b      	lsrs	r3, r3, #20
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275a:	e054      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d050      	beq.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002764:	f7fe fdc0 	bl	80012e8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	d902      	bls.n	800277a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13d      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002792:	d111      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800279c:	d004      	beq.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a6:	d107      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d10f      	bne.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e017      	b.n	8002826 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3b01      	subs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d19b      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000004 	.word	0x20000004

08002834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff6a 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e000      	b.n	8002868 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002874:	4904      	ldr	r1, [pc, #16]	@ (8002888 <MX_FATFS_Init+0x18>)
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <MX_FATFS_Init+0x1c>)
 8002878:	f003 ff10 	bl	800669c <FATFS_LinkDriver>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <MX_FATFS_Init+0x20>)
 8002882:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000113c 	.word	0x2000113c
 800288c:	20000010 	.word	0x20000010
 8002890:	20001138 	.word	0x20001138

08002894 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002898:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fdfe 	bl	80004b0 <SD_disk_initialize>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fed5 	bl	800067c <SD_disk_status>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80028ee:	7bf8      	ldrb	r0, [r7, #15]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	f7fd fed5 	bl	80006a4 <SD_disk_read>
 80028fa:	4603      	mov	r3, r0
 80028fc:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002916:	7bf8      	ldrb	r0, [r7, #15]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	f7fd ff2b 	bl	8000778 <SD_disk_write>
 8002922:	4603      	mov	r3, r0
 8002924:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	603a      	str	r2, [r7, #0]
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	460b      	mov	r3, r1
 800293c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	79b9      	ldrb	r1, [r7, #6]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd ff9b 	bl	8000880 <SD_disk_ioctl>
 800294a:	4603      	mov	r3, r0
 800294c:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <disk_status+0x30>)
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	4905      	ldr	r1, [pc, #20]	@ (8002988 <disk_status+0x30>)
 8002972:	440a      	add	r2, r1
 8002974:	7a12      	ldrb	r2, [r2, #8]
 8002976:	4610      	mov	r0, r2
 8002978:	4798      	blx	r3
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20001360 	.word	0x20001360

0800298c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <disk_initialize+0x48>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4a0b      	ldr	r2, [pc, #44]	@ (80029d4 <disk_initialize+0x48>)
 80029a8:	2101      	movs	r1, #1
 80029aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <disk_initialize+0x48>)
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	4906      	ldr	r1, [pc, #24]	@ (80029d4 <disk_initialize+0x48>)
 80029bc:	440a      	add	r2, r1
 80029be:	7a12      	ldrb	r2, [r2, #8]
 80029c0:	4610      	mov	r0, r2
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20001360 	.word	0x20001360

080029d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <disk_read+0x3c>)
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	689c      	ldr	r4, [r3, #8]
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <disk_read+0x3c>)
 80029f8:	4413      	add	r3, r2
 80029fa:	7a18      	ldrb	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	47a0      	blx	r4
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]
  return res;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20001360 	.word	0x20001360

08002a18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <disk_write+0x3c>)
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68dc      	ldr	r4, [r3, #12]
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	4a07      	ldr	r2, [pc, #28]	@ (8002a54 <disk_write+0x3c>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	7a18      	ldrb	r0, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	47a0      	blx	r4
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20001360 	.word	0x20001360

08002a58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	603a      	str	r2, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	460b      	mov	r3, r1
 8002a66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4a09      	ldr	r2, [pc, #36]	@ (8002a90 <disk_ioctl+0x38>)
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	4906      	ldr	r1, [pc, #24]	@ (8002a90 <disk_ioctl+0x38>)
 8002a78:	440a      	add	r2, r1
 8002a7a:	7a10      	ldrb	r0, [r2, #8]
 8002a7c:	79b9      	ldrb	r1, [r7, #6]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	4798      	blx	r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]
  return res;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20001360 	.word	0x20001360

08002a94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002aa8:	e007      	b.n	8002aba <mem_cpy+0x26>
		*d++ = *s++;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	1c53      	adds	r3, r2, #1
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	6179      	str	r1, [r7, #20]
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f2      	bne.n	8002aaa <mem_cpy+0x16>
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002ae0:	e005      	b.n	8002aee <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	617a      	str	r2, [r7, #20]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f4      	bne.n	8002ae2 <mem_set+0x12>
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002b1c:	bf00      	nop
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1e5a      	subs	r2, r3, #1
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <mem_cmp+0x40>
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	61fa      	str	r2, [r7, #28]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	61ba      	str	r2, [r7, #24]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	1acb      	subs	r3, r1, r3
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ec      	beq.n	8002b1e <mem_cmp+0x1a>
	return r;
 8002b44:	697b      	ldr	r3, [r7, #20]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002b5a:	e002      	b.n	8002b62 <chk_chr+0x12>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <chk_chr+0x26>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d1f2      	bne.n	8002b5c <chk_chr+0xc>
	return *str;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	781b      	ldrb	r3, [r3, #0]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e03b      	b.n	8002c10 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8002b98:	4931      	ldr	r1, [pc, #196]	@ (8002c60 <chk_lock+0xdc>)
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02c      	beq.n	8002c06 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002bac:	492c      	ldr	r1, [pc, #176]	@ (8002c60 <chk_lock+0xdc>)
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d120      	bne.n	8002c0a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8002bc8:	4925      	ldr	r1, [pc, #148]	@ (8002c60 <chk_lock+0xdc>)
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d111      	bne.n	8002c0a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8002be6:	491e      	ldr	r1, [pc, #120]	@ (8002c60 <chk_lock+0xdc>)
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfe:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d102      	bne.n	8002c0a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8002c04:	e007      	b.n	8002c16 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d9c0      	bls.n	8002b98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d109      	bne.n	8002c30 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <chk_lock+0xa4>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d101      	bne.n	8002c2c <chk_lock+0xa8>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e013      	b.n	8002c54 <chk_lock+0xd0>
 8002c2c:	2312      	movs	r3, #18
 8002c2e:	e011      	b.n	8002c54 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <chk_lock+0xca>
 8002c36:	490a      	ldr	r1, [pc, #40]	@ (8002c60 <chk_lock+0xdc>)
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	330a      	adds	r3, #10
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4c:	d101      	bne.n	8002c52 <chk_lock+0xce>
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e000      	b.n	8002c54 <chk_lock+0xd0>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20001148 	.word	0x20001148

08002c64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e002      	b.n	8002c76 <enq_lock+0x12>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d809      	bhi.n	8002c90 <enq_lock+0x2c>
 8002c7c:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <enq_lock+0x44>)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ef      	bne.n	8002c70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20001148 	.word	0x20001148

08002cac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e02e      	b.n	8002d1a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8002cbc:	4958      	ldr	r1, [pc, #352]	@ (8002e20 <inc_lock+0x174>)
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d11d      	bne.n	8002d14 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8002cd8:	4951      	ldr	r1, [pc, #324]	@ (8002e20 <inc_lock+0x174>)
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10e      	bne.n	8002d14 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8002cf6:	494a      	ldr	r1, [pc, #296]	@ (8002e20 <inc_lock+0x174>)
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3308      	adds	r3, #8
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d0e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d006      	beq.n	8002d22 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d9cd      	bls.n	8002cbc <inc_lock+0x10>
 8002d20:	e000      	b.n	8002d24 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8002d22:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d148      	bne.n	8002dbc <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e002      	b.n	8002d36 <inc_lock+0x8a>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d809      	bhi.n	8002d50 <inc_lock+0xa4>
 8002d3c:	4938      	ldr	r1, [pc, #224]	@ (8002e20 <inc_lock+0x174>)
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ef      	bne.n	8002d30 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d101      	bne.n	8002d5a <inc_lock+0xae>
 8002d56:	2300      	movs	r3, #0
 8002d58:	e05d      	b.n	8002e16 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	482f      	ldr	r0, [pc, #188]	@ (8002e20 <inc_lock+0x174>)
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4403      	add	r3, r0
 8002d70:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	4829      	ldr	r0, [pc, #164]	@ (8002e20 <inc_lock+0x174>)
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3304      	adds	r3, #4
 8002d8a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d92:	88d8      	ldrh	r0, [r3, #6]
 8002d94:	4922      	ldr	r1, [pc, #136]	@ (8002e20 <inc_lock+0x174>)
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3308      	adds	r3, #8
 8002da4:	4602      	mov	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002da8:	491d      	ldr	r1, [pc, #116]	@ (8002e20 <inc_lock+0x174>)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	330a      	adds	r3, #10
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <inc_lock+0x130>
 8002dc2:	4917      	ldr	r1, [pc, #92]	@ (8002e20 <inc_lock+0x174>)
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	330a      	adds	r3, #10
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <inc_lock+0x130>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e01c      	b.n	8002e16 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <inc_lock+0x14e>
 8002de2:	490f      	ldr	r1, [pc, #60]	@ (8002e20 <inc_lock+0x174>)
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	330a      	adds	r3, #10
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b299      	uxth	r1, r3
 8002df8:	e001      	b.n	8002dfe <inc_lock+0x152>
 8002dfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dfe:	4808      	ldr	r0, [pc, #32]	@ (8002e20 <inc_lock+0x174>)
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4403      	add	r3, r0
 8002e0c:	330a      	adds	r3, #10
 8002e0e:	460a      	mov	r2, r1
 8002e10:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20001148 	.word	0x20001148

08002e24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d82e      	bhi.n	8002e96 <dec_lock+0x72>
		n = Files[i].ctr;
 8002e38:	491b      	ldr	r1, [pc, #108]	@ (8002ea8 <dec_lock+0x84>)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	330a      	adds	r3, #10
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e52:	d101      	bne.n	8002e58 <dec_lock+0x34>
 8002e54:	2300      	movs	r3, #0
 8002e56:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <dec_lock+0x40>
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002e64:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <dec_lock+0x84>)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	330a      	adds	r3, #10
 8002e74:	89fa      	ldrh	r2, [r7, #14]
 8002e76:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d108      	bne.n	8002e90 <dec_lock+0x6c>
 8002e7e:	490a      	ldr	r1, [pc, #40]	@ (8002ea8 <dec_lock+0x84>)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	737b      	strb	r3, [r7, #13]
 8002e94:	e001      	b.n	8002e9a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002e96:	2302      	movs	r3, #2
 8002e98:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20001148 	.word	0x20001148

08002eac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e016      	b.n	8002ee8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002eba:	4910      	ldr	r1, [pc, #64]	@ (8002efc <clear_lock+0x50>)
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d108      	bne.n	8002ee2 <clear_lock+0x36>
 8002ed0:	490a      	ldr	r1, [pc, #40]	@ (8002efc <clear_lock+0x50>)
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d9e5      	bls.n	8002eba <clear_lock+0xe>
	}
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20001148 	.word	0x20001148

08002f00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f12:	791b      	ldrb	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d040      	beq.n	8002f9a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f28:	7858      	ldrb	r0, [r3, #1]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	f7ff fd72 	bl	8002a18 <disk_write>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <sync_window+0x40>
			res = FR_DISK_ERR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e02c      	b.n	8002f9a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f46:	2200      	movs	r2, #0
 8002f48:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d21b      	bcs.n	8002f9a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f68:	78db      	ldrb	r3, [r3, #3]
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e012      	b.n	8002f94 <sync_window+0x94>
					wsect += fs->fsize;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4413      	add	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f82:	7858      	ldrb	r0, [r3, #1]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	2301      	movs	r3, #1
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	f7ff fd45 	bl	8002a18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d8e9      	bhi.n	8002f6e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d01e      	beq.n	8002ffe <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff9d 	bl	8002f00 <sync_window>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd6:	7858      	ldrb	r0, [r3, #1]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	f7ff fcfb 	bl	80029d8 <disk_read>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff75 	bl	8002f00 <sync_window>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 80ad 	bne.w	800317c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b03      	cmp	r3, #3
 800302c:	f040 8098 	bne.w	8003160 <sync_fs+0x158>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003036:	795b      	ldrb	r3, [r3, #5]
 8003038:	2b01      	cmp	r3, #1
 800303a:	f040 8091 	bne.w	8003160 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003046:	895b      	ldrh	r3, [r3, #10]
 8003048:	461a      	mov	r2, r3
 800304a:	2100      	movs	r1, #0
 800304c:	f7ff fd40 	bl	8002ad0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2255      	movs	r2, #85	@ 0x55
 8003054:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	22aa      	movs	r2, #170	@ 0xaa
 800305c:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2252      	movs	r2, #82	@ 0x52
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2252      	movs	r2, #82	@ 0x52
 800306a:	705a      	strb	r2, [r3, #1]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2261      	movs	r2, #97	@ 0x61
 8003070:	709a      	strb	r2, [r3, #2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2241      	movs	r2, #65	@ 0x41
 8003076:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2272      	movs	r2, #114	@ 0x72
 800307c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2272      	movs	r2, #114	@ 0x72
 8003084:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2241      	movs	r2, #65	@ 0x41
 800308c:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2261      	movs	r2, #97	@ 0x61
 8003094:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	b29b      	uxth	r3, r3
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	b2da      	uxtb	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	0e1b      	lsrs	r3, r3, #24
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800313c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003144:	7858      	ldrb	r0, [r3, #1]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003150:	2301      	movs	r3, #1
 8003152:	f7ff fc61 	bl	8002a18 <disk_write>
			fs->fsi_flag = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800315c:	2200      	movs	r2, #0
 800315e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc73 	bl	8002a58 <disk_ioctl>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3b02      	subs	r3, #2
 8003194:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	3b02      	subs	r3, #2
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d301      	bcc.n	80031aa <clust2sect+0x24>
 80031a6:	2300      	movs	r3, #0
 80031a8:	e00c      	b.n	80031c4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b0:	789b      	ldrb	r3, [r3, #2]
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	fb03 f202 	mul.w	r2, r3, r2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	4413      	add	r3, r2
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d906      	bls.n	80031ec <get_fat+0x1e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <get_fat+0x24>
		val = 1;	/* Internal error */
 80031ec:	2301      	movs	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e0e3      	b.n	80033ba <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b03      	cmp	r3, #3
 8003202:	f000 8097 	beq.w	8003334 <get_fat+0x166>
 8003206:	2b03      	cmp	r3, #3
 8003208:	f300 80cd 	bgt.w	80033a6 <get_fat+0x1d8>
 800320c:	2b01      	cmp	r3, #1
 800320e:	d002      	beq.n	8003216 <get_fat+0x48>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d05e      	beq.n	80032d2 <get_fat+0x104>
 8003214:	e0c7      	b.n	80033a6 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003232:	895b      	ldrh	r3, [r3, #10]
 8003234:	4619      	mov	r1, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	fbb3 f3f1 	udiv	r3, r3, r1
 800323c:	4413      	add	r3, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff feaf 	bl	8002fa4 <move_window>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 80af 	bne.w	80033ac <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	60fa      	str	r2, [r7, #12]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800325a:	8952      	ldrh	r2, [r2, #10]
 800325c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003260:	fb01 f202 	mul.w	r2, r1, r2
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800327a:	895b      	ldrh	r3, [r3, #10]
 800327c:	4619      	mov	r1, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	fbb3 f3f1 	udiv	r3, r3, r1
 8003284:	4413      	add	r3, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fe8b 	bl	8002fa4 <move_window>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 808d 	bne.w	80033b0 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329c:	895b      	ldrh	r3, [r3, #10]
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80032a6:	fb01 f202 	mul.w	r2, r1, r2
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <get_fat+0xfa>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	e002      	b.n	80032ce <get_fat+0x100>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ce:	617b      	str	r3, [r7, #20]
			break;
 80032d0:	e073      	b.n	80033ba <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e0:	895b      	ldrh	r3, [r3, #10]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ee:	4413      	add	r3, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fe56 	bl	8002fa4 <move_window>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d15a      	bne.n	80033b4 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003308:	8952      	ldrh	r2, [r2, #10]
 800330a:	fbb3 f1f2 	udiv	r1, r3, r2
 800330e:	fb01 f202 	mul.w	r2, r1, r2
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b21a      	sxth	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b21b      	sxth	r3, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	b21b      	sxth	r3, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	617b      	str	r3, [r7, #20]
			break;
 8003332:	e042      	b.n	80033ba <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003342:	895b      	ldrh	r3, [r3, #10]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	b29b      	uxth	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003350:	4413      	add	r3, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fe25 	bl	8002fa4 <move_window>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d12b      	bne.n	80033b8 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800336a:	8952      	ldrh	r2, [r2, #10]
 800336c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003370:	fb01 f202 	mul.w	r2, r1, r2
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3303      	adds	r3, #3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	061a      	lsls	r2, r3, #24
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	3302      	adds	r3, #2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3301      	adds	r3, #1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	4313      	orrs	r3, r2
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80033a2:	617b      	str	r3, [r7, #20]
			break;
 80033a4:	e009      	b.n	80033ba <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 80033a6:	2301      	movs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e006      	b.n	80033ba <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033ac:	bf00      	nop
 80033ae:	e004      	b.n	80033ba <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033b0:	bf00      	nop
 80033b2:	e002      	b.n	80033ba <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80033b8:	bf00      	nop
		}
	}

	return val;
 80033ba:	697b      	ldr	r3, [r7, #20]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d906      	bls.n	80033e4 <put_fat+0x20>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <put_fat+0x26>
		res = FR_INT_ERR;
 80033e4:	2302      	movs	r3, #2
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e13a      	b.n	8003660 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	f000 80d0 	beq.w	8003598 <put_fat+0x1d4>
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	f300 8127 	bgt.w	800364c <put_fat+0x288>
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d003      	beq.n	800340a <put_fat+0x46>
 8003402:	2b02      	cmp	r3, #2
 8003404:	f000 808f 	beq.w	8003526 <put_fat+0x162>
 8003408:	e120      	b.n	800364c <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003426:	895b      	ldrh	r3, [r3, #10]
 8003428:	4619      	mov	r1, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003430:	4413      	add	r3, r2
 8003432:	4619      	mov	r1, r3
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff fdb5 	bl	8002fa4 <move_window>
 800343a:	4603      	mov	r3, r0
 800343c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 8106 	bne.w	8003652 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	617a      	str	r2, [r7, #20]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003452:	8952      	ldrh	r2, [r2, #10]
 8003454:	fbb3 f1f2 	udiv	r1, r3, r2
 8003458:	fb01 f202 	mul.w	r2, r1, r2
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <put_fat+0xc6>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b25b      	sxtb	r3, r3
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b25a      	sxtb	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	b25b      	sxtb	r3, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	b25b      	sxtb	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e001      	b.n	800348e <put_fat+0xca>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003498:	2201      	movs	r2, #1
 800349a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034aa:	895b      	ldrh	r3, [r3, #10]
 80034ac:	4619      	mov	r1, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034b4:	4413      	add	r3, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fd73 	bl	8002fa4 <move_window>
 80034be:	4603      	mov	r3, r0
 80034c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 80c6 	bne.w	8003656 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d0:	895b      	ldrh	r3, [r3, #10]
 80034d2:	461a      	mov	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80034da:	fb01 f202 	mul.w	r2, r1, r2
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <put_fat+0x134>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e00e      	b.n	8003516 <put_fat+0x152>
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	f023 030f 	bic.w	r3, r3, #15
 8003502:	b25a      	sxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b25b      	sxtb	r3, r3
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	b25b      	sxtb	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003520:	2201      	movs	r2, #1
 8003522:	711a      	strb	r2, [r3, #4]
			break;
 8003524:	e09c      	b.n	8003660 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003534:	895b      	ldrh	r3, [r3, #10]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003542:	4413      	add	r3, r2
 8003544:	4619      	mov	r1, r3
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff fd2c 	bl	8002fa4 <move_window>
 800354c:	4603      	mov	r3, r0
 800354e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 8081 	bne.w	800365a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003562:	8952      	ldrh	r2, [r2, #10]
 8003564:	fbb3 f1f2 	udiv	r1, r3, r2
 8003568:	fb01 f202 	mul.w	r2, r1, r2
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	b29b      	uxth	r3, r3
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	b29a      	uxth	r2, r3
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	3301      	adds	r3, #1
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003592:	2201      	movs	r2, #1
 8003594:	711a      	strb	r2, [r3, #4]
			break;
 8003596:	e063      	b.n	8003660 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a6:	895b      	ldrh	r3, [r3, #10]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80035b4:	4413      	add	r3, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fcf3 	bl	8002fa4 <move_window>
 80035be:	4603      	mov	r3, r0
 80035c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d14a      	bne.n	800365e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035d2:	8952      	ldrh	r2, [r2, #10]
 80035d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d8:	fb01 f202 	mul.w	r2, r1, r2
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	3303      	adds	r3, #3
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	061a      	lsls	r2, r3, #24
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	3302      	adds	r3, #2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	431a      	orrs	r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3301      	adds	r3, #1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4313      	orrs	r3, r2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	b29b      	uxth	r3, r3
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b29a      	uxth	r2, r3
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	3301      	adds	r3, #1
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0c1a      	lsrs	r2, r3, #16
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3302      	adds	r3, #2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0e1a      	lsrs	r2, r3, #24
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	3303      	adds	r3, #3
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003646:	2201      	movs	r2, #1
 8003648:	711a      	strb	r2, [r3, #4]
			break;
 800364a:	e009      	b.n	8003660 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800364c:	2302      	movs	r3, #2
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e006      	b.n	8003660 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003652:	bf00      	nop
 8003654:	e004      	b.n	8003660 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <put_fat+0x29c>
			if (res != FR_OK) break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <put_fat+0x29c>
			if (res != FR_OK) break;
 800365e:	bf00      	nop
		}
	}

	return res;
 8003660:	7ffb      	ldrb	r3, [r7, #31]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d906      	bls.n	8003688 <remove_chain+0x1e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <remove_chain+0x24>
		res = FR_INT_ERR;
 8003688:	2302      	movs	r3, #2
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e049      	b.n	8003722 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003692:	e03b      	b.n	800370c <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fd99 	bl	80031ce <get_fat>
 800369c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d03b      	beq.n	800371c <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <remove_chain+0x46>
 80036aa:	2302      	movs	r3, #2
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e038      	b.n	8003722 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d102      	bne.n	80036be <remove_chain+0x54>
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e031      	b.n	8003722 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80036be:	2200      	movs	r2, #0
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fe7e 	bl	80033c4 <put_fat>
 80036c8:	4603      	mov	r3, r0
 80036ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d126      	bne.n	8003720 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d013      	beq.n	8003708 <remove_chain+0x9e>
				fs->free_clust++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	3301      	adds	r3, #1
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036f0:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f8:	795b      	ldrb	r3, [r3, #5]
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003706:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d3bc      	bcc.n	8003694 <remove_chain+0x2a>
 800371a:	e002      	b.n	8003722 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8003720:	bf00      	nop
		}
	}

	return res;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <create_chain+0x2e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	429a      	cmp	r2, r3
 8003758:	d31d      	bcc.n	8003796 <create_chain+0x6a>
 800375a:	2301      	movs	r3, #1
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e01a      	b.n	8003796 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fd33 	bl	80031ce <get_fat>
 8003768:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d801      	bhi.n	8003774 <create_chain+0x48>
 8003770:	2301      	movs	r3, #1
 8003772:	e07f      	b.n	8003874 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d101      	bne.n	8003780 <create_chain+0x54>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	e079      	b.n	8003874 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d201      	bcs.n	8003792 <create_chain+0x66>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	e070      	b.n	8003874 <create_chain+0x148>
		scl = clst;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d307      	bcc.n	80037be <create_chain+0x92>
			ncl = 2;
 80037ae:	2302      	movs	r3, #2
 80037b0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d901      	bls.n	80037be <create_chain+0x92>
 80037ba:	2300      	movs	r3, #0
 80037bc:	e05a      	b.n	8003874 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fd04 	bl	80031ce <get_fat>
 80037c6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00e      	beq.n	80037ec <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d002      	beq.n	80037dc <create_chain+0xb0>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <create_chain+0xb4>
			return cs;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	e049      	b.n	8003874 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1d8      	bne.n	800379a <create_chain+0x6e>
 80037e8:	2300      	movs	r3, #0
 80037ea:	e043      	b.n	8003874 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80037ec:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80037ee:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fde5 	bl	80033c4 <put_fat>
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <create_chain+0xec>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fdd8 	bl	80033c4 <put_fat>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d121      	bne.n	8003862 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003824:	461a      	mov	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d01c      	beq.n	8003872 <create_chain+0x146>
			fs->free_clust--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	3b01      	subs	r3, #1
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003848:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003850:	795b      	ldrb	r3, [r3, #5]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800385e:	715a      	strb	r2, [r3, #5]
 8003860:	e007      	b.n	8003872 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <create_chain+0x142>
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	e000      	b.n	8003870 <create_chain+0x144>
 800386e:	2301      	movs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003872:	697b      	ldr	r3, [r7, #20]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	3304      	adds	r3, #4
 8003890:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389e:	895b      	ldrh	r3, [r3, #10]
 80038a0:	461a      	mov	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038b4:	7892      	ldrb	r2, [r2, #2]
 80038b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	613a      	str	r2, [r7, #16]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <clmt_clust+0x54>
 80038cc:	2300      	movs	r3, #0
 80038ce:	e010      	b.n	80038f2 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d307      	bcc.n	80038e8 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3304      	adds	r3, #4
 80038e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80038e6:	e7e9      	b.n	80038bc <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80038e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4413      	add	r3, r2
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003910:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d009      	beq.n	8003936 <dir_sdi+0x3a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d301      	bcc.n	800393a <dir_sdi+0x3e>
		return FR_INT_ERR;
 8003936:	2302      	movs	r3, #2
 8003938:	e0aa      	b.n	8003a90 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d110      	bne.n	8003962 <dir_sdi+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d107      	bne.n	8003962 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003974:	891b      	ldrh	r3, [r3, #8]
 8003976:	461a      	mov	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4293      	cmp	r3, r2
 800397c:	d301      	bcc.n	8003982 <dir_sdi+0x86>
			return FR_INT_ERR;
 800397e:	2302      	movs	r3, #2
 8003980:	e086      	b.n	8003a90 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e043      	b.n	8003a1c <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a0:	895b      	ldrh	r3, [r3, #10]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80039bc:	e021      	b.n	8003a02 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fc00 	bl	80031ce <get_fat>
 80039ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d101      	bne.n	80039dc <dir_sdi+0xe0>
 80039d8:	2301      	movs	r3, #1
 80039da:	e059      	b.n	8003a90 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d909      	bls.n	80039f6 <dir_sdi+0xfa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d301      	bcc.n	80039fa <dir_sdi+0xfe>
				return FR_INT_ERR;
 80039f6:	2302      	movs	r3, #2
 80039f8:	e04a      	b.n	8003a90 <dir_sdi+0x194>
			idx -= ic;
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d2d9      	bcs.n	80039be <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fbb6 	bl	8003186 <clust2sect>
 8003a1a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a22:	461a      	mov	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <dir_sdi+0x136>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e02e      	b.n	8003a90 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a56:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6e:	895b      	ldrh	r3, [r3, #10]
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a7c:	fb01 f202 	mul.w	r2, r1, r2
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	4403      	add	r3, r0
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a8c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aa8:	88db      	ldrh	r3, [r3, #6]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <dir_next+0x2a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <dir_next+0x2e>
		return FR_NO_FILE;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e12e      	b.n	8003d24 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ad2:	895b      	ldrh	r3, [r3, #10]
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ae0:	fb01 f202 	mul.w	r2, r1, r2
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80fa 	bne.w	8003ce0 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003afc:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b16:	891b      	ldrh	r3, [r3, #8]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	f0c0 80df 	bcc.w	8003ce0 <dir_next+0x248>
				return FR_NO_FILE;
 8003b22:	2304      	movs	r3, #4
 8003b24:	e0fe      	b.n	8003d24 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b32:	895b      	ldrh	r3, [r3, #10]
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b4c:	7892      	ldrb	r2, [r2, #2]
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 80c4 	bne.w	8003ce0 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f7ff fb2f 	bl	80031ce <get_fat>
 8003b70:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d801      	bhi.n	8003b7c <dir_next+0xe4>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0d3      	b.n	8003d24 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d101      	bne.n	8003b88 <dir_next+0xf0>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0cd      	b.n	8003d24 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f0c0 808e 	bcc.w	8003cba <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <dir_next+0x110>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e0bd      	b.n	8003d24 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7ff fdb6 	bl	800372c <create_chain>
 8003bc0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <dir_next+0x134>
 8003bc8:	2307      	movs	r3, #7
 8003bca:	e0ab      	b.n	8003d24 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <dir_next+0x13e>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0a6      	b.n	8003d24 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d101      	bne.n	8003be2 <dir_next+0x14a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0a0      	b.n	8003d24 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f988 	bl	8002f00 <sync_window>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <dir_next+0x162>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e094      	b.n	8003d24 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c10:	895b      	ldrh	r3, [r3, #10]
 8003c12:	461a      	mov	r2, r3
 8003c14:	2100      	movs	r1, #0
 8003c16:	f7fe ff5b 	bl	8002ad0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff faaa 	bl	8003186 <clust2sect>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8003c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e021      	b.n	8003c84 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff f951 	bl	8002f00 <sync_window>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <dir_next+0x1d0>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e05d      	b.n	8003d24 <dir_next+0x28c>
						dp->fs->winsect++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8003c74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c76:	3201      	adds	r2, #1
 8003c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3301      	adds	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c90:	789b      	ldrb	r3, [r3, #2]
 8003c92:	461a      	mov	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d3d2      	bcc.n	8003c40 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1acb      	subs	r3, r1, r3
 8003cb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa58 	bl	8003186 <clust2sect>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cde:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cea:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d02:	895b      	ldrh	r3, [r3, #10]
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d10:	fb01 f202 	mul.w	r2, r1, r2
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	015b      	lsls	r3, r3, #5
 8003d18:	4403      	add	r3, r0
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d20:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003d36:	2100      	movs	r1, #0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fddf 	bl	80038fc <dir_sdi>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d135      	bne.n	8003db4 <dir_alloc+0x88>
		n = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7ff f920 	bl	8002fa4 <move_window>
 8003d64:	4603      	mov	r3, r0
 8003d66:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d121      	bne.n	8003db2 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2be5      	cmp	r3, #229	@ 0xe5
 8003d7a:	d006      	beq.n	8003d8a <dir_alloc+0x5e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d102      	bne.n	8003d9e <dir_alloc+0x72>
 8003d98:	e00c      	b.n	8003db4 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003d9e:	2101      	movs	r1, #1
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fe79 	bl	8003a98 <dir_next>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0cd      	beq.n	8003d4c <dir_alloc+0x20>
 8003db0:	e000      	b.n	8003db4 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8003db2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d101      	bne.n	8003dbe <dir_alloc+0x92>
 8003dba:	2307      	movs	r3, #7
 8003dbc:	73fb      	strb	r3, [r7, #15]
	return res;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	331b      	adds	r3, #27
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	b21a      	sxth	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	331a      	adds	r3, #26
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b21b      	sxth	r3, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b21b      	sxth	r3, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d10f      	bne.n	8003e18 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	3315      	adds	r3, #21
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b21a      	sxth	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

	return cl;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	331a      	adds	r3, #26
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	331b      	adds	r3, #27
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	0c1a      	lsrs	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3315      	adds	r3, #21
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e82:	1e5a      	subs	r2, r3, #1
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	2301      	movs	r3, #1
 8003e96:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003e98:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <cmp_lfn+0xd8>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	b21a      	sxth	r2, r3
 8003eac:	4926      	ldr	r1, [pc, #152]	@ (8003f48 <cmp_lfn+0xd8>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	440b      	add	r3, r1
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	440b      	add	r3, r1
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d019      	beq.n	8003efe <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003eca:	89bb      	ldrh	r3, [r7, #12]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fc2f 	bl	8006730 <ff_wtoupper>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2bfe      	cmp	r3, #254	@ 0xfe
 8003eda:	d80e      	bhi.n	8003efa <cmp_lfn+0x8a>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	617a      	str	r2, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fc20 	bl	8006730 <ff_wtoupper>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d008      	beq.n	8003f0c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8003efa:	2300      	movs	r3, #0
 8003efc:	e01f      	b.n	8003f3e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003efe:	89bb      	ldrh	r3, [r7, #12]
 8003f00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d001      	beq.n	8003f0c <cmp_lfn+0x9c>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e018      	b.n	8003f3e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d9bf      	bls.n	8003e98 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <cmp_lfn+0xcc>
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <cmp_lfn+0xcc>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <cmp_lfn+0xcc>
		return 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8003f3c:	2301      	movs	r3, #1
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	08007a10 	.word	0x08007a10

08003f4c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	@ 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	330d      	adds	r3, #13
 8003f66:	79ba      	ldrb	r2, [r7, #6]
 8003f68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	330b      	adds	r3, #11
 8003f6e:	220f      	movs	r2, #15
 8003f70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	330c      	adds	r3, #12
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	331a      	adds	r3, #26
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	331b      	adds	r3, #27
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	82fb      	strh	r3, [r7, #22]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003fa2:	8afb      	ldrh	r3, [r7, #22]
 8003fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <fit_lfn+0x70>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	61fa      	str	r2, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004030 <fit_lfn+0xe4>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	8afa      	ldrh	r2, [r7, #22]
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	8afb      	ldrh	r3, [r7, #22]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b299      	uxth	r1, r3
 8003fd6:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <fit_lfn+0xe4>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b2ca      	uxtb	r2, r1
 8003fe6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003fe8:	8afb      	ldrh	r3, [r7, #22]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <fit_lfn+0xa8>
 8003fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ff2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d9d0      	bls.n	8003fa2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004000:	8afb      	ldrh	r3, [r7, #22]
 8004002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004006:	4293      	cmp	r3, r2
 8004008:	d006      	beq.n	8004018 <fit_lfn+0xcc>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <fit_lfn+0xd4>
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	79fa      	ldrb	r2, [r7, #7]
 8004024:	701a      	strb	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3724      	adds	r7, #36	@ 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	08007a10 	.word	0x08007a10

08004034 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	@ 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004042:	220b      	movs	r2, #11
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7fe fd24 	bl	8002a94 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d92b      	bls.n	80040aa <gen_numname+0x76>
		sr = seq;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004056:	e022      	b.n	800409e <gen_numname+0x6a>
			wc = *lfn++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004062:	2300      	movs	r3, #0
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004066:	e017      	b.n	8004098 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005a      	lsls	r2, r3, #1
 800406c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004076:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <gen_numname+0x5e>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800408c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004090:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	3301      	adds	r3, #1
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d9e4      	bls.n	8004068 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d8      	bne.n	8004058 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80040aa:	2307      	movs	r3, #7
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3330      	adds	r3, #48	@ 0x30
 80040ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80040be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040c2:	2b39      	cmp	r3, #57	@ 0x39
 80040c4:	d904      	bls.n	80040d0 <gen_numname+0x9c>
 80040c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040ca:	3307      	adds	r3, #7
 80040cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80040d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040d6:	3330      	adds	r3, #48	@ 0x30
 80040d8:	443b      	add	r3, r7
 80040da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80040de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1df      	bne.n	80040ae <gen_numname+0x7a>
	ns[i] = '~';
 80040ee:	f107 0214 	add.w	r2, r7, #20
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	4413      	add	r3, r2
 80040f6:	227e      	movs	r2, #126	@ 0x7e
 80040f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fe:	e002      	b.n	8004106 <gen_numname+0xd2>
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	3301      	adds	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
 8004106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	429a      	cmp	r2, r3
 800410c:	d205      	bcs.n	800411a <gen_numname+0xe6>
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	4413      	add	r3, r2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b20      	cmp	r3, #32
 8004118:	d1f2      	bne.n	8004100 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2b07      	cmp	r3, #7
 800411e:	d807      	bhi.n	8004130 <gen_numname+0xfc>
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004126:	3330      	adds	r3, #48	@ 0x30
 8004128:	443b      	add	r3, r7
 800412a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800412e:	e000      	b.n	8004132 <gen_numname+0xfe>
 8004130:	2120      	movs	r1, #32
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	627a      	str	r2, [r7, #36]	@ 0x24
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	460a      	mov	r2, r1
 800413e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	2b07      	cmp	r3, #7
 8004144:	d9e9      	bls.n	800411a <gen_numname+0xe6>
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	3730      	adds	r7, #48	@ 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800415c:	230b      	movs	r3, #11
 800415e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	0852      	lsrs	r2, r2, #1
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4313      	orrs	r3, r2
 800416a:	b2da      	uxtb	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1c59      	adds	r1, r3, #1
 8004170:	6079      	str	r1, [r7, #4]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4413      	add	r3, r2
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3b01      	subs	r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ed      	bne.n	8004160 <sum_sfn+0x10>
	return sum;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004198:	2100      	movs	r1, #0
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fbae 	bl	80038fc <dir_sdi>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <dir_find+0x1e>
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	e0b8      	b.n	8004320 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80041ae:	23ff      	movs	r3, #255	@ 0xff
 80041b0:	753b      	strb	r3, [r7, #20]
 80041b2:	7d3b      	ldrb	r3, [r7, #20]
 80041b4:	757b      	strb	r3, [r7, #21]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041c0:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe fee5 	bl	8002fa4 <move_window>
 80041da:	4603      	mov	r3, r0
 80041dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 8097 	bne.w	8004314 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <dir_find+0x72>
 80041fc:	2304      	movs	r3, #4
 80041fe:	75fb      	strb	r3, [r7, #23]
 8004200:	e08d      	b.n	800431e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	330b      	adds	r3, #11
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800420e:	7dbb      	ldrb	r3, [r7, #22]
 8004210:	2be5      	cmp	r3, #229	@ 0xe5
 8004212:	d007      	beq.n	8004224 <dir_find+0x94>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <dir_find+0xa6>
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d008      	beq.n	8004236 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004224:	23ff      	movs	r3, #255	@ 0xff
 8004226:	757b      	strb	r3, [r7, #21]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004232:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004234:	e063      	b.n	80042fe <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d137      	bne.n	80042ac <dir_find+0x11c>
				if (dp->lfn) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d05a      	beq.n	80042fe <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004248:	7dbb      	ldrb	r3, [r7, #22]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	7b5b      	ldrb	r3, [r3, #13]
 8004256:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004258:	7dbb      	ldrb	r3, [r7, #22]
 800425a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425e:	75bb      	strb	r3, [r7, #22]
 8004260:	7dbb      	ldrb	r3, [r7, #22]
 8004262:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426a:	88da      	ldrh	r2, [r3, #6]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004272:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004274:	7dba      	ldrb	r2, [r7, #22]
 8004276:	7d7b      	ldrb	r3, [r7, #21]
 8004278:	429a      	cmp	r2, r3
 800427a:	d114      	bne.n	80042a6 <dir_find+0x116>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	330d      	adds	r3, #13
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	7d3a      	ldrb	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d10e      	bne.n	80042a6 <dir_find+0x116>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fdec 	bl	8003e70 <cmp_lfn>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <dir_find+0x116>
 800429e:	7d7b      	ldrb	r3, [r7, #21]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e000      	b.n	80042a8 <dir_find+0x118>
 80042a6:	23ff      	movs	r3, #255	@ 0xff
 80042a8:	757b      	strb	r3, [r7, #21]
 80042aa:	e028      	b.n	80042fe <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80042ac:	7d7b      	ldrb	r3, [r7, #21]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <dir_find+0x132>
 80042b2:	6938      	ldr	r0, [r7, #16]
 80042b4:	f7ff ff4c 	bl	8004150 <sum_sfn>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	7d3b      	ldrb	r3, [r7, #20]
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02a      	beq.n	8004318 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	330b      	adds	r3, #11
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <dir_find+0x15e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	220b      	movs	r2, #11
 80042e0:	4619      	mov	r1, r3
 80042e2:	6938      	ldr	r0, [r7, #16]
 80042e4:	f7fe fc0e 	bl	8002b04 <mem_cmp>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80042ee:	23ff      	movs	r3, #255	@ 0xff
 80042f0:	757b      	strb	r3, [r7, #21]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042fc:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80042fe:	2100      	movs	r1, #0
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fbc9 	bl	8003a98 <dir_next>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f43f af58 	beq.w	80041c2 <dir_find+0x32>
 8004312:	e004      	b.n	800431e <dir_find+0x18e>
		if (res != FR_OK) break;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800431c:	bf00      	nop

	return res;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	@ 0x30
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	623b      	str	r3, [r7, #32]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	220c      	movs	r2, #12
 800434a:	6a39      	ldr	r1, [r7, #32]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fba1 	bl	8002a94 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d03b      	beq.n	80043d4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	330b      	adds	r3, #11
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004370:	2301      	movs	r3, #1
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004374:	e013      	b.n	800439e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004376:	f107 010c 	add.w	r1, r7, #12
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	6a38      	ldr	r0, [r7, #32]
 8004380:	f7ff fe58 	bl	8004034 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff03 	bl	8004190 <dir_find>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	3301      	adds	r3, #1
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2b63      	cmp	r3, #99	@ 0x63
 80043a2:	d9e8      	bls.n	8004376 <dir_register+0x4e>
 80043a4:	e000      	b.n	80043a8 <dir_register+0x80>
			if (res != FR_OK) break;
 80043a6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	2b64      	cmp	r3, #100	@ 0x64
 80043ac:	d101      	bne.n	80043b2 <dir_register+0x8a>
 80043ae:	2307      	movs	r3, #7
 80043b0:	e0d8      	b.n	8004564 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80043b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d002      	beq.n	80043c0 <dir_register+0x98>
 80043ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043be:	e0d1      	b.n	8004564 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	330b      	adds	r3, #11
 80043c4:	7dfa      	ldrb	r2, [r7, #23]
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ce:	461a      	mov	r2, r3
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80043de:	2300      	movs	r3, #0
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e2:	e002      	b.n	80043ea <dir_register+0xc2>
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	3301      	adds	r3, #1
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f5      	bne.n	80043e4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	3319      	adds	r3, #25
 80043fc:	4a5b      	ldr	r2, [pc, #364]	@ (800456c <dir_register+0x244>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
 8004406:	e001      	b.n	800440c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004408:	2301      	movs	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800440c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fc8c 	bl	8003d2c <dir_alloc>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800441a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800441e:	2b00      	cmp	r3, #0
 8004420:	d15b      	bne.n	80044da <dir_register+0x1b2>
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	3b01      	subs	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d055      	beq.n	80044da <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004434:	88db      	ldrh	r3, [r3, #6]
 8004436:	461a      	mov	r2, r3
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fa5c 	bl	80038fc <dir_sdi>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800444a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800444e:	2b00      	cmp	r3, #0
 8004450:	d143      	bne.n	80044da <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe78 	bl	8004150 <sum_sfn>
 8004460:	4603      	mov	r3, r0
 8004462:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe fd94 	bl	8002fa4 <move_window>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004486:	2b00      	cmp	r3, #0
 8004488:	d126      	bne.n	80044d8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004490:	6a18      	ldr	r0, [r3, #32]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004498:	6959      	ldr	r1, [r3, #20]
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	b2da      	uxtb	r2, r3
 800449e:	7efb      	ldrb	r3, [r7, #27]
 80044a0:	f7ff fd54 	bl	8003f4c <fit_lfn>
				dp->fs->wflag = 1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b0:	2201      	movs	r2, #1
 80044b2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80044b4:	2100      	movs	r1, #0
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff faee 	bl	8003a98 <dir_next>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80044c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <dir_register+0x1b2>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	3b01      	subs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1c6      	bne.n	8004464 <dir_register+0x13c>
 80044d6:	e000      	b.n	80044da <dir_register+0x1b2>
				if (res != FR_OK) break;
 80044d8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80044da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d13e      	bne.n	8004560 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fe fd55 	bl	8002fa4 <move_window>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004504:	2b00      	cmp	r3, #0
 8004506:	d12b      	bne.n	8004560 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	2220      	movs	r2, #32
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fadb 	bl	8002ad0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004520:	6958      	ldr	r0, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	220b      	movs	r2, #11
 800452c:	4619      	mov	r1, r3
 800452e:	f7fe fab1 	bl	8002a94 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	330b      	adds	r3, #11
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	330c      	adds	r3, #12
 8004548:	f002 0218 	and.w	r2, r2, #24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455c:	2201      	movs	r2, #1
 800455e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004564:	4618      	mov	r0, r3
 8004566:	3730      	adds	r7, #48	@ 0x30
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	4ec4ec4f 	.word	0x4ec4ec4f

08004570 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e002      	b.n	8004588 <create_name+0x18>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3301      	adds	r3, #1
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b2f      	cmp	r3, #47	@ 0x2f
 800458e:	d0f8      	beq.n	8004582 <create_name+0x12>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b5c      	cmp	r3, #92	@ 0x5c
 8004596:	d0f4      	beq.n	8004582 <create_name+0x12>
	lfn = dp->lfn;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	61ba      	str	r2, [r7, #24]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80045b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ba:	2b1f      	cmp	r3, #31
 80045bc:	d92f      	bls.n	800461e <create_name+0xae>
 80045be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80045c2:	d02c      	beq.n	800461e <create_name+0xae>
 80045c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80045c8:	d029      	beq.n	800461e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80045ce:	d901      	bls.n	80045d4 <create_name+0x64>
			return FR_INVALID_NAME;
 80045d0:	2306      	movs	r3, #6
 80045d2:	e186      	b.n	80048e2 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80045d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80045da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f002 f86c 	bl	80066bc <ff_convert>
 80045e4:	4603      	mov	r3, r0
 80045e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80045e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <create_name+0x82>
 80045ee:	2306      	movs	r3, #6
 80045f0:	e177      	b.n	80048e2 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80045f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80045f6:	d809      	bhi.n	800460c <create_name+0x9c>
 80045f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045fa:	4619      	mov	r1, r3
 80045fc:	488e      	ldr	r0, [pc, #568]	@ (8004838 <create_name+0x2c8>)
 80045fe:	f7fe faa7 	bl	8002b50 <chk_chr>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <create_name+0x9c>
			return FR_INVALID_NAME;
 8004608:	2306      	movs	r3, #6
 800460a:	e16a      	b.n	80048e2 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	617a      	str	r2, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800461a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800461c:	e7c5      	b.n	80045aa <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	441a      	add	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800462a:	2b1f      	cmp	r3, #31
 800462c:	d801      	bhi.n	8004632 <create_name+0xc2>
 800462e:	2304      	movs	r3, #4
 8004630:	e000      	b.n	8004634 <create_name+0xc4>
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004638:	e011      	b.n	800465e <create_name+0xee>
		w = lfn[di - 1];
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004640:	3b01      	subs	r3, #1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800464c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800464e:	2b20      	cmp	r3, #32
 8004650:	d002      	beq.n	8004658 <create_name+0xe8>
 8004652:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004654:	2b2e      	cmp	r3, #46	@ 0x2e
 8004656:	d106      	bne.n	8004666 <create_name+0xf6>
		di--;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3b01      	subs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ea      	bne.n	800463a <create_name+0xca>
 8004664:	e000      	b.n	8004668 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004666:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <create_name+0x102>
 800466e:	2306      	movs	r3, #6
 8004670:	e137      	b.n	80048e2 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	2200      	movs	r2, #0
 800467c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	220b      	movs	r2, #11
 8004688:	2120      	movs	r1, #32
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fa20 	bl	8002ad0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	e002      	b.n	800469c <create_name+0x12c>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3301      	adds	r3, #1
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d0f5      	beq.n	8004696 <create_name+0x126>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80046b6:	d0ee      	beq.n	8004696 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <create_name+0x162>
 80046be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c2:	f043 0303 	orr.w	r3, r3, #3
 80046c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80046ca:	e002      	b.n	80046d2 <create_name+0x162>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <create_name+0x17c>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80046de:	3b01      	subs	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ea:	d1ef      	bne.n	80046cc <create_name+0x15c>

	b = i = 0; ni = 8;
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80046f6:	2308      	movs	r3, #8
 80046f8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	61ba      	str	r2, [r7, #24]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800470a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8091 	beq.w	8004834 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004712:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004714:	2b20      	cmp	r3, #32
 8004716:	d006      	beq.n	8004726 <create_name+0x1b6>
 8004718:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800471a:	2b2e      	cmp	r3, #46	@ 0x2e
 800471c:	d10a      	bne.n	8004734 <create_name+0x1c4>
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d006      	beq.n	8004734 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8004726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800472a:	f043 0303 	orr.w	r3, r3, #3
 800472e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004732:	e07e      	b.n	8004832 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	d203      	bcs.n	8004744 <create_name+0x1d4>
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d123      	bne.n	800478c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b0b      	cmp	r3, #11
 8004748:	d106      	bne.n	8004758 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800474a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800474e:	f043 0303 	orr.w	r3, r3, #3
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004756:	e076      	b.n	8004846 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	d005      	beq.n	800476c <create_name+0x1fc>
 8004760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004764:	f043 0303 	orr.w	r3, r3, #3
 8004768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d867      	bhi.n	8004844 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	2308      	movs	r3, #8
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	230b      	movs	r3, #11
 800477e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004780:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800478a:	e052      	b.n	8004832 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800478c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800478e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004790:	d914      	bls.n	80047bc <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 ff90 	bl	80066bc <ff_convert>
 800479c:	4603      	mov	r3, r0
 800479e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80047a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <create_name+0x240>
 80047a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047a8:	3b80      	subs	r3, #128	@ 0x80
 80047aa:	4a24      	ldr	r2, [pc, #144]	@ (800483c <create_name+0x2cc>)
 80047ac:	5cd3      	ldrb	r3, [r2, r3]
 80047ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80047b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80047bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <create_name+0x262>
 80047c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	481e      	ldr	r0, [pc, #120]	@ (8004840 <create_name+0x2d0>)
 80047c8:	f7fe f9c2 	bl	8002b50 <chk_chr>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80047d2:	235f      	movs	r3, #95	@ 0x5f
 80047d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80047d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047da:	f043 0303 	orr.w	r3, r3, #3
 80047de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047e2:	e01b      	b.n	800481c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80047e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d909      	bls.n	80047fe <create_name+0x28e>
 80047ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80047ee:	d806      	bhi.n	80047fe <create_name+0x28e>
					b |= 2;
 80047f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80047fc:	e00e      	b.n	800481c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80047fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004800:	2b60      	cmp	r3, #96	@ 0x60
 8004802:	d90b      	bls.n	800481c <create_name+0x2ac>
 8004804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004806:	2b7a      	cmp	r3, #122	@ 0x7a
 8004808:	d808      	bhi.n	800481c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800480a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004818:	3b20      	subs	r3, #32
 800481a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	1c59      	adds	r1, r3, #1
 8004828:	6239      	str	r1, [r7, #32]
 800482a:	4413      	add	r3, r2
 800482c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004832:	e762      	b.n	80046fa <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8004834:	bf00      	nop
 8004836:	e006      	b.n	8004846 <create_name+0x2d6>
 8004838:	08007924 	.word	0x08007924
 800483c:	08007990 	.word	0x08007990
 8004840:	08007930 	.word	0x08007930
			if (si > di) break;			/* No extension */
 8004844:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2be5      	cmp	r3, #229	@ 0xe5
 8004852:	d105      	bne.n	8004860 <create_name+0x2f0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2205      	movs	r2, #5
 800485e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d104      	bne.n	8004870 <create_name+0x300>
 8004866:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d005      	beq.n	8004888 <create_name+0x318>
 800487c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b03      	cmp	r3, #3
 8004886:	d105      	bne.n	8004894 <create_name+0x324>
		cf |= NS_LFN;
 8004888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d117      	bne.n	80048d0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80048a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <create_name+0x348>
 80048ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048b0:	f043 0310 	orr.w	r3, r3, #16
 80048b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80048b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d105      	bne.n	80048d0 <create_name+0x360>
 80048c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	330b      	adds	r3, #11
 80048da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80048de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80048e0:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3728      	adds	r7, #40	@ 0x28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80048fc:	d003      	beq.n	8004906 <follow_path+0x1a>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b5c      	cmp	r3, #92	@ 0x5c
 8004904:	d102      	bne.n	800490c <follow_path+0x20>
		path++;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b1f      	cmp	r3, #31
 800491e:	d80c      	bhi.n	800493a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004920:	2100      	movs	r1, #0
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe ffea 	bl	80038fc <dir_sdi>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004932:	461a      	mov	r2, r3
 8004934:	2300      	movs	r3, #0
 8004936:	6153      	str	r3, [r2, #20]
 8004938:	e049      	b.n	80049ce <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800493a:	463b      	mov	r3, r7
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fe16 	bl	8004570 <create_name>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d13a      	bne.n	80049c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fc1e 	bl	8004190 <dir_find>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	7adb      	ldrb	r3, [r3, #11]
 8004962:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d12b      	bne.n	80049c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004970:	7bbb      	ldrb	r3, [r7, #14]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d126      	bne.n	80049c8 <follow_path+0xdc>
 800497a:	2305      	movs	r3, #5
 800497c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800497e:	e023      	b.n	80049c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d120      	bne.n	80049cc <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	330b      	adds	r3, #11
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80049a2:	2305      	movs	r3, #5
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	e012      	b.n	80049ce <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fa08 	bl	8003dc8 <ld_clust>
 80049b8:	4602      	mov	r2, r0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80049c2:	e7ba      	b.n	800493a <follow_path+0x4e>
			if (res != FR_OK) break;
 80049c4:	bf00      	nop
 80049c6:	e002      	b.n	80049ce <follow_path+0xe2>
				break;
 80049c8:	bf00      	nop
 80049ca:	e000      	b.n	80049ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80049cc:	bf00      	nop
		}
	}

	return res;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d031      	beq.n	8004a52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e002      	b.n	80049fc <get_ldnumber+0x24>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	3301      	adds	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b1f      	cmp	r3, #31
 8004a02:	d903      	bls.n	8004a0c <get_ldnumber+0x34>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a0a:	d1f4      	bne.n	80049f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a12:	d11c      	bne.n	8004a4e <get_ldnumber+0x76>
			tp = *path;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	3b30      	subs	r3, #48	@ 0x30
 8004a24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b09      	cmp	r3, #9
 8004a2a:	d80e      	bhi.n	8004a4a <get_ldnumber+0x72>
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d10a      	bne.n	8004a4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <get_ldnumber+0x72>
					vol = (int)i;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	3301      	adds	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	e002      	b.n	8004a54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a52:	693b      	ldr	r3, [r7, #16]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
	...

08004a60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a70:	2200      	movs	r2, #0
 8004a72:	711a      	strb	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fe fa8d 	bl	8002fa4 <move_window>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <check_fs+0x34>
		return 3;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e04a      	b.n	8004b2a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	b21a      	sxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	4a21      	ldr	r2, [pc, #132]	@ (8004b34 <check_fs+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d001      	beq.n	8004ab8 <check_fs+0x58>
		return 2;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e038      	b.n	8004b2a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3336      	adds	r3, #54	@ 0x36
 8004abc:	3303      	adds	r3, #3
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	061a      	lsls	r2, r3, #24
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3336      	adds	r3, #54	@ 0x36
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3336      	adds	r3, #54	@ 0x36
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ae6:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <check_fs+0xd8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <check_fs+0x90>
		return 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e01c      	b.n	8004b2a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3352      	adds	r3, #82	@ 0x52
 8004af4:	3303      	adds	r3, #3
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	061a      	lsls	r2, r3, #24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3352      	adds	r3, #82	@ 0x52
 8004afe:	3302      	adds	r3, #2
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3352      	adds	r3, #82	@ 0x52
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	4313      	orrs	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b1e:	4a06      	ldr	r2, [pc, #24]	@ (8004b38 <check_fs+0xd8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <check_fs+0xc8>
		return 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <check_fs+0xca>

	return 1;
 8004b28:	2301      	movs	r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	ffffaa55 	.word	0xffffaa55
 8004b38:	00544146 	.word	0x00544146

08004b3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b096      	sub	sp, #88	@ 0x58
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	f7ff ff41 	bl	80049d8 <get_ldnumber>
 8004b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da01      	bge.n	8004b62 <find_volume+0x26>
 8004b5e:	230b      	movs	r3, #11
 8004b60:	e311      	b.n	8005186 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b62:	4a98      	ldr	r2, [pc, #608]	@ (8004dc4 <find_volume+0x288>)
 8004b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <find_volume+0x3a>
 8004b72:	230c      	movs	r3, #12
 8004b74:	e307      	b.n	8005186 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b7a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01c      	beq.n	8004bc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fee1 	bl	8002958 <disk_status>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10c      	bne.n	8004bc2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <find_volume+0x82>
 8004bae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004bba:	230a      	movs	r3, #10
 8004bbc:	e2e3      	b.n	8005186 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e2e1      	b.n	8005186 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fed3 	bl	800298c <disk_initialize>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004bec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e2c4      	b.n	8005186 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <find_volume+0xd6>
 8004c02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e2b9      	b.n	8005186 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c18:	7858      	ldrb	r0, [r3, #1]
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c20:	330a      	adds	r3, #10
 8004c22:	461a      	mov	r2, r3
 8004c24:	2102      	movs	r1, #2
 8004c26:	f7fd ff17 	bl	8002a58 <disk_ioctl>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10d      	bne.n	8004c4c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c36:	895b      	ldrh	r3, [r3, #10]
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c3c:	d306      	bcc.n	8004c4c <find_volume+0x110>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c44:	895b      	ldrh	r3, [r3, #10]
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	d901      	bls.n	8004c50 <find_volume+0x114>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e29a      	b.n	8005186 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004c54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c58:	f7ff ff02 	bl	8004a60 <check_fs>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004c62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d153      	bne.n	8004d12 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c6e:	e028      	b.n	8004cc2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004c7a:	4413      	add	r3, r2
 8004c7c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	3304      	adds	r3, #4
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <find_volume+0x172>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	330b      	adds	r3, #11
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	061a      	lsls	r2, r3, #24
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	330a      	adds	r3, #10
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	3309      	adds	r3, #9
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	e000      	b.n	8004cb0 <find_volume+0x174>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3358      	adds	r3, #88	@ 0x58
 8004cb6:	443b      	add	r3, r7
 8004cb8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d9d3      	bls.n	8004c70 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004cc8:	2300      	movs	r3, #0
 8004cca:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <find_volume+0x19c>
 8004cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	3358      	adds	r3, #88	@ 0x58
 8004cde:	443b      	add	r3, r7
 8004ce0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ce4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <find_volume+0x1bc>
 8004cec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cf0:	f7ff feb6 	bl	8004a60 <check_fs>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	e000      	b.n	8004cfa <find_volume+0x1be>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <find_volume+0x1d6>
 8004d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d08:	3301      	adds	r3, #1
 8004d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d9e2      	bls.n	8004cd8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d101      	bne.n	8004d1e <find_volume+0x1e2>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e233      	b.n	8005186 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <find_volume+0x1ee>
 8004d26:	230d      	movs	r3, #13
 8004d28:	e22d      	b.n	8005186 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	7b1b      	ldrb	r3, [r3, #12]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	b21a      	sxth	r2, r3
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	7adb      	ldrb	r3, [r3, #11]
 8004d36:	b21b      	sxth	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b21a      	sxth	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d42:	895b      	ldrh	r3, [r3, #10]
 8004d44:	b21b      	sxth	r3, r3
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8004d4a:	230d      	movs	r3, #13
 8004d4c:	e21b      	b.n	8005186 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	7ddb      	ldrb	r3, [r3, #23]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	b21a      	sxth	r2, r3
 8004d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d58:	7d9b      	ldrb	r3, [r3, #22]
 8004d5a:	b21b      	sxth	r3, r3
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	b21b      	sxth	r3, r3
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d112      	bne.n	8004d90 <find_volume+0x254>
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8004d70:	061a      	lsls	r2, r3, #24
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	4313      	orrs	r3, r2
 8004d86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d88:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8004d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d96:	461a      	mov	r2, r3
 8004d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	7c1a      	ldrb	r2, [r3, #16]
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dae:	78db      	ldrb	r3, [r3, #3]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d009      	beq.n	8004dc8 <find_volume+0x28c>
 8004db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d003      	beq.n	8004dc8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8004dc0:	230d      	movs	r3, #13
 8004dc2:	e1e0      	b.n	8005186 <find_volume+0x64a>
 8004dc4:	20001140 	.word	0x20001140
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dce:	78db      	ldrb	r3, [r3, #3]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd4:	fb02 f303 	mul.w	r3, r2, r3
 8004dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	7b5a      	ldrb	r2, [r3, #13]
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dec:	789b      	ldrb	r3, [r3, #2]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <find_volume+0x2d0>
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004df8:	789b      	ldrb	r3, [r3, #2]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e02:	789b      	ldrb	r3, [r3, #2]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8004e0c:	230d      	movs	r3, #13
 8004e0e:	e1ba      	b.n	8005186 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e12:	7c9b      	ldrb	r3, [r3, #18]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	7c5b      	ldrb	r3, [r3, #17]
 8004e1c:	b21b      	sxth	r3, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b21b      	sxth	r3, r3
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e2a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e32:	891b      	ldrh	r3, [r3, #8]
 8004e34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e3a:	8952      	ldrh	r2, [r2, #10]
 8004e3c:	0952      	lsrs	r2, r2, #5
 8004e3e:	b292      	uxth	r2, r2
 8004e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e44:	fb01 f202 	mul.w	r2, r1, r2
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8004e50:	230d      	movs	r3, #13
 8004e52:	e198      	b.n	8005186 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	7d1b      	ldrb	r3, [r3, #20]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	7cdb      	ldrb	r3, [r3, #19]
 8004e60:	b21b      	sxth	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d112      	bne.n	8004e96 <find_volume+0x35a>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004e76:	061a      	lsls	r2, r3, #24
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	7bdb      	ldrb	r3, [r3, #15]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	b21a      	sxth	r2, r3
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea0:	7b9b      	ldrb	r3, [r3, #14]
 8004ea2:	b21b      	sxth	r3, r3
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	b21b      	sxth	r3, r3
 8004ea8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004eaa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <find_volume+0x378>
 8004eb0:	230d      	movs	r3, #13
 8004eb2:	e168      	b.n	8005186 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004eb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb8:	4413      	add	r3, r2
 8004eba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ebc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ec0:	8911      	ldrh	r1, [r2, #8]
 8004ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ec8:	8952      	ldrh	r2, [r2, #10]
 8004eca:	0952      	lsrs	r2, r2, #5
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d201      	bcs.n	8004ee4 <find_volume+0x3a8>
 8004ee0:	230d      	movs	r3, #13
 8004ee2:	e150      	b.n	8005186 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ef0:	7892      	ldrb	r2, [r2, #2]
 8004ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <find_volume+0x3c6>
 8004efe:	230d      	movs	r3, #13
 8004f00:	e141      	b.n	8005186 <find_volume+0x64a>
	fmt = FS_FAT12;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d902      	bls.n	8004f18 <find_volume+0x3dc>
 8004f12:	2302      	movs	r3, #2
 8004f14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d902      	bls.n	8004f28 <find_volume+0x3ec>
 8004f22:	2303      	movs	r3, #3
 8004f24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f32:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f3e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004f40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f44:	4413      	add	r3, r2
 8004f46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f4c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8004f4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	4413      	add	r3, r2
 8004f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f5a:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8004f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d124      	bne.n	8004fae <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f6a:	891b      	ldrh	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <find_volume+0x438>
 8004f70:	230d      	movs	r3, #13
 8004f72:	e108      	b.n	8005186 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004f7a:	061a      	lsls	r2, r3, #24
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f92:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8004f96:	4313      	orrs	r3, r2
 8004f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f9e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fac:	e02b      	b.n	8005006 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb4:	891b      	ldrh	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <find_volume+0x482>
 8004fba:	230d      	movs	r3, #13
 8004fbc:	e0e3      	b.n	8005186 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc8:	4413      	add	r3, r2
 8004fca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fd0:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d105      	bne.n	8004fe6 <find_volume+0x4aa>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	e00e      	b.n	8005004 <find_volume+0x4c8>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	085a      	lsrs	r2, r3, #1
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005004:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005014:	895b      	ldrh	r3, [r3, #10]
 8005016:	4619      	mov	r1, r3
 8005018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501a:	440b      	add	r3, r1
 800501c:	3b01      	subs	r3, #1
 800501e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005020:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005024:	8949      	ldrh	r1, [r1, #10]
 8005026:	fbb3 f3f1 	udiv	r3, r3, r1
 800502a:	429a      	cmp	r2, r3
 800502c:	d201      	bcs.n	8005032 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800502e:	230d      	movs	r3, #13
 8005030:	e0a9      	b.n	8005186 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005038:	461a      	mov	r2, r3
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	6113      	str	r3, [r2, #16]
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800504a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800504e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005056:	2280      	movs	r2, #128	@ 0x80
 8005058:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800505a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800505e:	2b03      	cmp	r3, #3
 8005060:	d17a      	bne.n	8005158 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	b21a      	sxth	r2, r3
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005072:	b21b      	sxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b21b      	sxth	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d16d      	bne.n	8005158 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800507c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800507e:	3301      	adds	r3, #1
 8005080:	4619      	mov	r1, r3
 8005082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005084:	f7fd ff8e 	bl	8002fa4 <move_window>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d164      	bne.n	8005158 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005094:	2200      	movs	r2, #0
 8005096:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	b21a      	sxth	r2, r3
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80050a8:	b21b      	sxth	r3, r3
 80050aa:	4313      	orrs	r3, r2
 80050ac:	b21b      	sxth	r3, r3
 80050ae:	4a38      	ldr	r2, [pc, #224]	@ (8005190 <find_volume+0x654>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d151      	bne.n	8005158 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80050b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	061a      	lsls	r2, r3, #24
 80050ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	4a30      	ldr	r2, [pc, #192]	@ (8005194 <find_volume+0x658>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d140      	bne.n	8005158 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	4313      	orrs	r3, r2
 80050f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050f4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 80050f8:	4313      	orrs	r3, r2
 80050fa:	4a27      	ldr	r2, [pc, #156]	@ (8005198 <find_volume+0x65c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d12b      	bne.n	8005158 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005106:	061a      	lsls	r2, r3, #24
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	4313      	orrs	r3, r2
 800511c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800511e:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005122:	4313      	orrs	r3, r2
 8005124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800512a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005132:	061a      	lsls	r2, r3, #24
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	4313      	orrs	r3, r2
 8005148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800514a:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800514e:	4313      	orrs	r3, r2
 8005150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005152:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005156:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800515e:	461a      	mov	r2, r3
 8005160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005164:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <find_volume+0x660>)
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	4b0b      	ldr	r3, [pc, #44]	@ (800519c <find_volume+0x660>)
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <find_volume+0x660>)
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800517e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005180:	f7fd fe94 	bl	8002eac <clear_lock>
#endif

	return FR_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3758      	adds	r7, #88	@ 0x58
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	ffffaa55 	.word	0xffffaa55
 8005194:	41615252 	.word	0x41615252
 8005198:	61417272 	.word	0x61417272
 800519c:	20001144 	.word	0x20001144

080051a0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02a      	beq.n	8005208 <validate+0x68>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d024      	beq.n	8005208 <validate+0x68>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <validate+0x68>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051dc:	88da      	ldrh	r2, [r3, #6]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e4:	889b      	ldrh	r3, [r3, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d10e      	bne.n	8005208 <validate+0x68>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fbad 	bl	8002958 <disk_status>
 80051fe:	4603      	mov	r3, r0
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005208:	2309      	movs	r3, #9
 800520a:	e000      	b.n	800520e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800522a:	f107 0310 	add.w	r3, r7, #16
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fbd2 	bl	80049d8 <get_ldnumber>
 8005234:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	da01      	bge.n	8005240 <f_mount+0x28>
 800523c:	230b      	movs	r3, #11
 800523e:	e02f      	b.n	80052a0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005240:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <f_mount+0x90>)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005248:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005250:	69b8      	ldr	r0, [r7, #24]
 8005252:	f7fd fe2b 	bl	8002eac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	490d      	ldr	r1, [pc, #52]	@ (80052a8 <f_mount+0x90>)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <f_mount+0x6e>
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <f_mount+0x72>
 8005286:	2300      	movs	r3, #0
 8005288:	e00a      	b.n	80052a0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800528a:	f107 0108 	add.w	r1, r7, #8
 800528e:	f107 030c 	add.w	r3, r7, #12
 8005292:	2200      	movs	r2, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fc51 	bl	8004b3c <find_volume>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20001140 	.word	0x20001140

080052ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052ba:	f843 0c4c 	str.w	r0, [r3, #-76]
 80052be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052c2:	f843 1c50 	str.w	r1, [r3, #-80]
 80052c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052ca:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80052ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <f_open+0x32>
 80052da:	2309      	movs	r3, #9
 80052dc:	e2f3      	b.n	80058c6 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 80052de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052e2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80052f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052f4:	461a      	mov	r2, r3
 80052f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052fa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005306:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800530a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	f107 0118 	add.w	r1, r7, #24
 8005318:	3910      	subs	r1, #16
 800531a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800531e:	3b18      	subs	r3, #24
 8005320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fc09 	bl	8004b3c <find_volume>
 800532a:	4603      	mov	r3, r0
 800532c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005330:	f102 0217 	add.w	r2, r2, #23
 8005334:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005336:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800533a:	f103 0317 	add.w	r3, r3, #23
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 82bb 	bne.w	80058bc <f_open+0x610>
		INIT_BUF(dj);
 8005346:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800534a:	461a      	mov	r2, r3
 800534c:	f107 0318 	add.w	r3, r7, #24
 8005350:	3b04      	subs	r3, #4
 8005352:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8005356:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800535a:	461a      	mov	r2, r3
 800535c:	4bd3      	ldr	r3, [pc, #844]	@ (80056ac <f_open+0x400>)
 800535e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005362:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005366:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800536a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800536e:	3b18      	subs	r3, #24
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff faba 	bl	80048ec <follow_path>
 8005378:	4603      	mov	r3, r0
 800537a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800537e:	f102 0217 	add.w	r2, r2, #23
 8005382:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005384:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005388:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800538c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005390:	f102 0210 	add.w	r2, r2, #16
 8005394:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005396:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800539a:	f103 0317 	add.w	r3, r3, #23
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d124      	bne.n	80053ee <f_open+0x142>
			if (!dir)	/* Default directory itself */
 80053a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80053a8:	f103 0310 	add.w	r3, r3, #16
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <f_open+0x114>
				res = FR_INVALID_NAME;
 80053b2:	2306      	movs	r3, #6
 80053b4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80053b8:	f102 0217 	add.w	r2, r2, #23
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	e016      	b.n	80053ee <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80053c4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf8c      	ite	hi
 80053cc:	2301      	movhi	r3, #1
 80053ce:	2300      	movls	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80053d8:	3b18      	subs	r3, #24
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd fbd1 	bl	8002b84 <chk_lock>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80053e8:	f102 0217 	add.w	r2, r2, #23
 80053ec:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80053ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80053f2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80053f6:	f003 031c 	and.w	r3, r3, #28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 813c 	beq.w	8005678 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8005400:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005404:	f103 0317 	add.w	r3, r3, #23
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d02e      	beq.n	800546c <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800540e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005412:	f103 0317 	add.w	r3, r3, #23
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d112      	bne.n	8005442 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800541c:	f7fd fc22 	bl	8002c64 <enq_lock>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <f_open+0x18a>
 8005426:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800542a:	3b18      	subs	r3, #24
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe ff7b 	bl	8004328 <dir_register>
 8005432:	4603      	mov	r3, r0
 8005434:	e000      	b.n	8005438 <f_open+0x18c>
 8005436:	2312      	movs	r3, #18
 8005438:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800543c:	f102 0217 	add.w	r2, r2, #23
 8005440:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005442:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005446:	461a      	mov	r2, r3
 8005448:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800544c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005458:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800545c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8005460:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005464:	f102 0210 	add.w	r2, r2, #16
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e01f      	b.n	80054ac <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800546c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005470:	f103 0310 	add.w	r3, r3, #16
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330b      	adds	r3, #11
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 0311 	and.w	r3, r3, #17
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <f_open+0x1e4>
					res = FR_DENIED;
 8005482:	2307      	movs	r3, #7
 8005484:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005488:	f102 0217 	add.w	r2, r2, #23
 800548c:	7013      	strb	r3, [r2, #0]
 800548e:	e00d      	b.n	80054ac <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005490:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005494:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <f_open+0x200>
						res = FR_EXIST;
 80054a0:	2308      	movs	r3, #8
 80054a2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80054a6:	f102 0217 	add.w	r2, r2, #23
 80054aa:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80054b0:	f103 0317 	add.w	r3, r3, #23
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8113 	bne.w	80056e2 <f_open+0x436>
 80054bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80054c0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 810a 	beq.w	80056e2 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 80054ce:	f7fd f9e1 	bl	8002894 <get_fattime>
 80054d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80054d6:	f103 030c 	add.w	r3, r3, #12
 80054da:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80054dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80054e0:	f103 0310 	add.w	r3, r3, #16
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330e      	adds	r3, #14
 80054e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80054ec:	f102 020c 	add.w	r2, r2, #12
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80054fa:	f103 030c 	add.w	r3, r3, #12
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b29a      	uxth	r2, r3
 8005506:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800550a:	f103 0310 	add.w	r3, r3, #16
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330f      	adds	r3, #15
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800551a:	f103 030c 	add.w	r3, r3, #12
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0c1a      	lsrs	r2, r3, #16
 8005522:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005526:	f103 0310 	add.w	r3, r3, #16
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3310      	adds	r3, #16
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005536:	f103 030c 	add.w	r3, r3, #12
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	0e1a      	lsrs	r2, r3, #24
 800553e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005542:	f103 0310 	add.w	r3, r3, #16
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3311      	adds	r3, #17
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800554e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005552:	f103 0310 	add.w	r3, r3, #16
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330b      	adds	r3, #11
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800555e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005562:	f103 0310 	add.w	r3, r3, #16
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	331c      	adds	r3, #28
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005572:	f103 0310 	add.w	r3, r3, #16
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	331d      	adds	r3, #29
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005582:	f103 0310 	add.w	r3, r3, #16
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	331e      	adds	r3, #30
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005592:	f103 0310 	add.w	r3, r3, #16
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	331f      	adds	r3, #31
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800559e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80055a2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80055a6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80055aa:	f102 0210 	add.w	r2, r2, #16
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe fc09 	bl	8003dc8 <ld_clust>
 80055b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055ba:	f103 0308 	add.w	r3, r3, #8
 80055be:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80055c0:	2100      	movs	r1, #0
 80055c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055c6:	f103 0310 	add.w	r3, r3, #16
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	f7fe fc2a 	bl	8003e24 <st_clust>
				dj.fs->wflag = 1;
 80055d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80055d4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80055d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055dc:	2201      	movs	r2, #1
 80055de:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80055e0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055e4:	f103 0308 	add.w	r3, r3, #8
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d079      	beq.n	80056e2 <f_open+0x436>
					dw = dj.fs->winsect;
 80055ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80055f2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80055f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005600:	f102 020c 	add.w	r2, r2, #12
 8005604:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005606:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800560a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800560e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005612:	f102 0208 	add.w	r2, r2, #8
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe f826 	bl	800366a <remove_chain>
 800561e:	4603      	mov	r3, r0
 8005620:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005624:	f102 0217 	add.w	r2, r2, #23
 8005628:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800562a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800562e:	f103 0317 	add.w	r3, r3, #23
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d154      	bne.n	80056e2 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005638:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800563c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8005640:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005644:	f103 0308 	add.w	r3, r3, #8
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3b01      	subs	r3, #1
 800564c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005650:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8005652:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005656:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800565a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800565e:	f102 020c 	add.w	r2, r2, #12
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd fc9d 	bl	8002fa4 <move_window>
 800566a:	4603      	mov	r3, r0
 800566c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005670:	f102 0217 	add.w	r2, r2, #23
 8005674:	7013      	strb	r3, [r2, #0]
 8005676:	e034      	b.n	80056e2 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005678:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800567c:	f103 0317 	add.w	r3, r3, #23
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d12d      	bne.n	80056e2 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005686:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800568a:	f103 0310 	add.w	r3, r3, #16
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330b      	adds	r3, #11
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <f_open+0x404>
					res = FR_NO_FILE;
 800569c:	2304      	movs	r3, #4
 800569e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80056a2:	f102 0217 	add.w	r2, r2, #23
 80056a6:	7013      	strb	r3, [r2, #0]
 80056a8:	e01b      	b.n	80056e2 <f_open+0x436>
 80056aa:	bf00      	nop
 80056ac:	20001160 	.word	0x20001160
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80056b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056b4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d010      	beq.n	80056e2 <f_open+0x436>
 80056c0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80056c4:	f103 0310 	add.w	r3, r3, #16
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330b      	adds	r3, #11
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <f_open+0x436>
						res = FR_DENIED;
 80056d6:	2307      	movs	r3, #7
 80056d8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80056dc:	f102 0217 	add.w	r2, r2, #23
 80056e0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80056e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80056e6:	f103 0317 	add.w	r3, r3, #23
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d155      	bne.n	800579c <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80056f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80056f4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <f_open+0x46a>
				mode |= FA__WRITTEN;
 8005700:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005704:	461a      	mov	r2, r3
 8005706:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800570a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800570e:	f043 0320 	orr.w	r3, r3, #32
 8005712:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005716:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800571a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800571e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005728:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800572c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005730:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8005732:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005736:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800573a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800573e:	461a      	mov	r2, r3
 8005740:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005744:	f103 0310 	add.w	r3, r3, #16
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800574c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005750:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005754:	2b01      	cmp	r3, #1
 8005756:	bf8c      	ite	hi
 8005758:	2301      	movhi	r3, #1
 800575a:	2300      	movls	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005764:	3b18      	subs	r3, #24
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f7fd fa9f 	bl	8002cac <inc_lock>
 800576e:	4602      	mov	r2, r0
 8005770:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005774:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800577e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005782:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <f_open+0x4f0>
 8005790:	2302      	movs	r3, #2
 8005792:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005796:	f102 0217 	add.w	r2, r2, #23
 800579a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800579c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80057a0:	f103 0317 	add.w	r3, r3, #23
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8088 	bne.w	80058bc <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 80057ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057b0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b8:	461a      	mov	r2, r3
 80057ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057be:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80057c2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80057c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057c8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80057cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d0:	2200      	movs	r2, #0
 80057d2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80057d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057d8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80057dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80057e0:	f102 0210 	add.w	r2, r2, #16
 80057e4:	6811      	ldr	r1, [r2, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe faee 	bl	8003dc8 <ld_clust>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fa:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80057fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005800:	f103 0310 	add.w	r3, r3, #16
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	331f      	adds	r3, #31
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	061a      	lsls	r2, r3, #24
 800580c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005810:	f103 0310 	add.w	r3, r3, #16
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	331e      	adds	r3, #30
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005822:	f103 0310 	add.w	r3, r3, #16
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	331d      	adds	r3, #29
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4313      	orrs	r3, r2
 8005830:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005834:	f102 0210 	add.w	r2, r2, #16
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	321c      	adds	r2, #28
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005844:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005848:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800584c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800584e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005852:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8005860:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005864:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005872:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005876:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800587a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005884:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005888:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800588c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005890:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005898:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800589a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800589e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ac:	88da      	ldrh	r2, [r3, #6]
 80058ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80058b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80058b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ba:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80058bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80058c0:	f103 0317 	add.w	r3, r3, #23
 80058c4:	781b      	ldrb	r3, [r3, #0]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop

080058d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	@ 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fc57 	bl	80051a0 <validate>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <f_write+0x2c>
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	e21e      	b.n	8005d3e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005906:	79db      	ldrb	r3, [r3, #7]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005912:	79db      	ldrb	r3, [r3, #7]
 8005914:	e213      	b.n	8005d3e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800591c:	799b      	ldrb	r3, [r3, #6]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005926:	2307      	movs	r3, #7
 8005928:	e209      	b.n	8005d3e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	f080 81d9 	bcs.w	8005cf6 <f_write+0x422>
 8005944:	2300      	movs	r3, #0
 8005946:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005948:	e1d5      	b.n	8005cf6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800595e:	8952      	ldrh	r2, [r2, #10]
 8005960:	fbb3 f1f2 	udiv	r1, r3, r2
 8005964:	fb01 f202 	mul.w	r2, r1, r2
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8169 	bne.w	8005c42 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005984:	8952      	ldrh	r2, [r2, #10]
 8005986:	fbb3 f3f2 	udiv	r3, r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005998:	789b      	ldrb	r3, [r3, #2]
 800599a:	3b01      	subs	r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	4013      	ands	r3, r2
 80059a0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80059a2:	7dbb      	ldrb	r3, [r7, #22]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d15f      	bne.n	8005a68 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d111      	bne.n	80059d8 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d126      	bne.n	8005a12 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd feac 	bl	800372c <create_chain>
 80059d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80059d6:	e01c      	b.n	8005a12 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4619      	mov	r1, r3
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7fd ff44 	bl	800387c <clmt_clust>
 80059f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80059f6:	e00c      	b.n	8005a12 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fd fe8e 	bl	800372c <create_chain>
 8005a10:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8173 	beq.w	8005d00 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <f_write+0x15a>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a26:	2202      	movs	r2, #2
 8005a28:	71da      	strb	r2, [r3, #7]
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e187      	b.n	8005d3e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d106      	bne.n	8005a44 <f_write+0x170>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	71da      	strb	r2, [r3, #7]
 8005a40:	2301      	movs	r3, #1
 8005a42:	e17c      	b.n	8005d3e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <f_write+0x194>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a62:	461a      	mov	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	799b      	ldrb	r3, [r3, #6]
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d023      	beq.n	8005ac0 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a84:	7858      	ldrb	r0, [r3, #1]
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	2301      	movs	r3, #1
 8005a92:	f7fc ffc1 	bl	8002a18 <disk_write>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	71da      	strb	r2, [r3, #7]
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e149      	b.n	8005d3e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab0:	799b      	ldrb	r3, [r3, #6]
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005abe:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fd fb57 	bl	8003186 <clust2sect>
 8005ad8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <f_write+0x21a>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	71da      	strb	r2, [r3, #7]
 8005aea:	2302      	movs	r3, #2
 8005aec:	e127      	b.n	8005d3e <f_write+0x46a>
			sect += csect;
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b02:	895b      	ldrh	r3, [r3, #10]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d069      	beq.n	8005be8 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005b14:	7dba      	ldrb	r2, [r7, #22]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b26:	7892      	ldrb	r2, [r2, #2]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d90a      	bls.n	8005b42 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b38:	789b      	ldrb	r3, [r3, #2]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	7dbb      	ldrb	r3, [r7, #22]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b4e:	7858      	ldrb	r0, [r3, #1]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	f7fc ff5f 	bl	8002a18 <disk_write>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d006      	beq.n	8005b6e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b66:	2201      	movs	r2, #1
 8005b68:	71da      	strb	r2, [r3, #7]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0e7      	b.n	8005d3e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d926      	bls.n	8005bce <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b9a:	8952      	ldrh	r2, [r2, #10]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	18d1      	adds	r1, r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb0:	895b      	ldrh	r3, [r3, #10]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7fc ff6e 	bl	8002a94 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bbe:	799b      	ldrb	r3, [r3, #6]
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bcc:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bda:	895b      	ldrh	r3, [r3, #10]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	623b      	str	r3, [r7, #32]
				continue;
 8005be6:	e06e      	b.n	8005cc6 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d01f      	beq.n	8005c36 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d215      	bcs.n	8005c36 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c16:	7858      	ldrb	r0, [r3, #1]
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	f7fc fedb 	bl	80029d8 <disk_read>
 8005c22:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2e:	2201      	movs	r2, #1
 8005c30:	71da      	strb	r2, [r3, #7]
 8005c32:	2301      	movs	r3, #1
 8005c34:	e083      	b.n	8005d3e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c4e:	895b      	ldrh	r3, [r3, #10]
 8005c50:	4618      	mov	r0, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c66:	8952      	ldrh	r2, [r2, #10]
 8005c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c6c:	fb01 f202 	mul.w	r2, r1, r2
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	1ac3      	subs	r3, r0, r3
 8005c74:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d901      	bls.n	8005c82 <f_write+0x3ae>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c96:	8952      	ldrh	r2, [r2, #10]
 8005c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c9c:	fb01 f202 	mul.w	r2, r1, r2
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	69b9      	ldr	r1, [r7, #24]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc fef2 	bl	8002a94 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb6:	799b      	ldrb	r3, [r3, #6]
 8005cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc4:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	4413      	add	r3, r2
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	441a      	add	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f ae26 	bne.w	800594a <f_write+0x76>
 8005cfe:	e000      	b.n	8005d02 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d00:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d907      	bls.n	8005d26 <f_write+0x452>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d24:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d2c:	799b      	ldrb	r3, [r3, #6]
 8005d2e:	f043 0320 	orr.w	r3, r3, #32
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d3a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3728      	adds	r7, #40	@ 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fa26 	bl	80051a0 <validate>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 80bc 	bne.w	8005ed8 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d66:	799b      	ldrb	r3, [r3, #6]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80b3 	beq.w	8005ed8 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d78:	799b      	ldrb	r3, [r3, #6]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01e      	beq.n	8005dc0 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8e:	7858      	ldrb	r0, [r3, #1]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f7fc fe3c 	bl	8002a18 <disk_write>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005da6:	2301      	movs	r3, #1
 8005da8:	e097      	b.n	8005eda <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db0:	799b      	ldrb	r3, [r3, #6]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dbe:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fd f8e6 	bl	8002fa4 <move_window>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d17a      	bne.n	8005ed8 <f_sync+0x192>
				dir = fp->dir_ptr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	330b      	adds	r3, #11
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	330b      	adds	r3, #11
 8005df6:	f042 0220 	orr.w	r2, r2, #32
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	331c      	adds	r3, #28
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	331d      	adds	r3, #29
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0c1a      	lsrs	r2, r3, #16
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	331e      	adds	r3, #30
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	0e1a      	lsrs	r2, r3, #24
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	331f      	adds	r3, #31
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f7fd ffe6 	bl	8003e24 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005e58:	f7fc fd1c 	bl	8002894 <get_fattime>
 8005e5c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3316      	adds	r3, #22
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3317      	adds	r3, #23
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	0c1a      	lsrs	r2, r3, #16
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	3318      	adds	r3, #24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	0e1a      	lsrs	r2, r3, #24
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3319      	adds	r3, #25
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3312      	adds	r3, #18
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3313      	adds	r3, #19
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea6:	799b      	ldrb	r3, [r3, #6]
 8005ea8:	f023 0320 	bic.w	r3, r3, #32
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fd f89a 	bl	8003008 <sync_fs>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff2b 	bl	8005d46 <f_sync>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d119      	bne.n	8005f2e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff f950 	bl	80051a0 <validate>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d111      	bne.n	8005f2e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fc ff86 	bl	8002e24 <dec_lock>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d105      	bne.n	8005f2e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b090      	sub	sp, #64	@ 0x40
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff f92c 	bl	80051a0 <validate>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <f_lseek+0x24>
 8005f56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f5a:	e2da      	b.n	8006512 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f62:	79db      	ldrb	r3, [r3, #7]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f6e:	79db      	ldrb	r3, [r3, #7]
 8005f70:	e2cf      	b.n	8006512 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8124 	beq.w	80061c8 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d16c      	bne.n	8006062 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d046      	beq.n	800603e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	3302      	adds	r3, #2
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fd f8fb 	bl	80031ce <get_fat>
 8005fd8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d806      	bhi.n	8005fee <f_lseek+0xb6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	71da      	strb	r2, [r3, #7]
 8005fea:	2302      	movs	r3, #2
 8005fec:	e291      	b.n	8006512 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d106      	bne.n	8006004 <f_lseek+0xcc>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	71da      	strb	r2, [r3, #7]
 8006000:	2301      	movs	r3, #1
 8006002:	e286      	b.n	8006512 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3301      	adds	r3, #1
 8006008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600a:	429a      	cmp	r2, r3
 800600c:	d0d7      	beq.n	8005fbe <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800600e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	429a      	cmp	r2, r3
 8006014:	d809      	bhi.n	800602a <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	627a      	str	r2, [r7, #36]	@ 0x24
 800601c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	627a      	str	r2, [r7, #36]	@ 0x24
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	429a      	cmp	r2, r3
 800603c:	d3b8      	bcc.n	8005fb0 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006048:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800604a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	429a      	cmp	r2, r3
 8006050:	d803      	bhi.n	800605a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e259      	b.n	800650e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800605a:	2311      	movs	r3, #17
 800605c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006060:	e255      	b.n	800650e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d904      	bls.n	800607a <f_lseek+0x142>
				ofs = fp->fsize;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006080:	461a      	mov	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8240 	beq.w	800650e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fd fbf1 	bl	800387c <clmt_clust>
 800609a:	4602      	mov	r2, r0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a2:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fd f865 	bl	8003186 <clust2sect>
 80060bc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <f_lseek+0x19a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ca:	2202      	movs	r2, #2
 80060cc:	71da      	strb	r2, [r3, #7]
 80060ce:	2302      	movs	r3, #2
 80060d0:	e21f      	b.n	8006512 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060e2:	8952      	ldrh	r2, [r2, #10]
 80060e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060f4:	7892      	ldrb	r2, [r2, #2]
 80060f6:	3a01      	subs	r2, #1
 80060f8:	4013      	ands	r3, r2
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4413      	add	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006114:	8952      	ldrh	r2, [r2, #10]
 8006116:	fbb3 f1f2 	udiv	r1, r3, r2
 800611a:	fb01 f202 	mul.w	r2, r1, r2
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 81f4 	beq.w	800650e <f_lseek+0x5d6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	429a      	cmp	r2, r3
 8006132:	f000 81ec 	beq.w	800650e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613c:	799b      	ldrb	r3, [r3, #6]
 800613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d023      	beq.n	800618e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006152:	7858      	ldrb	r0, [r3, #1]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	2301      	movs	r3, #1
 8006160:	f7fc fc5a 	bl	8002a18 <disk_write>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006170:	2201      	movs	r2, #1
 8006172:	71da      	strb	r2, [r3, #7]
 8006174:	2301      	movs	r3, #1
 8006176:	e1cc      	b.n	8006512 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617e:	799b      	ldrb	r3, [r3, #6]
 8006180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006184:	b2da      	uxtb	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800619a:	7858      	ldrb	r0, [r3, #1]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	2301      	movs	r3, #1
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	f7fc fc19 	bl	80029d8 <disk_read>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d006      	beq.n	80061ba <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b2:	2201      	movs	r2, #1
 80061b4:	71da      	strb	r2, [r3, #7]
 80061b6:	2301      	movs	r3, #1
 80061b8:	e1ab      	b.n	8006512 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c0:	461a      	mov	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6193      	str	r3, [r2, #24]
 80061c6:	e1a2      	b.n	800650e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90c      	bls.n	80061f0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061dc:	799b      	ldrb	r3, [r3, #6]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006204:	461a      	mov	r2, r3
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8100 	beq.w	8006412 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800621e:	789b      	ldrb	r3, [r3, #2]
 8006220:	461a      	mov	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622e:	895b      	ldrh	r3, [r3, #10]
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d021      	beq.n	8006280 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	fbb2 f2f3 	udiv	r2, r2, r3
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006250:	429a      	cmp	r2, r3
 8006252:	d315      	bcc.n	8006280 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	1e5a      	subs	r2, r3, #1
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	425b      	negs	r3, r3
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006264:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800627e:	e031      	b.n	80062e4 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d123      	bne.n	80062d8 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd fa46 	bl	800372c <create_chain>
 80062a0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <f_lseek+0x37e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ae:	2202      	movs	r2, #2
 80062b0:	71da      	strb	r2, [r3, #7]
 80062b2:	2302      	movs	r3, #2
 80062b4:	e12d      	b.n	8006512 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d106      	bne.n	80062cc <f_lseek+0x394>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c4:	2201      	movs	r2, #1
 80062c6:	71da      	strb	r2, [r3, #7]
 80062c8:	2301      	movs	r3, #1
 80062ca:	e122      	b.n	8006512 <f_lseek+0x5da>
					fp->sclust = clst;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d2:	461a      	mov	r2, r3
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	461a      	mov	r2, r3
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8093 	beq.w	8006412 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 80062ec:	e052      	b.n	8006394 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f4:	799b      	ldrb	r3, [r3, #6]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006308:	4618      	mov	r0, r3
 800630a:	f7fd fa0f 	bl	800372c <create_chain>
 800630e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <f_lseek+0x3f6>
							ofs = bcs; break;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	e03f      	b.n	800639c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc ff51 	bl	80031ce <get_fat>
 800632c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d106      	bne.n	8006344 <f_lseek+0x40c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633c:	2201      	movs	r2, #1
 800633e:	71da      	strb	r2, [r3, #7]
 8006340:	2301      	movs	r3, #1
 8006342:	e0e6      	b.n	8006512 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	2b01      	cmp	r3, #1
 8006348:	d909      	bls.n	800635e <f_lseek+0x426>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800635a:	429a      	cmp	r2, r3
 800635c:	d306      	bcc.n	800636c <f_lseek+0x434>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006364:	2202      	movs	r2, #2
 8006366:	71da      	strb	r2, [r3, #7]
 8006368:	2302      	movs	r3, #2
 800636a:	e0d2      	b.n	8006512 <f_lseek+0x5da>
					fp->clust = clst;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006372:	461a      	mov	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800638a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	429a      	cmp	r2, r3
 800639a:	d8a8      	bhi.n	80062ee <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4413      	add	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063ae:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063bc:	895b      	ldrh	r3, [r3, #10]
 80063be:	461a      	mov	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80063c6:	fb01 f202 	mul.w	r2, r1, r2
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d020      	beq.n	8006412 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fed3 	bl	8003186 <clust2sect>
 80063e0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80063e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <f_lseek+0x4be>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ee:	2202      	movs	r2, #2
 80063f0:	71da      	strb	r2, [r3, #7]
 80063f2:	2302      	movs	r3, #2
 80063f4:	e08d      	b.n	8006512 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	895b      	ldrh	r3, [r3, #10]
 8006404:	461a      	mov	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800640e:	4413      	add	r3, r2
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006426:	8952      	ldrh	r2, [r2, #10]
 8006428:	fbb3 f1f2 	udiv	r1, r3, r2
 800642c:	fb01 f202 	mul.w	r2, r1, r2
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d04e      	beq.n	80064d4 <f_lseek+0x59c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006440:	429a      	cmp	r2, r3
 8006442:	d047      	beq.n	80064d4 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644a:	799b      	ldrb	r3, [r3, #6]
 800644c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d023      	beq.n	800649c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006460:	7858      	ldrb	r0, [r3, #1]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	2301      	movs	r3, #1
 800646e:	f7fc fad3 	bl	8002a18 <disk_write>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800647e:	2201      	movs	r2, #1
 8006480:	71da      	strb	r2, [r3, #7]
 8006482:	2301      	movs	r3, #1
 8006484:	e045      	b.n	8006512 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648c:	799b      	ldrb	r3, [r3, #6]
 800648e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006492:	b2da      	uxtb	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a8:	7858      	ldrb	r0, [r3, #1]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064b0:	f7fc fa92 	bl	80029d8 <disk_read>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d006      	beq.n	80064c8 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c0:	2201      	movs	r2, #1
 80064c2:	71da      	strb	r2, [r3, #7]
 80064c4:	2301      	movs	r3, #1
 80064c6:	e024      	b.n	8006512 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	461a      	mov	r2, r3
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d912      	bls.n	800650e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064f6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064fe:	799b      	ldrb	r3, [r3, #6]
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800650e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006512:	4618      	mov	r0, r3
 8006514:	3740      	adds	r7, #64	@ 0x40
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	2b0a      	cmp	r3, #10
 800652a:	d103      	bne.n	8006534 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800652c:	210d      	movs	r1, #13
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fff3 	bl	800651a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	db25      	blt.n	800658c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	60fa      	str	r2, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b3c      	cmp	r3, #60	@ 0x3c
 8006552:	dd12      	ble.n	800657a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 010c 	add.w	r1, r3, #12
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f107 0308 	add.w	r3, r7, #8
 8006564:	f7ff f9b6 	bl	80058d4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d101      	bne.n	8006574 <putc_bfd+0x5a>
 8006570:	2300      	movs	r3, #0
 8006572:	e001      	b.n	8006578 <putc_bfd+0x5e>
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	e000      	b.n	800658e <putc_bfd+0x74>
	if (i < 0) return;
 800658c:	bf00      	nop
}
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b097      	sub	sp, #92	@ 0x5c
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80065aa:	e009      	b.n	80065c0 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	f107 030c 	add.w	r3, r7, #12
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ffad 	bl	800651a <putc_bfd>
	while (*str)			/* Put the string */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f1      	bne.n	80065ac <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db15      	blt.n	80065fa <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	461c      	mov	r4, r3
 80065d4:	f107 0208 	add.w	r2, r7, #8
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	f103 010c 	add.w	r1, r3, #12
 80065e0:	4613      	mov	r3, r2
 80065e2:	4622      	mov	r2, r4
 80065e4:	f7ff f976 	bl	80058d4 <f_write>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <f_puts+0x66>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e001      	b.n	80065fe <f_puts+0x6a>
	return EOF;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065fe:	4618      	mov	r0, r3
 8006600:	375c      	adds	r7, #92	@ 0x5c
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
	...

08006608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800661e:	4b1e      	ldr	r3, [pc, #120]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006620:	7a5b      	ldrb	r3, [r3, #9]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	d831      	bhi.n	800668c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006628:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 800662a:	7a5b      	ldrb	r3, [r3, #9]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006636:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006638:	7a5b      	ldrb	r3, [r3, #9]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006646:	4b14      	ldr	r3, [pc, #80]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006648:	7a5b      	ldrb	r3, [r3, #9]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006650:	4413      	add	r3, r2
 8006652:	79fa      	ldrb	r2, [r7, #7]
 8006654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006656:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006658:	7a5b      	ldrb	r3, [r3, #9]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	b2d1      	uxtb	r1, r2
 8006660:	4a0d      	ldr	r2, [pc, #52]	@ (8006698 <FATFS_LinkDriverEx+0x90>)
 8006662:	7251      	strb	r1, [r2, #9]
 8006664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006666:	7dbb      	ldrb	r3, [r7, #22]
 8006668:	3330      	adds	r3, #48	@ 0x30
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3301      	adds	r3, #1
 8006674:	223a      	movs	r2, #58	@ 0x3a
 8006676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3302      	adds	r3, #2
 800667c:	222f      	movs	r2, #47	@ 0x2f
 800667e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3303      	adds	r3, #3
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	20001360 	.word	0x20001360

0800669c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066a6:	2200      	movs	r2, #0
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ffac 	bl	8006608 <FATFS_LinkDriverEx>
 80066b0:	4603      	mov	r3, r0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	6039      	str	r1, [r7, #0]
 80066c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80066cc:	d802      	bhi.n	80066d4 <ff_convert+0x18>
		c = chr;
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	81fb      	strh	r3, [r7, #14]
 80066d2:	e025      	b.n	8006720 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2bff      	cmp	r3, #255	@ 0xff
 80066de:	d805      	bhi.n	80066ec <ff_convert+0x30>
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	3b80      	subs	r3, #128	@ 0x80
 80066e4:	4a11      	ldr	r2, [pc, #68]	@ (800672c <ff_convert+0x70>)
 80066e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ea:	e000      	b.n	80066ee <ff_convert+0x32>
 80066ec:	2300      	movs	r3, #0
 80066ee:	81fb      	strh	r3, [r7, #14]
 80066f0:	e016      	b.n	8006720 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80066f2:	2300      	movs	r3, #0
 80066f4:	81fb      	strh	r3, [r7, #14]
 80066f6:	e009      	b.n	800670c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80066f8:	89fb      	ldrh	r3, [r7, #14]
 80066fa:	4a0c      	ldr	r2, [pc, #48]	@ (800672c <ff_convert+0x70>)
 80066fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	429a      	cmp	r2, r3
 8006704:	d006      	beq.n	8006714 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	3301      	adds	r3, #1
 800670a:	81fb      	strh	r3, [r7, #14]
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006710:	d9f2      	bls.n	80066f8 <ff_convert+0x3c>
 8006712:	e000      	b.n	8006716 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006714:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	3380      	adds	r3, #128	@ 0x80
 800671a:	b29b      	uxth	r3, r3
 800671c:	b2db      	uxtb	r3, r3
 800671e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006720:	89fb      	ldrh	r3, [r7, #14]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	08007a20 	.word	0x08007a20

08006730 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e002      	b.n	8006746 <ff_wtoupper+0x16>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	4a0f      	ldr	r2, [pc, #60]	@ (8006784 <ff_wtoupper+0x54>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <ff_wtoupper+0x30>
 8006752:	4a0c      	ldr	r2, [pc, #48]	@ (8006784 <ff_wtoupper+0x54>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	429a      	cmp	r2, r3
 800675e:	d1ef      	bne.n	8006740 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006760:	4a08      	ldr	r2, [pc, #32]	@ (8006784 <ff_wtoupper+0x54>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <ff_wtoupper+0x46>
 800676c:	4a06      	ldr	r2, [pc, #24]	@ (8006788 <ff_wtoupper+0x58>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006774:	e000      	b.n	8006778 <ff_wtoupper+0x48>
 8006776:	88fb      	ldrh	r3, [r7, #6]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	08007b20 	.word	0x08007b20
 8006788:	08007d00 	.word	0x08007d00

0800678c <std>:
 800678c:	2300      	movs	r3, #0
 800678e:	b510      	push	{r4, lr}
 8006790:	4604      	mov	r4, r0
 8006792:	e9c0 3300 	strd	r3, r3, [r0]
 8006796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800679a:	6083      	str	r3, [r0, #8]
 800679c:	8181      	strh	r1, [r0, #12]
 800679e:	6643      	str	r3, [r0, #100]	@ 0x64
 80067a0:	81c2      	strh	r2, [r0, #14]
 80067a2:	6183      	str	r3, [r0, #24]
 80067a4:	4619      	mov	r1, r3
 80067a6:	2208      	movs	r2, #8
 80067a8:	305c      	adds	r0, #92	@ 0x5c
 80067aa:	f000 fa1b 	bl	8006be4 <memset>
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x58>)
 80067b0:	6224      	str	r4, [r4, #32]
 80067b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80067b4:	4b0c      	ldr	r3, [pc, #48]	@ (80067e8 <std+0x5c>)
 80067b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067b8:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <std+0x60>)
 80067ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067bc:	4b0c      	ldr	r3, [pc, #48]	@ (80067f0 <std+0x64>)
 80067be:	6323      	str	r3, [r4, #48]	@ 0x30
 80067c0:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <std+0x68>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d006      	beq.n	80067d4 <std+0x48>
 80067c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ca:	4294      	cmp	r4, r2
 80067cc:	d002      	beq.n	80067d4 <std+0x48>
 80067ce:	33d0      	adds	r3, #208	@ 0xd0
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d105      	bne.n	80067e0 <std+0x54>
 80067d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f000 ba7a 	b.w	8006cd4 <__retarget_lock_init_recursive>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	bf00      	nop
 80067e4:	08006a35 	.word	0x08006a35
 80067e8:	08006a57 	.word	0x08006a57
 80067ec:	08006a8f 	.word	0x08006a8f
 80067f0:	08006ab3 	.word	0x08006ab3
 80067f4:	2000136c 	.word	0x2000136c

080067f8 <stdio_exit_handler>:
 80067f8:	4a02      	ldr	r2, [pc, #8]	@ (8006804 <stdio_exit_handler+0xc>)
 80067fa:	4903      	ldr	r1, [pc, #12]	@ (8006808 <stdio_exit_handler+0x10>)
 80067fc:	4803      	ldr	r0, [pc, #12]	@ (800680c <stdio_exit_handler+0x14>)
 80067fe:	f000 b869 	b.w	80068d4 <_fwalk_sglue>
 8006802:	bf00      	nop
 8006804:	20000024 	.word	0x20000024
 8006808:	0800759d 	.word	0x0800759d
 800680c:	20000034 	.word	0x20000034

08006810 <cleanup_stdio>:
 8006810:	6841      	ldr	r1, [r0, #4]
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <cleanup_stdio+0x34>)
 8006814:	b510      	push	{r4, lr}
 8006816:	4299      	cmp	r1, r3
 8006818:	4604      	mov	r4, r0
 800681a:	d001      	beq.n	8006820 <cleanup_stdio+0x10>
 800681c:	f000 febe 	bl	800759c <_fflush_r>
 8006820:	68a1      	ldr	r1, [r4, #8]
 8006822:	4b09      	ldr	r3, [pc, #36]	@ (8006848 <cleanup_stdio+0x38>)
 8006824:	4299      	cmp	r1, r3
 8006826:	d002      	beq.n	800682e <cleanup_stdio+0x1e>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 feb7 	bl	800759c <_fflush_r>
 800682e:	68e1      	ldr	r1, [r4, #12]
 8006830:	4b06      	ldr	r3, [pc, #24]	@ (800684c <cleanup_stdio+0x3c>)
 8006832:	4299      	cmp	r1, r3
 8006834:	d004      	beq.n	8006840 <cleanup_stdio+0x30>
 8006836:	4620      	mov	r0, r4
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f000 beae 	b.w	800759c <_fflush_r>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	2000136c 	.word	0x2000136c
 8006848:	200013d4 	.word	0x200013d4
 800684c:	2000143c 	.word	0x2000143c

08006850 <global_stdio_init.part.0>:
 8006850:	b510      	push	{r4, lr}
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <global_stdio_init.part.0+0x30>)
 8006854:	4c0b      	ldr	r4, [pc, #44]	@ (8006884 <global_stdio_init.part.0+0x34>)
 8006856:	4a0c      	ldr	r2, [pc, #48]	@ (8006888 <global_stdio_init.part.0+0x38>)
 8006858:	4620      	mov	r0, r4
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	2104      	movs	r1, #4
 800685e:	2200      	movs	r2, #0
 8006860:	f7ff ff94 	bl	800678c <std>
 8006864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006868:	2201      	movs	r2, #1
 800686a:	2109      	movs	r1, #9
 800686c:	f7ff ff8e 	bl	800678c <std>
 8006870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006874:	2202      	movs	r2, #2
 8006876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687a:	2112      	movs	r1, #18
 800687c:	f7ff bf86 	b.w	800678c <std>
 8006880:	200014a4 	.word	0x200014a4
 8006884:	2000136c 	.word	0x2000136c
 8006888:	080067f9 	.word	0x080067f9

0800688c <__sfp_lock_acquire>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__sfp_lock_acquire+0x8>)
 800688e:	f000 ba22 	b.w	8006cd6 <__retarget_lock_acquire_recursive>
 8006892:	bf00      	nop
 8006894:	200014ad 	.word	0x200014ad

08006898 <__sfp_lock_release>:
 8006898:	4801      	ldr	r0, [pc, #4]	@ (80068a0 <__sfp_lock_release+0x8>)
 800689a:	f000 ba1d 	b.w	8006cd8 <__retarget_lock_release_recursive>
 800689e:	bf00      	nop
 80068a0:	200014ad 	.word	0x200014ad

080068a4 <__sinit>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	4604      	mov	r4, r0
 80068a8:	f7ff fff0 	bl	800688c <__sfp_lock_acquire>
 80068ac:	6a23      	ldr	r3, [r4, #32]
 80068ae:	b11b      	cbz	r3, 80068b8 <__sinit+0x14>
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f7ff bff0 	b.w	8006898 <__sfp_lock_release>
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <__sinit+0x28>)
 80068ba:	6223      	str	r3, [r4, #32]
 80068bc:	4b04      	ldr	r3, [pc, #16]	@ (80068d0 <__sinit+0x2c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f5      	bne.n	80068b0 <__sinit+0xc>
 80068c4:	f7ff ffc4 	bl	8006850 <global_stdio_init.part.0>
 80068c8:	e7f2      	b.n	80068b0 <__sinit+0xc>
 80068ca:	bf00      	nop
 80068cc:	08006811 	.word	0x08006811
 80068d0:	200014a4 	.word	0x200014a4

080068d4 <_fwalk_sglue>:
 80068d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d8:	4607      	mov	r7, r0
 80068da:	4688      	mov	r8, r1
 80068dc:	4614      	mov	r4, r2
 80068de:	2600      	movs	r6, #0
 80068e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068e4:	f1b9 0901 	subs.w	r9, r9, #1
 80068e8:	d505      	bpl.n	80068f6 <_fwalk_sglue+0x22>
 80068ea:	6824      	ldr	r4, [r4, #0]
 80068ec:	2c00      	cmp	r4, #0
 80068ee:	d1f7      	bne.n	80068e0 <_fwalk_sglue+0xc>
 80068f0:	4630      	mov	r0, r6
 80068f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f6:	89ab      	ldrh	r3, [r5, #12]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d907      	bls.n	800690c <_fwalk_sglue+0x38>
 80068fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006900:	3301      	adds	r3, #1
 8006902:	d003      	beq.n	800690c <_fwalk_sglue+0x38>
 8006904:	4629      	mov	r1, r5
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	4306      	orrs	r6, r0
 800690c:	3568      	adds	r5, #104	@ 0x68
 800690e:	e7e9      	b.n	80068e4 <_fwalk_sglue+0x10>

08006910 <_puts_r>:
 8006910:	6a03      	ldr	r3, [r0, #32]
 8006912:	b570      	push	{r4, r5, r6, lr}
 8006914:	4605      	mov	r5, r0
 8006916:	460e      	mov	r6, r1
 8006918:	6884      	ldr	r4, [r0, #8]
 800691a:	b90b      	cbnz	r3, 8006920 <_puts_r+0x10>
 800691c:	f7ff ffc2 	bl	80068a4 <__sinit>
 8006920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006922:	07db      	lsls	r3, r3, #31
 8006924:	d405      	bmi.n	8006932 <_puts_r+0x22>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	0598      	lsls	r0, r3, #22
 800692a:	d402      	bmi.n	8006932 <_puts_r+0x22>
 800692c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800692e:	f000 f9d2 	bl	8006cd6 <__retarget_lock_acquire_recursive>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	0719      	lsls	r1, r3, #28
 8006936:	d502      	bpl.n	800693e <_puts_r+0x2e>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d135      	bne.n	80069aa <_puts_r+0x9a>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f8f9 	bl	8006b38 <__swsetup_r>
 8006946:	b380      	cbz	r0, 80069aa <_puts_r+0x9a>
 8006948:	f04f 35ff 	mov.w	r5, #4294967295
 800694c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d405      	bmi.n	800695e <_puts_r+0x4e>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	059b      	lsls	r3, r3, #22
 8006956:	d402      	bmi.n	800695e <_puts_r+0x4e>
 8006958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800695a:	f000 f9bd 	bl	8006cd8 <__retarget_lock_release_recursive>
 800695e:	4628      	mov	r0, r5
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	2b00      	cmp	r3, #0
 8006964:	da04      	bge.n	8006970 <_puts_r+0x60>
 8006966:	69a2      	ldr	r2, [r4, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	dc17      	bgt.n	800699c <_puts_r+0x8c>
 800696c:	290a      	cmp	r1, #10
 800696e:	d015      	beq.n	800699c <_puts_r+0x8c>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	7019      	strb	r1, [r3, #0]
 8006978:	68a3      	ldr	r3, [r4, #8]
 800697a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800697e:	3b01      	subs	r3, #1
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	2900      	cmp	r1, #0
 8006984:	d1ed      	bne.n	8006962 <_puts_r+0x52>
 8006986:	2b00      	cmp	r3, #0
 8006988:	da11      	bge.n	80069ae <_puts_r+0x9e>
 800698a:	4622      	mov	r2, r4
 800698c:	210a      	movs	r1, #10
 800698e:	4628      	mov	r0, r5
 8006990:	f000 f893 	bl	8006aba <__swbuf_r>
 8006994:	3001      	adds	r0, #1
 8006996:	d0d7      	beq.n	8006948 <_puts_r+0x38>
 8006998:	250a      	movs	r5, #10
 800699a:	e7d7      	b.n	800694c <_puts_r+0x3c>
 800699c:	4622      	mov	r2, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f88b 	bl	8006aba <__swbuf_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1e7      	bne.n	8006978 <_puts_r+0x68>
 80069a8:	e7ce      	b.n	8006948 <_puts_r+0x38>
 80069aa:	3e01      	subs	r6, #1
 80069ac:	e7e4      	b.n	8006978 <_puts_r+0x68>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	220a      	movs	r2, #10
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e7ee      	b.n	8006998 <_puts_r+0x88>
	...

080069bc <puts>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	@ (80069c8 <puts+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f7ff bfa5 	b.w	8006910 <_puts_r>
 80069c6:	bf00      	nop
 80069c8:	20000030 	.word	0x20000030

080069cc <sniprintf>:
 80069cc:	b40c      	push	{r2, r3}
 80069ce:	b530      	push	{r4, r5, lr}
 80069d0:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <sniprintf+0x64>)
 80069d2:	1e0c      	subs	r4, r1, #0
 80069d4:	681d      	ldr	r5, [r3, #0]
 80069d6:	b09d      	sub	sp, #116	@ 0x74
 80069d8:	da08      	bge.n	80069ec <sniprintf+0x20>
 80069da:	238b      	movs	r3, #139	@ 0x8b
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	b01d      	add	sp, #116	@ 0x74
 80069e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069e8:	b002      	add	sp, #8
 80069ea:	4770      	bx	lr
 80069ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069f4:	bf0c      	ite	eq
 80069f6:	4623      	moveq	r3, r4
 80069f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	9307      	str	r3, [sp, #28]
 8006a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a04:	9002      	str	r0, [sp, #8]
 8006a06:	9006      	str	r0, [sp, #24]
 8006a08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	ab21      	add	r3, sp, #132	@ 0x84
 8006a10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a12:	a902      	add	r1, sp, #8
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	f000 fab3 	bl	8006f80 <_svfiprintf_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	bfbc      	itt	lt
 8006a1e:	238b      	movlt	r3, #139	@ 0x8b
 8006a20:	602b      	strlt	r3, [r5, #0]
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	d0dd      	beq.n	80069e2 <sniprintf+0x16>
 8006a26:	2200      	movs	r2, #0
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e7d9      	b.n	80069e2 <sniprintf+0x16>
 8006a2e:	bf00      	nop
 8006a30:	20000030 	.word	0x20000030

08006a34 <__sread>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	460c      	mov	r4, r1
 8006a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3c:	f000 f8fc 	bl	8006c38 <_read_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	bfab      	itete	ge
 8006a44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a46:	89a3      	ldrhlt	r3, [r4, #12]
 8006a48:	181b      	addge	r3, r3, r0
 8006a4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a4e:	bfac      	ite	ge
 8006a50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a52:	81a3      	strhlt	r3, [r4, #12]
 8006a54:	bd10      	pop	{r4, pc}

08006a56 <__swrite>:
 8006a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5a:	461f      	mov	r7, r3
 8006a5c:	898b      	ldrh	r3, [r1, #12]
 8006a5e:	4605      	mov	r5, r0
 8006a60:	05db      	lsls	r3, r3, #23
 8006a62:	460c      	mov	r4, r1
 8006a64:	4616      	mov	r6, r2
 8006a66:	d505      	bpl.n	8006a74 <__swrite+0x1e>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a70:	f000 f8d0 	bl	8006c14 <_lseek_r>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	4632      	mov	r2, r6
 8006a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	4628      	mov	r0, r5
 8006a80:	463b      	mov	r3, r7
 8006a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	f000 b8e7 	b.w	8006c5c <_write_r>

08006a8e <__sseek>:
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	460c      	mov	r4, r1
 8006a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a96:	f000 f8bd 	bl	8006c14 <_lseek_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	bf15      	itete	ne
 8006aa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006aa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aaa:	81a3      	strheq	r3, [r4, #12]
 8006aac:	bf18      	it	ne
 8006aae:	81a3      	strhne	r3, [r4, #12]
 8006ab0:	bd10      	pop	{r4, pc}

08006ab2 <__sclose>:
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 b89d 	b.w	8006bf4 <_close_r>

08006aba <__swbuf_r>:
 8006aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abc:	460e      	mov	r6, r1
 8006abe:	4614      	mov	r4, r2
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	b118      	cbz	r0, 8006acc <__swbuf_r+0x12>
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b90b      	cbnz	r3, 8006acc <__swbuf_r+0x12>
 8006ac8:	f7ff feec 	bl	80068a4 <__sinit>
 8006acc:	69a3      	ldr	r3, [r4, #24]
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	071a      	lsls	r2, r3, #28
 8006ad4:	d501      	bpl.n	8006ada <__swbuf_r+0x20>
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	b943      	cbnz	r3, 8006aec <__swbuf_r+0x32>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f82b 	bl	8006b38 <__swsetup_r>
 8006ae2:	b118      	cbz	r0, 8006aec <__swbuf_r+0x32>
 8006ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ae8:	4638      	mov	r0, r7
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	6922      	ldr	r2, [r4, #16]
 8006af0:	b2f6      	uxtb	r6, r6
 8006af2:	1a98      	subs	r0, r3, r2
 8006af4:	6963      	ldr	r3, [r4, #20]
 8006af6:	4637      	mov	r7, r6
 8006af8:	4283      	cmp	r3, r0
 8006afa:	dc05      	bgt.n	8006b08 <__swbuf_r+0x4e>
 8006afc:	4621      	mov	r1, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fd4c 	bl	800759c <_fflush_r>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d1ed      	bne.n	8006ae4 <__swbuf_r+0x2a>
 8006b08:	68a3      	ldr	r3, [r4, #8]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	60a3      	str	r3, [r4, #8]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	6022      	str	r2, [r4, #0]
 8006b14:	701e      	strb	r6, [r3, #0]
 8006b16:	6962      	ldr	r2, [r4, #20]
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d004      	beq.n	8006b28 <__swbuf_r+0x6e>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	07db      	lsls	r3, r3, #31
 8006b22:	d5e1      	bpl.n	8006ae8 <__swbuf_r+0x2e>
 8006b24:	2e0a      	cmp	r6, #10
 8006b26:	d1df      	bne.n	8006ae8 <__swbuf_r+0x2e>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fd36 	bl	800759c <_fflush_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d0d9      	beq.n	8006ae8 <__swbuf_r+0x2e>
 8006b34:	e7d6      	b.n	8006ae4 <__swbuf_r+0x2a>
	...

08006b38 <__swsetup_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4b29      	ldr	r3, [pc, #164]	@ (8006be0 <__swsetup_r+0xa8>)
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	460c      	mov	r4, r1
 8006b42:	b118      	cbz	r0, 8006b4c <__swsetup_r+0x14>
 8006b44:	6a03      	ldr	r3, [r0, #32]
 8006b46:	b90b      	cbnz	r3, 8006b4c <__swsetup_r+0x14>
 8006b48:	f7ff feac 	bl	80068a4 <__sinit>
 8006b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b50:	0719      	lsls	r1, r3, #28
 8006b52:	d422      	bmi.n	8006b9a <__swsetup_r+0x62>
 8006b54:	06da      	lsls	r2, r3, #27
 8006b56:	d407      	bmi.n	8006b68 <__swsetup_r+0x30>
 8006b58:	2209      	movs	r2, #9
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e033      	b.n	8006bd0 <__swsetup_r+0x98>
 8006b68:	0758      	lsls	r0, r3, #29
 8006b6a:	d512      	bpl.n	8006b92 <__swsetup_r+0x5a>
 8006b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b6e:	b141      	cbz	r1, 8006b82 <__swsetup_r+0x4a>
 8006b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b74:	4299      	cmp	r1, r3
 8006b76:	d002      	beq.n	8006b7e <__swsetup_r+0x46>
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f8af 	bl	8006cdc <_free_r>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6063      	str	r3, [r4, #4]
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	f043 0308 	orr.w	r3, r3, #8
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	b94b      	cbnz	r3, 8006bb2 <__swsetup_r+0x7a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba8:	d003      	beq.n	8006bb2 <__swsetup_r+0x7a>
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 fd42 	bl	8007636 <__smakebuf_r>
 8006bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb6:	f013 0201 	ands.w	r2, r3, #1
 8006bba:	d00a      	beq.n	8006bd2 <__swsetup_r+0x9a>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	60a2      	str	r2, [r4, #8]
 8006bc0:	6962      	ldr	r2, [r4, #20]
 8006bc2:	4252      	negs	r2, r2
 8006bc4:	61a2      	str	r2, [r4, #24]
 8006bc6:	6922      	ldr	r2, [r4, #16]
 8006bc8:	b942      	cbnz	r2, 8006bdc <__swsetup_r+0xa4>
 8006bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bce:	d1c5      	bne.n	8006b5c <__swsetup_r+0x24>
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	0799      	lsls	r1, r3, #30
 8006bd4:	bf58      	it	pl
 8006bd6:	6962      	ldrpl	r2, [r4, #20]
 8006bd8:	60a2      	str	r2, [r4, #8]
 8006bda:	e7f4      	b.n	8006bc6 <__swsetup_r+0x8e>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e7f7      	b.n	8006bd0 <__swsetup_r+0x98>
 8006be0:	20000030 	.word	0x20000030

08006be4 <memset>:
 8006be4:	4603      	mov	r3, r0
 8006be6:	4402      	add	r2, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <_close_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d05      	ldr	r5, [pc, #20]	@ (8006c10 <_close_r+0x1c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa fa87 	bl	8001112 <_close>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_close_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_close_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	200014a8 	.word	0x200014a8

08006c14 <_lseek_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4d05      	ldr	r5, [pc, #20]	@ (8006c34 <_lseek_r+0x20>)
 8006c20:	602a      	str	r2, [r5, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7fa fa99 	bl	800115a <_lseek>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_lseek_r+0x1e>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_lseek_r+0x1e>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200014a8 	.word	0x200014a8

08006c38 <_read_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	2200      	movs	r2, #0
 8006c42:	4d05      	ldr	r5, [pc, #20]	@ (8006c58 <_read_r+0x20>)
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fa fa2a 	bl	80010a0 <_read>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_read_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_read_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200014a8 	.word	0x200014a8

08006c5c <_write_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	2200      	movs	r2, #0
 8006c66:	4d05      	ldr	r5, [pc, #20]	@ (8006c7c <_write_r+0x20>)
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fa fa35 	bl	80010da <_write>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_write_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_write_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200014a8 	.word	0x200014a8

08006c80 <__errno>:
 8006c80:	4b01      	ldr	r3, [pc, #4]	@ (8006c88 <__errno+0x8>)
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000030 	.word	0x20000030

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	2600      	movs	r6, #0
 8006c90:	4d0c      	ldr	r5, [pc, #48]	@ (8006cc4 <__libc_init_array+0x38>)
 8006c92:	4c0d      	ldr	r4, [pc, #52]	@ (8006cc8 <__libc_init_array+0x3c>)
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	f000 fda6 	bl	80077ec <_init>
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4d0a      	ldr	r5, [pc, #40]	@ (8006ccc <__libc_init_array+0x40>)
 8006ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8006cd0 <__libc_init_array+0x44>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08007f14 	.word	0x08007f14
 8006cc8:	08007f14 	.word	0x08007f14
 8006ccc:	08007f14 	.word	0x08007f14
 8006cd0:	08007f18 	.word	0x08007f18

08006cd4 <__retarget_lock_init_recursive>:
 8006cd4:	4770      	bx	lr

08006cd6 <__retarget_lock_acquire_recursive>:
 8006cd6:	4770      	bx	lr

08006cd8 <__retarget_lock_release_recursive>:
 8006cd8:	4770      	bx	lr
	...

08006cdc <_free_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4605      	mov	r5, r0
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d040      	beq.n	8006d66 <_free_r+0x8a>
 8006ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce8:	1f0c      	subs	r4, r1, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfb8      	it	lt
 8006cee:	18e4      	addlt	r4, r4, r3
 8006cf0:	f000 f8de 	bl	8006eb0 <__malloc_lock>
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <_free_r+0x8c>)
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	b933      	cbnz	r3, 8006d08 <_free_r+0x2c>
 8006cfa:	6063      	str	r3, [r4, #4]
 8006cfc:	6014      	str	r4, [r2, #0]
 8006cfe:	4628      	mov	r0, r5
 8006d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d04:	f000 b8da 	b.w	8006ebc <__malloc_unlock>
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d908      	bls.n	8006d1e <_free_r+0x42>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	1821      	adds	r1, r4, r0
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf01      	itttt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	1809      	addeq	r1, r1, r0
 8006d1a:	6021      	streq	r1, [r4, #0]
 8006d1c:	e7ed      	b.n	8006cfa <_free_r+0x1e>
 8006d1e:	461a      	mov	r2, r3
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	b10b      	cbz	r3, 8006d28 <_free_r+0x4c>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d9fa      	bls.n	8006d1e <_free_r+0x42>
 8006d28:	6811      	ldr	r1, [r2, #0]
 8006d2a:	1850      	adds	r0, r2, r1
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d10b      	bne.n	8006d48 <_free_r+0x6c>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	4401      	add	r1, r0
 8006d34:	1850      	adds	r0, r2, r1
 8006d36:	4283      	cmp	r3, r0
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	d1e0      	bne.n	8006cfe <_free_r+0x22>
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4408      	add	r0, r1
 8006d42:	6010      	str	r0, [r2, #0]
 8006d44:	6053      	str	r3, [r2, #4]
 8006d46:	e7da      	b.n	8006cfe <_free_r+0x22>
 8006d48:	d902      	bls.n	8006d50 <_free_r+0x74>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	e7d6      	b.n	8006cfe <_free_r+0x22>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	1821      	adds	r1, r4, r0
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf01      	itttt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	1809      	addeq	r1, r1, r0
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6054      	str	r4, [r2, #4]
 8006d64:	e7cb      	b.n	8006cfe <_free_r+0x22>
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200014b4 	.word	0x200014b4

08006d6c <sbrk_aligned>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006dac <sbrk_aligned+0x40>)
 8006d70:	460c      	mov	r4, r1
 8006d72:	6831      	ldr	r1, [r6, #0]
 8006d74:	4605      	mov	r5, r0
 8006d76:	b911      	cbnz	r1, 8006d7e <sbrk_aligned+0x12>
 8006d78:	f000 fcd6 	bl	8007728 <_sbrk_r>
 8006d7c:	6030      	str	r0, [r6, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 fcd1 	bl	8007728 <_sbrk_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d103      	bne.n	8006d92 <sbrk_aligned+0x26>
 8006d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d8e:	4620      	mov	r0, r4
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	1cc4      	adds	r4, r0, #3
 8006d94:	f024 0403 	bic.w	r4, r4, #3
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	d0f8      	beq.n	8006d8e <sbrk_aligned+0x22>
 8006d9c:	1a21      	subs	r1, r4, r0
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fcc2 	bl	8007728 <_sbrk_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d1f2      	bne.n	8006d8e <sbrk_aligned+0x22>
 8006da8:	e7ef      	b.n	8006d8a <sbrk_aligned+0x1e>
 8006daa:	bf00      	nop
 8006dac:	200014b0 	.word	0x200014b0

08006db0 <_malloc_r>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	1ccd      	adds	r5, r1, #3
 8006db6:	f025 0503 	bic.w	r5, r5, #3
 8006dba:	3508      	adds	r5, #8
 8006dbc:	2d0c      	cmp	r5, #12
 8006dbe:	bf38      	it	cc
 8006dc0:	250c      	movcc	r5, #12
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	db01      	blt.n	8006dcc <_malloc_r+0x1c>
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d904      	bls.n	8006dd6 <_malloc_r+0x26>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006eac <_malloc_r+0xfc>
 8006dda:	f000 f869 	bl	8006eb0 <__malloc_lock>
 8006dde:	f8d8 3000 	ldr.w	r3, [r8]
 8006de2:	461c      	mov	r4, r3
 8006de4:	bb44      	cbnz	r4, 8006e38 <_malloc_r+0x88>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff ffbf 	bl	8006d6c <sbrk_aligned>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	4604      	mov	r4, r0
 8006df2:	d158      	bne.n	8006ea6 <_malloc_r+0xf6>
 8006df4:	f8d8 4000 	ldr.w	r4, [r8]
 8006df8:	4627      	mov	r7, r4
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	d143      	bne.n	8006e86 <_malloc_r+0xd6>
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	d04b      	beq.n	8006e9a <_malloc_r+0xea>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	4639      	mov	r1, r7
 8006e06:	4630      	mov	r0, r6
 8006e08:	eb04 0903 	add.w	r9, r4, r3
 8006e0c:	f000 fc8c 	bl	8007728 <_sbrk_r>
 8006e10:	4581      	cmp	r9, r0
 8006e12:	d142      	bne.n	8006e9a <_malloc_r+0xea>
 8006e14:	6821      	ldr	r1, [r4, #0]
 8006e16:	4630      	mov	r0, r6
 8006e18:	1a6d      	subs	r5, r5, r1
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f7ff ffa6 	bl	8006d6c <sbrk_aligned>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d03a      	beq.n	8006e9a <_malloc_r+0xea>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	442b      	add	r3, r5
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	bb62      	cbnz	r2, 8006e8c <_malloc_r+0xdc>
 8006e32:	f8c8 7000 	str.w	r7, [r8]
 8006e36:	e00f      	b.n	8006e58 <_malloc_r+0xa8>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	1b52      	subs	r2, r2, r5
 8006e3c:	d420      	bmi.n	8006e80 <_malloc_r+0xd0>
 8006e3e:	2a0b      	cmp	r2, #11
 8006e40:	d917      	bls.n	8006e72 <_malloc_r+0xc2>
 8006e42:	1961      	adds	r1, r4, r5
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	6025      	str	r5, [r4, #0]
 8006e48:	bf18      	it	ne
 8006e4a:	6059      	strne	r1, [r3, #4]
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	bf08      	it	eq
 8006e50:	f8c8 1000 	streq.w	r1, [r8]
 8006e54:	5162      	str	r2, [r4, r5]
 8006e56:	604b      	str	r3, [r1, #4]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f000 f82f 	bl	8006ebc <__malloc_unlock>
 8006e5e:	f104 000b 	add.w	r0, r4, #11
 8006e62:	1d23      	adds	r3, r4, #4
 8006e64:	f020 0007 	bic.w	r0, r0, #7
 8006e68:	1ac2      	subs	r2, r0, r3
 8006e6a:	bf1c      	itt	ne
 8006e6c:	1a1b      	subne	r3, r3, r0
 8006e6e:	50a3      	strne	r3, [r4, r2]
 8006e70:	e7af      	b.n	8006dd2 <_malloc_r+0x22>
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	bf0c      	ite	eq
 8006e78:	f8c8 2000 	streq.w	r2, [r8]
 8006e7c:	605a      	strne	r2, [r3, #4]
 8006e7e:	e7eb      	b.n	8006e58 <_malloc_r+0xa8>
 8006e80:	4623      	mov	r3, r4
 8006e82:	6864      	ldr	r4, [r4, #4]
 8006e84:	e7ae      	b.n	8006de4 <_malloc_r+0x34>
 8006e86:	463c      	mov	r4, r7
 8006e88:	687f      	ldr	r7, [r7, #4]
 8006e8a:	e7b6      	b.n	8006dfa <_malloc_r+0x4a>
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	d1fb      	bne.n	8006e8c <_malloc_r+0xdc>
 8006e94:	2300      	movs	r3, #0
 8006e96:	6053      	str	r3, [r2, #4]
 8006e98:	e7de      	b.n	8006e58 <_malloc_r+0xa8>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	f000 f80c 	bl	8006ebc <__malloc_unlock>
 8006ea4:	e794      	b.n	8006dd0 <_malloc_r+0x20>
 8006ea6:	6005      	str	r5, [r0, #0]
 8006ea8:	e7d6      	b.n	8006e58 <_malloc_r+0xa8>
 8006eaa:	bf00      	nop
 8006eac:	200014b4 	.word	0x200014b4

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	@ (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f7ff bf10 	b.w	8006cd6 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200014ac 	.word	0x200014ac

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f7ff bf0b 	b.w	8006cd8 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200014ac 	.word	0x200014ac

08006ec8 <__ssputs_r>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	461f      	mov	r7, r3
 8006ece:	688e      	ldr	r6, [r1, #8]
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	42be      	cmp	r6, r7
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	4690      	mov	r8, r2
 8006ed8:	680b      	ldr	r3, [r1, #0]
 8006eda:	d82d      	bhi.n	8006f38 <__ssputs_r+0x70>
 8006edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ee4:	d026      	beq.n	8006f34 <__ssputs_r+0x6c>
 8006ee6:	6965      	ldr	r5, [r4, #20]
 8006ee8:	6909      	ldr	r1, [r1, #16]
 8006eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eee:	eba3 0901 	sub.w	r9, r3, r1
 8006ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ef6:	1c7b      	adds	r3, r7, #1
 8006ef8:	444b      	add	r3, r9
 8006efa:	106d      	asrs	r5, r5, #1
 8006efc:	429d      	cmp	r5, r3
 8006efe:	bf38      	it	cc
 8006f00:	461d      	movcc	r5, r3
 8006f02:	0553      	lsls	r3, r2, #21
 8006f04:	d527      	bpl.n	8006f56 <__ssputs_r+0x8e>
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7ff ff52 	bl	8006db0 <_malloc_r>
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	b360      	cbz	r0, 8006f6a <__ssputs_r+0xa2>
 8006f10:	464a      	mov	r2, r9
 8006f12:	6921      	ldr	r1, [r4, #16]
 8006f14:	f000 fc26 	bl	8007764 <memcpy>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	6126      	str	r6, [r4, #16]
 8006f26:	444e      	add	r6, r9
 8006f28:	6026      	str	r6, [r4, #0]
 8006f2a:	463e      	mov	r6, r7
 8006f2c:	6165      	str	r5, [r4, #20]
 8006f2e:	eba5 0509 	sub.w	r5, r5, r9
 8006f32:	60a5      	str	r5, [r4, #8]
 8006f34:	42be      	cmp	r6, r7
 8006f36:	d900      	bls.n	8006f3a <__ssputs_r+0x72>
 8006f38:	463e      	mov	r6, r7
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	f000 fbb5 	bl	80076ae <memmove>
 8006f44:	2000      	movs	r0, #0
 8006f46:	68a3      	ldr	r3, [r4, #8]
 8006f48:	1b9b      	subs	r3, r3, r6
 8006f4a:	60a3      	str	r3, [r4, #8]
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	4433      	add	r3, r6
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f56:	462a      	mov	r2, r5
 8006f58:	f000 fc12 	bl	8007780 <_realloc_r>
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d1e0      	bne.n	8006f24 <__ssputs_r+0x5c>
 8006f62:	4650      	mov	r0, sl
 8006f64:	6921      	ldr	r1, [r4, #16]
 8006f66:	f7ff feb9 	bl	8006cdc <_free_r>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	f8ca 3000 	str.w	r3, [sl]
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	e7e9      	b.n	8006f52 <__ssputs_r+0x8a>
	...

08006f80 <_svfiprintf_r>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	4698      	mov	r8, r3
 8006f86:	898b      	ldrh	r3, [r1, #12]
 8006f88:	4607      	mov	r7, r0
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	4614      	mov	r4, r2
 8006f90:	b09d      	sub	sp, #116	@ 0x74
 8006f92:	d510      	bpl.n	8006fb6 <_svfiprintf_r+0x36>
 8006f94:	690b      	ldr	r3, [r1, #16]
 8006f96:	b973      	cbnz	r3, 8006fb6 <_svfiprintf_r+0x36>
 8006f98:	2140      	movs	r1, #64	@ 0x40
 8006f9a:	f7ff ff09 	bl	8006db0 <_malloc_r>
 8006f9e:	6028      	str	r0, [r5, #0]
 8006fa0:	6128      	str	r0, [r5, #16]
 8006fa2:	b930      	cbnz	r0, 8006fb2 <_svfiprintf_r+0x32>
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	b01d      	add	sp, #116	@ 0x74
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb2:	2340      	movs	r3, #64	@ 0x40
 8006fb4:	616b      	str	r3, [r5, #20]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fba:	2320      	movs	r3, #32
 8006fbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fc0:	2330      	movs	r3, #48	@ 0x30
 8006fc2:	f04f 0901 	mov.w	r9, #1
 8006fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007164 <_svfiprintf_r+0x1e4>
 8006fce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	469a      	mov	sl, r3
 8006fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fda:	b10a      	cbz	r2, 8006fe0 <_svfiprintf_r+0x60>
 8006fdc:	2a25      	cmp	r2, #37	@ 0x25
 8006fde:	d1f9      	bne.n	8006fd4 <_svfiprintf_r+0x54>
 8006fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8006fe4:	d00b      	beq.n	8006ffe <_svfiprintf_r+0x7e>
 8006fe6:	465b      	mov	r3, fp
 8006fe8:	4622      	mov	r2, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	4638      	mov	r0, r7
 8006fee:	f7ff ff6b 	bl	8006ec8 <__ssputs_r>
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f000 80a7 	beq.w	8007146 <_svfiprintf_r+0x1c6>
 8006ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ffa:	445a      	add	r2, fp
 8006ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 809f 	beq.w	8007146 <_svfiprintf_r+0x1c6>
 8007008:	2300      	movs	r3, #0
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007012:	f10a 0a01 	add.w	sl, sl, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	9307      	str	r3, [sp, #28]
 800701a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800701e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007020:	4654      	mov	r4, sl
 8007022:	2205      	movs	r2, #5
 8007024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007028:	484e      	ldr	r0, [pc, #312]	@ (8007164 <_svfiprintf_r+0x1e4>)
 800702a:	f000 fb8d 	bl	8007748 <memchr>
 800702e:	9a04      	ldr	r2, [sp, #16]
 8007030:	b9d8      	cbnz	r0, 800706a <_svfiprintf_r+0xea>
 8007032:	06d0      	lsls	r0, r2, #27
 8007034:	bf44      	itt	mi
 8007036:	2320      	movmi	r3, #32
 8007038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800703c:	0711      	lsls	r1, r2, #28
 800703e:	bf44      	itt	mi
 8007040:	232b      	movmi	r3, #43	@ 0x2b
 8007042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007046:	f89a 3000 	ldrb.w	r3, [sl]
 800704a:	2b2a      	cmp	r3, #42	@ 0x2a
 800704c:	d015      	beq.n	800707a <_svfiprintf_r+0xfa>
 800704e:	4654      	mov	r4, sl
 8007050:	2000      	movs	r0, #0
 8007052:	f04f 0c0a 	mov.w	ip, #10
 8007056:	9a07      	ldr	r2, [sp, #28]
 8007058:	4621      	mov	r1, r4
 800705a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800705e:	3b30      	subs	r3, #48	@ 0x30
 8007060:	2b09      	cmp	r3, #9
 8007062:	d94b      	bls.n	80070fc <_svfiprintf_r+0x17c>
 8007064:	b1b0      	cbz	r0, 8007094 <_svfiprintf_r+0x114>
 8007066:	9207      	str	r2, [sp, #28]
 8007068:	e014      	b.n	8007094 <_svfiprintf_r+0x114>
 800706a:	eba0 0308 	sub.w	r3, r0, r8
 800706e:	fa09 f303 	lsl.w	r3, r9, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	46a2      	mov	sl, r4
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	e7d2      	b.n	8007020 <_svfiprintf_r+0xa0>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	1d19      	adds	r1, r3, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	9103      	str	r1, [sp, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bfbb      	ittet	lt
 8007086:	425b      	neglt	r3, r3
 8007088:	f042 0202 	orrlt.w	r2, r2, #2
 800708c:	9307      	strge	r3, [sp, #28]
 800708e:	9307      	strlt	r3, [sp, #28]
 8007090:	bfb8      	it	lt
 8007092:	9204      	strlt	r2, [sp, #16]
 8007094:	7823      	ldrb	r3, [r4, #0]
 8007096:	2b2e      	cmp	r3, #46	@ 0x2e
 8007098:	d10a      	bne.n	80070b0 <_svfiprintf_r+0x130>
 800709a:	7863      	ldrb	r3, [r4, #1]
 800709c:	2b2a      	cmp	r3, #42	@ 0x2a
 800709e:	d132      	bne.n	8007106 <_svfiprintf_r+0x186>
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	3402      	adds	r4, #2
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	9203      	str	r2, [sp, #12]
 80070aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070ae:	9305      	str	r3, [sp, #20]
 80070b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007168 <_svfiprintf_r+0x1e8>
 80070b4:	2203      	movs	r2, #3
 80070b6:	4650      	mov	r0, sl
 80070b8:	7821      	ldrb	r1, [r4, #0]
 80070ba:	f000 fb45 	bl	8007748 <memchr>
 80070be:	b138      	cbz	r0, 80070d0 <_svfiprintf_r+0x150>
 80070c0:	2240      	movs	r2, #64	@ 0x40
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	eba0 000a 	sub.w	r0, r0, sl
 80070c8:	4082      	lsls	r2, r0
 80070ca:	4313      	orrs	r3, r2
 80070cc:	3401      	adds	r4, #1
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d4:	2206      	movs	r2, #6
 80070d6:	4825      	ldr	r0, [pc, #148]	@ (800716c <_svfiprintf_r+0x1ec>)
 80070d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070dc:	f000 fb34 	bl	8007748 <memchr>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d036      	beq.n	8007152 <_svfiprintf_r+0x1d2>
 80070e4:	4b22      	ldr	r3, [pc, #136]	@ (8007170 <_svfiprintf_r+0x1f0>)
 80070e6:	bb1b      	cbnz	r3, 8007130 <_svfiprintf_r+0x1b0>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	3307      	adds	r3, #7
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	3308      	adds	r3, #8
 80070f2:	9303      	str	r3, [sp, #12]
 80070f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f6:	4433      	add	r3, r6
 80070f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fa:	e76a      	b.n	8006fd2 <_svfiprintf_r+0x52>
 80070fc:	460c      	mov	r4, r1
 80070fe:	2001      	movs	r0, #1
 8007100:	fb0c 3202 	mla	r2, ip, r2, r3
 8007104:	e7a8      	b.n	8007058 <_svfiprintf_r+0xd8>
 8007106:	2300      	movs	r3, #0
 8007108:	f04f 0c0a 	mov.w	ip, #10
 800710c:	4619      	mov	r1, r3
 800710e:	3401      	adds	r4, #1
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	4620      	mov	r0, r4
 8007114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007118:	3a30      	subs	r2, #48	@ 0x30
 800711a:	2a09      	cmp	r2, #9
 800711c:	d903      	bls.n	8007126 <_svfiprintf_r+0x1a6>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0c6      	beq.n	80070b0 <_svfiprintf_r+0x130>
 8007122:	9105      	str	r1, [sp, #20]
 8007124:	e7c4      	b.n	80070b0 <_svfiprintf_r+0x130>
 8007126:	4604      	mov	r4, r0
 8007128:	2301      	movs	r3, #1
 800712a:	fb0c 2101 	mla	r1, ip, r1, r2
 800712e:	e7f0      	b.n	8007112 <_svfiprintf_r+0x192>
 8007130:	ab03      	add	r3, sp, #12
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	462a      	mov	r2, r5
 8007136:	4638      	mov	r0, r7
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <_svfiprintf_r+0x1f4>)
 800713a:	a904      	add	r1, sp, #16
 800713c:	f3af 8000 	nop.w
 8007140:	1c42      	adds	r2, r0, #1
 8007142:	4606      	mov	r6, r0
 8007144:	d1d6      	bne.n	80070f4 <_svfiprintf_r+0x174>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	065b      	lsls	r3, r3, #25
 800714a:	f53f af2d 	bmi.w	8006fa8 <_svfiprintf_r+0x28>
 800714e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007150:	e72c      	b.n	8006fac <_svfiprintf_r+0x2c>
 8007152:	ab03      	add	r3, sp, #12
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	462a      	mov	r2, r5
 8007158:	4638      	mov	r0, r7
 800715a:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <_svfiprintf_r+0x1f4>)
 800715c:	a904      	add	r1, sp, #16
 800715e:	f000 f87d 	bl	800725c <_printf_i>
 8007162:	e7ed      	b.n	8007140 <_svfiprintf_r+0x1c0>
 8007164:	08007ee0 	.word	0x08007ee0
 8007168:	08007ee6 	.word	0x08007ee6
 800716c:	08007eea 	.word	0x08007eea
 8007170:	00000000 	.word	0x00000000
 8007174:	08006ec9 	.word	0x08006ec9

08007178 <_printf_common>:
 8007178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	4616      	mov	r6, r2
 800717e:	4698      	mov	r8, r3
 8007180:	688a      	ldr	r2, [r1, #8]
 8007182:	690b      	ldr	r3, [r1, #16]
 8007184:	4607      	mov	r7, r0
 8007186:	4293      	cmp	r3, r2
 8007188:	bfb8      	it	lt
 800718a:	4613      	movlt	r3, r2
 800718c:	6033      	str	r3, [r6, #0]
 800718e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007192:	460c      	mov	r4, r1
 8007194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007198:	b10a      	cbz	r2, 800719e <_printf_common+0x26>
 800719a:	3301      	adds	r3, #1
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	0699      	lsls	r1, r3, #26
 80071a2:	bf42      	ittt	mi
 80071a4:	6833      	ldrmi	r3, [r6, #0]
 80071a6:	3302      	addmi	r3, #2
 80071a8:	6033      	strmi	r3, [r6, #0]
 80071aa:	6825      	ldr	r5, [r4, #0]
 80071ac:	f015 0506 	ands.w	r5, r5, #6
 80071b0:	d106      	bne.n	80071c0 <_printf_common+0x48>
 80071b2:	f104 0a19 	add.w	sl, r4, #25
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	6832      	ldr	r2, [r6, #0]
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	42ab      	cmp	r3, r5
 80071be:	dc2b      	bgt.n	8007218 <_printf_common+0xa0>
 80071c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071c4:	6822      	ldr	r2, [r4, #0]
 80071c6:	3b00      	subs	r3, #0
 80071c8:	bf18      	it	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	0692      	lsls	r2, r2, #26
 80071ce:	d430      	bmi.n	8007232 <_printf_common+0xba>
 80071d0:	4641      	mov	r1, r8
 80071d2:	4638      	mov	r0, r7
 80071d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071d8:	47c8      	blx	r9
 80071da:	3001      	adds	r0, #1
 80071dc:	d023      	beq.n	8007226 <_printf_common+0xae>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	6922      	ldr	r2, [r4, #16]
 80071e2:	f003 0306 	and.w	r3, r3, #6
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	bf14      	ite	ne
 80071ea:	2500      	movne	r5, #0
 80071ec:	6833      	ldreq	r3, [r6, #0]
 80071ee:	f04f 0600 	mov.w	r6, #0
 80071f2:	bf08      	it	eq
 80071f4:	68e5      	ldreq	r5, [r4, #12]
 80071f6:	f104 041a 	add.w	r4, r4, #26
 80071fa:	bf08      	it	eq
 80071fc:	1aed      	subeq	r5, r5, r3
 80071fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007202:	bf08      	it	eq
 8007204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007208:	4293      	cmp	r3, r2
 800720a:	bfc4      	itt	gt
 800720c:	1a9b      	subgt	r3, r3, r2
 800720e:	18ed      	addgt	r5, r5, r3
 8007210:	42b5      	cmp	r5, r6
 8007212:	d11a      	bne.n	800724a <_printf_common+0xd2>
 8007214:	2000      	movs	r0, #0
 8007216:	e008      	b.n	800722a <_printf_common+0xb2>
 8007218:	2301      	movs	r3, #1
 800721a:	4652      	mov	r2, sl
 800721c:	4641      	mov	r1, r8
 800721e:	4638      	mov	r0, r7
 8007220:	47c8      	blx	r9
 8007222:	3001      	adds	r0, #1
 8007224:	d103      	bne.n	800722e <_printf_common+0xb6>
 8007226:	f04f 30ff 	mov.w	r0, #4294967295
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722e:	3501      	adds	r5, #1
 8007230:	e7c1      	b.n	80071b6 <_printf_common+0x3e>
 8007232:	2030      	movs	r0, #48	@ 0x30
 8007234:	18e1      	adds	r1, r4, r3
 8007236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007240:	4422      	add	r2, r4
 8007242:	3302      	adds	r3, #2
 8007244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007248:	e7c2      	b.n	80071d0 <_printf_common+0x58>
 800724a:	2301      	movs	r3, #1
 800724c:	4622      	mov	r2, r4
 800724e:	4641      	mov	r1, r8
 8007250:	4638      	mov	r0, r7
 8007252:	47c8      	blx	r9
 8007254:	3001      	adds	r0, #1
 8007256:	d0e6      	beq.n	8007226 <_printf_common+0xae>
 8007258:	3601      	adds	r6, #1
 800725a:	e7d9      	b.n	8007210 <_printf_common+0x98>

0800725c <_printf_i>:
 800725c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	7e0f      	ldrb	r7, [r1, #24]
 8007262:	4691      	mov	r9, r2
 8007264:	2f78      	cmp	r7, #120	@ 0x78
 8007266:	4680      	mov	r8, r0
 8007268:	460c      	mov	r4, r1
 800726a:	469a      	mov	sl, r3
 800726c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800726e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007272:	d807      	bhi.n	8007284 <_printf_i+0x28>
 8007274:	2f62      	cmp	r7, #98	@ 0x62
 8007276:	d80a      	bhi.n	800728e <_printf_i+0x32>
 8007278:	2f00      	cmp	r7, #0
 800727a:	f000 80d3 	beq.w	8007424 <_printf_i+0x1c8>
 800727e:	2f58      	cmp	r7, #88	@ 0x58
 8007280:	f000 80ba 	beq.w	80073f8 <_printf_i+0x19c>
 8007284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800728c:	e03a      	b.n	8007304 <_printf_i+0xa8>
 800728e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007292:	2b15      	cmp	r3, #21
 8007294:	d8f6      	bhi.n	8007284 <_printf_i+0x28>
 8007296:	a101      	add	r1, pc, #4	@ (adr r1, 800729c <_printf_i+0x40>)
 8007298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800729c:	080072f5 	.word	0x080072f5
 80072a0:	08007309 	.word	0x08007309
 80072a4:	08007285 	.word	0x08007285
 80072a8:	08007285 	.word	0x08007285
 80072ac:	08007285 	.word	0x08007285
 80072b0:	08007285 	.word	0x08007285
 80072b4:	08007309 	.word	0x08007309
 80072b8:	08007285 	.word	0x08007285
 80072bc:	08007285 	.word	0x08007285
 80072c0:	08007285 	.word	0x08007285
 80072c4:	08007285 	.word	0x08007285
 80072c8:	0800740b 	.word	0x0800740b
 80072cc:	08007333 	.word	0x08007333
 80072d0:	080073c5 	.word	0x080073c5
 80072d4:	08007285 	.word	0x08007285
 80072d8:	08007285 	.word	0x08007285
 80072dc:	0800742d 	.word	0x0800742d
 80072e0:	08007285 	.word	0x08007285
 80072e4:	08007333 	.word	0x08007333
 80072e8:	08007285 	.word	0x08007285
 80072ec:	08007285 	.word	0x08007285
 80072f0:	080073cd 	.word	0x080073cd
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6032      	str	r2, [r6, #0]
 80072fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007304:	2301      	movs	r3, #1
 8007306:	e09e      	b.n	8007446 <_printf_i+0x1ea>
 8007308:	6833      	ldr	r3, [r6, #0]
 800730a:	6820      	ldr	r0, [r4, #0]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	6031      	str	r1, [r6, #0]
 8007310:	0606      	lsls	r6, r0, #24
 8007312:	d501      	bpl.n	8007318 <_printf_i+0xbc>
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	e003      	b.n	8007320 <_printf_i+0xc4>
 8007318:	0645      	lsls	r5, r0, #25
 800731a:	d5fb      	bpl.n	8007314 <_printf_i+0xb8>
 800731c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007320:	2d00      	cmp	r5, #0
 8007322:	da03      	bge.n	800732c <_printf_i+0xd0>
 8007324:	232d      	movs	r3, #45	@ 0x2d
 8007326:	426d      	negs	r5, r5
 8007328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800732c:	230a      	movs	r3, #10
 800732e:	4859      	ldr	r0, [pc, #356]	@ (8007494 <_printf_i+0x238>)
 8007330:	e011      	b.n	8007356 <_printf_i+0xfa>
 8007332:	6821      	ldr	r1, [r4, #0]
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	0608      	lsls	r0, r1, #24
 8007338:	f853 5b04 	ldr.w	r5, [r3], #4
 800733c:	d402      	bmi.n	8007344 <_printf_i+0xe8>
 800733e:	0649      	lsls	r1, r1, #25
 8007340:	bf48      	it	mi
 8007342:	b2ad      	uxthmi	r5, r5
 8007344:	2f6f      	cmp	r7, #111	@ 0x6f
 8007346:	6033      	str	r3, [r6, #0]
 8007348:	bf14      	ite	ne
 800734a:	230a      	movne	r3, #10
 800734c:	2308      	moveq	r3, #8
 800734e:	4851      	ldr	r0, [pc, #324]	@ (8007494 <_printf_i+0x238>)
 8007350:	2100      	movs	r1, #0
 8007352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007356:	6866      	ldr	r6, [r4, #4]
 8007358:	2e00      	cmp	r6, #0
 800735a:	bfa8      	it	ge
 800735c:	6821      	ldrge	r1, [r4, #0]
 800735e:	60a6      	str	r6, [r4, #8]
 8007360:	bfa4      	itt	ge
 8007362:	f021 0104 	bicge.w	r1, r1, #4
 8007366:	6021      	strge	r1, [r4, #0]
 8007368:	b90d      	cbnz	r5, 800736e <_printf_i+0x112>
 800736a:	2e00      	cmp	r6, #0
 800736c:	d04b      	beq.n	8007406 <_printf_i+0x1aa>
 800736e:	4616      	mov	r6, r2
 8007370:	fbb5 f1f3 	udiv	r1, r5, r3
 8007374:	fb03 5711 	mls	r7, r3, r1, r5
 8007378:	5dc7      	ldrb	r7, [r0, r7]
 800737a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800737e:	462f      	mov	r7, r5
 8007380:	42bb      	cmp	r3, r7
 8007382:	460d      	mov	r5, r1
 8007384:	d9f4      	bls.n	8007370 <_printf_i+0x114>
 8007386:	2b08      	cmp	r3, #8
 8007388:	d10b      	bne.n	80073a2 <_printf_i+0x146>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	07df      	lsls	r7, r3, #31
 800738e:	d508      	bpl.n	80073a2 <_printf_i+0x146>
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	6861      	ldr	r1, [r4, #4]
 8007394:	4299      	cmp	r1, r3
 8007396:	bfde      	ittt	le
 8007398:	2330      	movle	r3, #48	@ 0x30
 800739a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800739e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073a2:	1b92      	subs	r2, r2, r6
 80073a4:	6122      	str	r2, [r4, #16]
 80073a6:	464b      	mov	r3, r9
 80073a8:	4621      	mov	r1, r4
 80073aa:	4640      	mov	r0, r8
 80073ac:	f8cd a000 	str.w	sl, [sp]
 80073b0:	aa03      	add	r2, sp, #12
 80073b2:	f7ff fee1 	bl	8007178 <_printf_common>
 80073b6:	3001      	adds	r0, #1
 80073b8:	d14a      	bne.n	8007450 <_printf_i+0x1f4>
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	b004      	add	sp, #16
 80073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	f043 0320 	orr.w	r3, r3, #32
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	2778      	movs	r7, #120	@ 0x78
 80073ce:	4832      	ldr	r0, [pc, #200]	@ (8007498 <_printf_i+0x23c>)
 80073d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	6831      	ldr	r1, [r6, #0]
 80073d8:	061f      	lsls	r7, r3, #24
 80073da:	f851 5b04 	ldr.w	r5, [r1], #4
 80073de:	d402      	bmi.n	80073e6 <_printf_i+0x18a>
 80073e0:	065f      	lsls	r7, r3, #25
 80073e2:	bf48      	it	mi
 80073e4:	b2ad      	uxthmi	r5, r5
 80073e6:	6031      	str	r1, [r6, #0]
 80073e8:	07d9      	lsls	r1, r3, #31
 80073ea:	bf44      	itt	mi
 80073ec:	f043 0320 	orrmi.w	r3, r3, #32
 80073f0:	6023      	strmi	r3, [r4, #0]
 80073f2:	b11d      	cbz	r5, 80073fc <_printf_i+0x1a0>
 80073f4:	2310      	movs	r3, #16
 80073f6:	e7ab      	b.n	8007350 <_printf_i+0xf4>
 80073f8:	4826      	ldr	r0, [pc, #152]	@ (8007494 <_printf_i+0x238>)
 80073fa:	e7e9      	b.n	80073d0 <_printf_i+0x174>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	f023 0320 	bic.w	r3, r3, #32
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	e7f6      	b.n	80073f4 <_printf_i+0x198>
 8007406:	4616      	mov	r6, r2
 8007408:	e7bd      	b.n	8007386 <_printf_i+0x12a>
 800740a:	6833      	ldr	r3, [r6, #0]
 800740c:	6825      	ldr	r5, [r4, #0]
 800740e:	1d18      	adds	r0, r3, #4
 8007410:	6961      	ldr	r1, [r4, #20]
 8007412:	6030      	str	r0, [r6, #0]
 8007414:	062e      	lsls	r6, r5, #24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	d501      	bpl.n	800741e <_printf_i+0x1c2>
 800741a:	6019      	str	r1, [r3, #0]
 800741c:	e002      	b.n	8007424 <_printf_i+0x1c8>
 800741e:	0668      	lsls	r0, r5, #25
 8007420:	d5fb      	bpl.n	800741a <_printf_i+0x1be>
 8007422:	8019      	strh	r1, [r3, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	4616      	mov	r6, r2
 8007428:	6123      	str	r3, [r4, #16]
 800742a:	e7bc      	b.n	80073a6 <_printf_i+0x14a>
 800742c:	6833      	ldr	r3, [r6, #0]
 800742e:	2100      	movs	r1, #0
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	6032      	str	r2, [r6, #0]
 8007434:	681e      	ldr	r6, [r3, #0]
 8007436:	6862      	ldr	r2, [r4, #4]
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f985 	bl	8007748 <memchr>
 800743e:	b108      	cbz	r0, 8007444 <_printf_i+0x1e8>
 8007440:	1b80      	subs	r0, r0, r6
 8007442:	6060      	str	r0, [r4, #4]
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	2300      	movs	r3, #0
 800744a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800744e:	e7aa      	b.n	80073a6 <_printf_i+0x14a>
 8007450:	4632      	mov	r2, r6
 8007452:	4649      	mov	r1, r9
 8007454:	4640      	mov	r0, r8
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	47d0      	blx	sl
 800745a:	3001      	adds	r0, #1
 800745c:	d0ad      	beq.n	80073ba <_printf_i+0x15e>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	079b      	lsls	r3, r3, #30
 8007462:	d413      	bmi.n	800748c <_printf_i+0x230>
 8007464:	68e0      	ldr	r0, [r4, #12]
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	4298      	cmp	r0, r3
 800746a:	bfb8      	it	lt
 800746c:	4618      	movlt	r0, r3
 800746e:	e7a6      	b.n	80073be <_printf_i+0x162>
 8007470:	2301      	movs	r3, #1
 8007472:	4632      	mov	r2, r6
 8007474:	4649      	mov	r1, r9
 8007476:	4640      	mov	r0, r8
 8007478:	47d0      	blx	sl
 800747a:	3001      	adds	r0, #1
 800747c:	d09d      	beq.n	80073ba <_printf_i+0x15e>
 800747e:	3501      	adds	r5, #1
 8007480:	68e3      	ldr	r3, [r4, #12]
 8007482:	9903      	ldr	r1, [sp, #12]
 8007484:	1a5b      	subs	r3, r3, r1
 8007486:	42ab      	cmp	r3, r5
 8007488:	dcf2      	bgt.n	8007470 <_printf_i+0x214>
 800748a:	e7eb      	b.n	8007464 <_printf_i+0x208>
 800748c:	2500      	movs	r5, #0
 800748e:	f104 0619 	add.w	r6, r4, #25
 8007492:	e7f5      	b.n	8007480 <_printf_i+0x224>
 8007494:	08007ef1 	.word	0x08007ef1
 8007498:	08007f02 	.word	0x08007f02

0800749c <__sflush_r>:
 800749c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	0716      	lsls	r6, r2, #28
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	d454      	bmi.n	8007554 <__sflush_r+0xb8>
 80074aa:	684b      	ldr	r3, [r1, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dc02      	bgt.n	80074b6 <__sflush_r+0x1a>
 80074b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dd48      	ble.n	8007548 <__sflush_r+0xac>
 80074b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	d045      	beq.n	8007548 <__sflush_r+0xac>
 80074bc:	2300      	movs	r3, #0
 80074be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074c2:	682f      	ldr	r7, [r5, #0]
 80074c4:	6a21      	ldr	r1, [r4, #32]
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	d030      	beq.n	800752c <__sflush_r+0x90>
 80074ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	0759      	lsls	r1, r3, #29
 80074d0:	d505      	bpl.n	80074de <__sflush_r+0x42>
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	1ad2      	subs	r2, r2, r3
 80074d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074d8:	b10b      	cbz	r3, 80074de <__sflush_r+0x42>
 80074da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074dc:	1ad2      	subs	r2, r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	4628      	mov	r0, r5
 80074e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	47b0      	blx	r6
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	d106      	bne.n	80074fc <__sflush_r+0x60>
 80074ee:	6829      	ldr	r1, [r5, #0]
 80074f0:	291d      	cmp	r1, #29
 80074f2:	d82b      	bhi.n	800754c <__sflush_r+0xb0>
 80074f4:	4a28      	ldr	r2, [pc, #160]	@ (8007598 <__sflush_r+0xfc>)
 80074f6:	410a      	asrs	r2, r1
 80074f8:	07d6      	lsls	r6, r2, #31
 80074fa:	d427      	bmi.n	800754c <__sflush_r+0xb0>
 80074fc:	2200      	movs	r2, #0
 80074fe:	6062      	str	r2, [r4, #4]
 8007500:	6922      	ldr	r2, [r4, #16]
 8007502:	04d9      	lsls	r1, r3, #19
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	d504      	bpl.n	8007512 <__sflush_r+0x76>
 8007508:	1c42      	adds	r2, r0, #1
 800750a:	d101      	bne.n	8007510 <__sflush_r+0x74>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b903      	cbnz	r3, 8007512 <__sflush_r+0x76>
 8007510:	6560      	str	r0, [r4, #84]	@ 0x54
 8007512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007514:	602f      	str	r7, [r5, #0]
 8007516:	b1b9      	cbz	r1, 8007548 <__sflush_r+0xac>
 8007518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <__sflush_r+0x8a>
 8007520:	4628      	mov	r0, r5
 8007522:	f7ff fbdb 	bl	8006cdc <_free_r>
 8007526:	2300      	movs	r3, #0
 8007528:	6363      	str	r3, [r4, #52]	@ 0x34
 800752a:	e00d      	b.n	8007548 <__sflush_r+0xac>
 800752c:	2301      	movs	r3, #1
 800752e:	4628      	mov	r0, r5
 8007530:	47b0      	blx	r6
 8007532:	4602      	mov	r2, r0
 8007534:	1c50      	adds	r0, r2, #1
 8007536:	d1c9      	bne.n	80074cc <__sflush_r+0x30>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0c6      	beq.n	80074cc <__sflush_r+0x30>
 800753e:	2b1d      	cmp	r3, #29
 8007540:	d001      	beq.n	8007546 <__sflush_r+0xaa>
 8007542:	2b16      	cmp	r3, #22
 8007544:	d11d      	bne.n	8007582 <__sflush_r+0xe6>
 8007546:	602f      	str	r7, [r5, #0]
 8007548:	2000      	movs	r0, #0
 800754a:	e021      	b.n	8007590 <__sflush_r+0xf4>
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	b21b      	sxth	r3, r3
 8007552:	e01a      	b.n	800758a <__sflush_r+0xee>
 8007554:	690f      	ldr	r7, [r1, #16]
 8007556:	2f00      	cmp	r7, #0
 8007558:	d0f6      	beq.n	8007548 <__sflush_r+0xac>
 800755a:	0793      	lsls	r3, r2, #30
 800755c:	bf18      	it	ne
 800755e:	2300      	movne	r3, #0
 8007560:	680e      	ldr	r6, [r1, #0]
 8007562:	bf08      	it	eq
 8007564:	694b      	ldreq	r3, [r1, #20]
 8007566:	1bf6      	subs	r6, r6, r7
 8007568:	600f      	str	r7, [r1, #0]
 800756a:	608b      	str	r3, [r1, #8]
 800756c:	2e00      	cmp	r6, #0
 800756e:	ddeb      	ble.n	8007548 <__sflush_r+0xac>
 8007570:	4633      	mov	r3, r6
 8007572:	463a      	mov	r2, r7
 8007574:	4628      	mov	r0, r5
 8007576:	6a21      	ldr	r1, [r4, #32]
 8007578:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800757c:	47e0      	blx	ip
 800757e:	2800      	cmp	r0, #0
 8007580:	dc07      	bgt.n	8007592 <__sflush_r+0xf6>
 8007582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007592:	4407      	add	r7, r0
 8007594:	1a36      	subs	r6, r6, r0
 8007596:	e7e9      	b.n	800756c <__sflush_r+0xd0>
 8007598:	dfbffffe 	.word	0xdfbffffe

0800759c <_fflush_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	690b      	ldr	r3, [r1, #16]
 80075a0:	4605      	mov	r5, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	b913      	cbnz	r3, 80075ac <_fflush_r+0x10>
 80075a6:	2500      	movs	r5, #0
 80075a8:	4628      	mov	r0, r5
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	b118      	cbz	r0, 80075b6 <_fflush_r+0x1a>
 80075ae:	6a03      	ldr	r3, [r0, #32]
 80075b0:	b90b      	cbnz	r3, 80075b6 <_fflush_r+0x1a>
 80075b2:	f7ff f977 	bl	80068a4 <__sinit>
 80075b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f3      	beq.n	80075a6 <_fflush_r+0xa>
 80075be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075c0:	07d0      	lsls	r0, r2, #31
 80075c2:	d404      	bmi.n	80075ce <_fflush_r+0x32>
 80075c4:	0599      	lsls	r1, r3, #22
 80075c6:	d402      	bmi.n	80075ce <_fflush_r+0x32>
 80075c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ca:	f7ff fb84 	bl	8006cd6 <__retarget_lock_acquire_recursive>
 80075ce:	4628      	mov	r0, r5
 80075d0:	4621      	mov	r1, r4
 80075d2:	f7ff ff63 	bl	800749c <__sflush_r>
 80075d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075d8:	4605      	mov	r5, r0
 80075da:	07da      	lsls	r2, r3, #31
 80075dc:	d4e4      	bmi.n	80075a8 <_fflush_r+0xc>
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	059b      	lsls	r3, r3, #22
 80075e2:	d4e1      	bmi.n	80075a8 <_fflush_r+0xc>
 80075e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075e6:	f7ff fb77 	bl	8006cd8 <__retarget_lock_release_recursive>
 80075ea:	e7dd      	b.n	80075a8 <_fflush_r+0xc>

080075ec <__swhatbuf_r>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	4615      	mov	r5, r2
 80075f6:	2900      	cmp	r1, #0
 80075f8:	461e      	mov	r6, r3
 80075fa:	b096      	sub	sp, #88	@ 0x58
 80075fc:	da0c      	bge.n	8007618 <__swhatbuf_r+0x2c>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	2100      	movs	r1, #0
 8007602:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007606:	bf14      	ite	ne
 8007608:	2340      	movne	r3, #64	@ 0x40
 800760a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800760e:	2000      	movs	r0, #0
 8007610:	6031      	str	r1, [r6, #0]
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	b016      	add	sp, #88	@ 0x58
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	466a      	mov	r2, sp
 800761a:	f000 f863 	bl	80076e4 <_fstat_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	dbed      	blt.n	80075fe <__swhatbuf_r+0x12>
 8007622:	9901      	ldr	r1, [sp, #4]
 8007624:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007628:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800762c:	4259      	negs	r1, r3
 800762e:	4159      	adcs	r1, r3
 8007630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007634:	e7eb      	b.n	800760e <__swhatbuf_r+0x22>

08007636 <__smakebuf_r>:
 8007636:	898b      	ldrh	r3, [r1, #12]
 8007638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763a:	079d      	lsls	r5, r3, #30
 800763c:	4606      	mov	r6, r0
 800763e:	460c      	mov	r4, r1
 8007640:	d507      	bpl.n	8007652 <__smakebuf_r+0x1c>
 8007642:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	2301      	movs	r3, #1
 800764c:	6163      	str	r3, [r4, #20]
 800764e:	b003      	add	sp, #12
 8007650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007652:	466a      	mov	r2, sp
 8007654:	ab01      	add	r3, sp, #4
 8007656:	f7ff ffc9 	bl	80075ec <__swhatbuf_r>
 800765a:	9f00      	ldr	r7, [sp, #0]
 800765c:	4605      	mov	r5, r0
 800765e:	4639      	mov	r1, r7
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff fba5 	bl	8006db0 <_malloc_r>
 8007666:	b948      	cbnz	r0, 800767c <__smakebuf_r+0x46>
 8007668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766c:	059a      	lsls	r2, r3, #22
 800766e:	d4ee      	bmi.n	800764e <__smakebuf_r+0x18>
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	f043 0302 	orr.w	r3, r3, #2
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	e7e2      	b.n	8007642 <__smakebuf_r+0xc>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	6020      	str	r0, [r4, #0]
 800768c:	b15b      	cbz	r3, 80076a6 <__smakebuf_r+0x70>
 800768e:	4630      	mov	r0, r6
 8007690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007694:	f000 f838 	bl	8007708 <_isatty_r>
 8007698:	b128      	cbz	r0, 80076a6 <__smakebuf_r+0x70>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	431d      	orrs	r5, r3
 80076aa:	81a5      	strh	r5, [r4, #12]
 80076ac:	e7cf      	b.n	800764e <__smakebuf_r+0x18>

080076ae <memmove>:
 80076ae:	4288      	cmp	r0, r1
 80076b0:	b510      	push	{r4, lr}
 80076b2:	eb01 0402 	add.w	r4, r1, r2
 80076b6:	d902      	bls.n	80076be <memmove+0x10>
 80076b8:	4284      	cmp	r4, r0
 80076ba:	4623      	mov	r3, r4
 80076bc:	d807      	bhi.n	80076ce <memmove+0x20>
 80076be:	1e43      	subs	r3, r0, #1
 80076c0:	42a1      	cmp	r1, r4
 80076c2:	d008      	beq.n	80076d6 <memmove+0x28>
 80076c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076cc:	e7f8      	b.n	80076c0 <memmove+0x12>
 80076ce:	4601      	mov	r1, r0
 80076d0:	4402      	add	r2, r0
 80076d2:	428a      	cmp	r2, r1
 80076d4:	d100      	bne.n	80076d8 <memmove+0x2a>
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076e0:	e7f7      	b.n	80076d2 <memmove+0x24>
	...

080076e4 <_fstat_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	2300      	movs	r3, #0
 80076e8:	4d06      	ldr	r5, [pc, #24]	@ (8007704 <_fstat_r+0x20>)
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f7f9 fd19 	bl	8001128 <_fstat>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d102      	bne.n	8007700 <_fstat_r+0x1c>
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	b103      	cbz	r3, 8007700 <_fstat_r+0x1c>
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	200014a8 	.word	0x200014a8

08007708 <_isatty_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	2300      	movs	r3, #0
 800770c:	4d05      	ldr	r5, [pc, #20]	@ (8007724 <_isatty_r+0x1c>)
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7f9 fd17 	bl	8001146 <_isatty>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_isatty_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_isatty_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	200014a8 	.word	0x200014a8

08007728 <_sbrk_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	2300      	movs	r3, #0
 800772c:	4d05      	ldr	r5, [pc, #20]	@ (8007744 <_sbrk_r+0x1c>)
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7f9 fd1e 	bl	8001174 <_sbrk>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_sbrk_r+0x1a>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_sbrk_r+0x1a>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200014a8 	.word	0x200014a8

08007748 <memchr>:
 8007748:	4603      	mov	r3, r0
 800774a:	b510      	push	{r4, lr}
 800774c:	b2c9      	uxtb	r1, r1
 800774e:	4402      	add	r2, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	4618      	mov	r0, r3
 8007754:	d101      	bne.n	800775a <memchr+0x12>
 8007756:	2000      	movs	r0, #0
 8007758:	e003      	b.n	8007762 <memchr+0x1a>
 800775a:	7804      	ldrb	r4, [r0, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	428c      	cmp	r4, r1
 8007760:	d1f6      	bne.n	8007750 <memchr+0x8>
 8007762:	bd10      	pop	{r4, pc}

08007764 <memcpy>:
 8007764:	440a      	add	r2, r1
 8007766:	4291      	cmp	r1, r2
 8007768:	f100 33ff 	add.w	r3, r0, #4294967295
 800776c:	d100      	bne.n	8007770 <memcpy+0xc>
 800776e:	4770      	bx	lr
 8007770:	b510      	push	{r4, lr}
 8007772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007776:	4291      	cmp	r1, r2
 8007778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800777c:	d1f9      	bne.n	8007772 <memcpy+0xe>
 800777e:	bd10      	pop	{r4, pc}

08007780 <_realloc_r>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	4680      	mov	r8, r0
 8007786:	4615      	mov	r5, r2
 8007788:	460c      	mov	r4, r1
 800778a:	b921      	cbnz	r1, 8007796 <_realloc_r+0x16>
 800778c:	4611      	mov	r1, r2
 800778e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007792:	f7ff bb0d 	b.w	8006db0 <_malloc_r>
 8007796:	b92a      	cbnz	r2, 80077a4 <_realloc_r+0x24>
 8007798:	f7ff faa0 	bl	8006cdc <_free_r>
 800779c:	2400      	movs	r4, #0
 800779e:	4620      	mov	r0, r4
 80077a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a4:	f000 f81a 	bl	80077dc <_malloc_usable_size_r>
 80077a8:	4285      	cmp	r5, r0
 80077aa:	4606      	mov	r6, r0
 80077ac:	d802      	bhi.n	80077b4 <_realloc_r+0x34>
 80077ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077b2:	d8f4      	bhi.n	800779e <_realloc_r+0x1e>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4640      	mov	r0, r8
 80077b8:	f7ff fafa 	bl	8006db0 <_malloc_r>
 80077bc:	4607      	mov	r7, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0ec      	beq.n	800779c <_realloc_r+0x1c>
 80077c2:	42b5      	cmp	r5, r6
 80077c4:	462a      	mov	r2, r5
 80077c6:	4621      	mov	r1, r4
 80077c8:	bf28      	it	cs
 80077ca:	4632      	movcs	r2, r6
 80077cc:	f7ff ffca 	bl	8007764 <memcpy>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4640      	mov	r0, r8
 80077d4:	f7ff fa82 	bl	8006cdc <_free_r>
 80077d8:	463c      	mov	r4, r7
 80077da:	e7e0      	b.n	800779e <_realloc_r+0x1e>

080077dc <_malloc_usable_size_r>:
 80077dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e0:	1f18      	subs	r0, r3, #4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfbc      	itt	lt
 80077e6:	580b      	ldrlt	r3, [r1, r0]
 80077e8:	18c0      	addlt	r0, r0, r3
 80077ea:	4770      	bx	lr

080077ec <_init>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	bf00      	nop
 80077f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f2:	bc08      	pop	{r3}
 80077f4:	469e      	mov	lr, r3
 80077f6:	4770      	bx	lr

080077f8 <_fini>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr
